{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"cicd/gh-action/","title":"GitHub action","text":"<p>A GitHub action is available to easily install Chainsaw in your workflows.</p> <p>The GitHub action is available at kyverno/action-install-chainsaw or in the marketplace.</p>"},{"location":"cicd/gh-action/#usage","title":"Usage","text":"<p>This action currently supports GitHub-provided Linux, macOS and Windows runners (self-hosted runners may not work).</p> <p>Add the following entry to your Github workflow YAML file:</p> <pre><code>uses: kyverno/action-install-chainsaw@v0.1.0\nwith:\n  release: v0.1.0 # optional\n</code></pre> <p>Example using a pinned version:</p> <pre><code>jobs:\n  example:\n    runs-on: ubuntu-latest\n\n    permissions: {}\n\n    name: Install Chainsaw\n    steps:\n      - name: Install Chainsaw\n        uses: kyverno/action-install-chainsaw@v0.1.0\n        with:\n          release: v0.0.9\n      - name: Check install\n        run: chainsaw version\n</code></pre> <p>Example using the default version:</p> <pre><code>jobs:\n  example:\n    runs-on: ubuntu-latest\n\n    permissions: {}\n\n    name: Install Chainsaw\n    steps:\n      - name: Install Chainsaw\n        uses: kyverno/action-install-chainsaw@v0.1.0\n      - name: Check install\n        run: chainsaw version\n</code></pre> <p>Example using cosign verification:</p> <pre><code>jobs:\n  example:\n    runs-on: ubuntu-latest\n\n    permissions: {}\n\n    name: Install Chainsaw\n    steps:\n      - name: Install Cosign\n        uses: sigstore/cosign-installer@v3.1.1\n      - name: Install Chainsaw\n        uses: kyverno/action-install-chainsaw@v0.1.0\n        with:\n          verify: true\n      - name: Check install\n        run: chainsaw version\n</code></pre> <p>If you want to install Chainsaw from its main version by using <code>go install</code> under the hood, you can set <code>release</code> as <code>main</code>. Once you did that, Chainsaw will be installed via <code>go install</code> which means that please ensure that go is installed.</p> <p>Example of installing Chainsaw via <code>go install</code>:</p> <pre><code>jobs:\n  example:\n    runs-on: ubuntu-latest\n\n    permissions: {}\n\n    name: Install Chainsaw via go install\n    steps:\n      - name: Install go\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.21'\n      - name: Install Chainsaw\n        uses: kyverno/action-install-chainsaw@v0.1.0\n        with:\n          release: main\n      - name: Check install\n        run: chainsaw version\n</code></pre>"},{"location":"cicd/gh-action/#optional-inputs","title":"Optional Inputs","text":"<p>The following optional inputs:</p> Input Description <code>release</code> <code>chainsaw</code> version to use instead of the default. <code>install-dir</code> directory to place the <code>chainsaw</code> binary into instead of the default (<code>$HOME/.chainsaw</code>). <code>use-sudo</code> set to <code>true</code> if <code>install-dir</code> location requires sudo privs. Defaults to false. <code>verify</code> set to <code>true</code> to enable cosign verification of the downloaded archive."},{"location":"community/","title":"Community","text":"<p>Chainsaw has a growing community and we would definitely love to see you join and contribute.</p> <p>Everyone is welcome to make suggestions, report bugs, open feature requests, contribute code or docs, participate in discussions, write blogs or anything that can benefit the project.</p>  Chainsaw is built and maintained under the Kyverno umbrella but decisions are Community driven Everyone's voice matters"},{"location":"community/#slack-channel","title":"Slack channel","text":"<p>Join our slack channel #kyverno-chainsaw to meet with users, contributors and maintainers.</p>"},{"location":"community/#community-meetings","title":"Community Meetings","text":"<p>To attend our community meetings, join the Chainsaw group. You will then be sent a meeting invite and will have access to the agenda and meeting notes. Any member may suggest topics for discussion.</p> <p>This is a public, weekly for Kyverno-Chainsaw maintainers to make announcements and provide project updates, and request input and feedback. This forum allows community members to raise agenda items of any sort, including but not limited to any PRs or issues on which they are working.</p> <p>Weekly every Thursday at 2:00 PM UTC</p> <ul> <li>Chainsaw group</li> <li>Zoom Meeting</li> <li>Agenda and meeting notes</li> </ul>"},{"location":"community/#roadmap","title":"RoadMap","text":"<p>For detailed information on our planned features and upcoming updates, please view our Roadmap.</p>"},{"location":"community/#contributing","title":"Contributing","text":"<p>Please read the contributing guide for details around:</p> <ol> <li>Code of Conduct</li> <li>Code Culture</li> <li>Details on how to contribute</li> </ol>"},{"location":"community/#adopters","title":"Adopters","text":"<p>If you are using Chainsaw and want to share it publicly we always appreciate a bit of support. Pull requests to the ADOPTERS LIST will put a smile on our faces </p>"},{"location":"community/contribute/","title":"Contributing","text":"<p>Chainsaw, developed by Kyverno, is an advanced end-to-end testing tool for Kubernetes. Our community plays a crucial role in shaping the project by reporting bugs, suggesting features, and improving documentation.</p> <p>We aim to make our issue tracker, discussion board, and documentation well-structured and easy to navigate. By following our guidelines, you can help us address your requests efficiently.</p>"},{"location":"community/contribute/#how-you-can-contribute","title":"How you can contribute","text":"<p>We appreciate your efforts in reporting bugs, requesting features, and engaging in discussions. Here's how you can contribute:</p>"},{"location":"community/contribute/#creating-an-issue","title":"Creating an issue","text":"<ul> <li> <p> Something is not working?</p> <p>Report a bug in Chainsaw by creating an issue with a reproduction</p> <p> Report a bug</p> </li> <li> <p> Missing information in our docs?</p> <p>Report missing information or potential inconsistencies in our documentation</p> <p> Report a docs issue</p> </li> <li> <p> Want to submit an idea?</p> <p>Propose a change, feature request, or suggest an improvement</p> <p> Request a change</p> </li> <li> <p> Have a question or need help?</p> <p>Ask a question on our discussion board and get in touch with our community</p> <p> Ask a question</p> </li> </ul>"},{"location":"community/contribute/#contributing_1","title":"Contributing","text":"<ul> <li> <p> Want to create a pull request?</p> <p>Learn how to create a comprehensive and useful pull request (PR)</p> <p> Create a pull request</p> </li> </ul>"},{"location":"community/contribute/#checklist","title":"Checklist","text":"<p>Before interacting within the project, please consider the following questions to ensure you're using the correct issue template and providing all necessary information.</p> <p>Issues, discussions, and comments are forever</p> <p>Please note that everything you write is permanent and will remain for everyone to read \u2013 forever. Therefore, please always be nice and constructive, follow our contribution guidelines, and comply with our Code of Conduct.</p>"},{"location":"community/contribute/#before-creating-an-issue","title":"Before creating an issue","text":"<ul> <li>Are you using the appropriate issue template, or is there another issue template that better fits the context of your request?</li> <li>Have you checked if a similar bug report or change request has already been created, or have you stumbled upon something that might be related?</li> <li>Did you fill out every field as requested and provide all additional information needed to comprehend your request?</li> </ul>"},{"location":"community/contribute/#before-asking-a-question","title":"Before asking a question","text":"<ul> <li>Is the topic a question for our discussion board, or is it a bug report or change request that should be raised on our [issue tracker]?</li> <li>Is there an open discussion on the topic of your request? If the answer is yes, does your question match the direction of the discussion, or should you open a new discussion?</li> <li>Did you provide our community with all the necessary information to understand your question and help you quickly, or can you make it easier to help you?</li> </ul>"},{"location":"community/contribute/#before-commenting","title":"Before commenting","text":"<ul> <li>Is your comment relevant to the topic of the current page, post, issue, or discussion, or is it better to create a new issue or discussion?</li> <li>Does your comment add value to the conversation? Is it constructive and respectful to our community and maintainers? Could you just use a  reaction instead?</li> </ul>"},{"location":"community/contribute/#rights-and-responsibilities","title":"Rights and responsibilities","text":"<p>As maintainers, we are entrusted with the responsibility to moderate communication within our community, including the authority to close, remove, reject, or edit issues, discussions, comments, commits, and to block users who do not align with our contribution guidelines and our Code of Conduct. This role requires us to be actively involved in maintaining the integrity and positive atmosphere of our community. Upholding these standards decisively ensures a respectful and inclusive environment for all members.</p>"},{"location":"community/contribute/#code-of-conduct","title":"Code of Conduct","text":"<p>Our Code of Conduct outlines the expectation for all community members to treat one another with respect, employing inclusive and welcoming language. Our commitment is to foster a positive and supportive environment, free of inappropriate, offensive, or harmful behavior.</p> <p>We take any violations seriously and will take appropriate action in response to uphold these values.<sup>1</sup></p>"},{"location":"community/contribute/#incomplete-issues-and-duplicates","title":"Incomplete issues and duplicates","text":"<p>We have invested significant time and effort in the setup of our contribution process, ensuring that we assess the essential requirements for reviewing and responding to issues effectively. Each field in our issue templates is thoughtfully designed to help us fully understand your concerns and the nature of your matter. We encourage all members to utilize the search function before submitting new issues or starting discussions to help avoid duplicates. Your cooperation is crucial in keeping our community's discussions constructive and organized.</p> <ul> <li> <p>Mandatory completion of issue templates: We need all of the information required in our issue templates because it ensures that every user and maintainer, regardless of their experience, can understand the content and severity of your bug report or change request.</p> </li> <li> <p>Closing incomplete issues:   We reserve the right to close issues lacking essential information, such as but not limited to [minimal reproductions] or those not adhering to the quality standards and requirements specified in our issue templates. Such issues can be reopened once the missing information has been provided.</p> </li> <li> <p>Handling duplicates: To maintain organized and efficient communication within our [issue tracker] and discussion board, we reserve the right to close any duplicated issues or lock duplicated discussions. Opening multiple channels to ask the same question or report the same issue across different forums hinders our ability to manage and address community concerns effectively. This approach is vital for efficient time management, as duplicated questions can consume the time of multiple team members simultaneously. Ensuring that each issue or discussion is unique and progresses with new information helps us to maintain focus and support our community.</p> <p>We further reserve the right to immediately close discussions or issues that are reopened without providing new information or simply because users have not yet received a response to their issue/question, as the issue is marked as incomplete.</p> </li> <li> <p>Limitations of automated tools:  While we believe in the value and efficiency that automated tools bring to identifying potential issues (such as those identified by Lighthouse, Accessibility tools, and others), simply submitting an issue generated by these tools does not constitute a complete bug report. These tools sometimes produce verbose outputs and may include false positives, which necessitate a critical evaluation. You are of course welcome to attach generated reports to your issue. However, this does not substitute the requirement for a minimal reproduction or a thorough discussion of the findings. We reserve the right to mark these issues as incomplete and close them. This practice ensures that we are addressing genuine concerns with precision and clarity, rather than navigating through extensive automated outputs.</p> </li> </ul> <ol> <li> <p>Warning and blocking policy: Given the increasing popularity of our project and our commitment to a healthy community, we've defined clear guidelines on how we proceed with violations:</p> <p>1.1. First warning: Users displaying repeated inappropriate, offensive, or harmful behavior will receive a first warning. This warning serves as a formal notice that their behavior is not in alignment with our community standards and Code of Conduct. The first warning is permanent.</p> <p>1.2. Second warning and opportunity for resolution: If the behavior persists, a second warning will be issued. Upon receiving the second warning, the user will be given a 5-day period for reflection, during which they are encouraged to publicly explain or apologize for their actions. This period is designed to offer an opportunity for openly clearing out any misunderstanding.</p> <p>1.3. Blocking: Should there be no response or improvement in behavior following the second warning, we reserve the right to block the user from the community and repository. Blocking is considered a last resort, used only when absolutely necessary to protect the community's integrity and positive atmosphere.</p> <p>Blocking has been an exceptionally rare necessity in our overwhelmingly positive community, highlighting our preference for constructive dialogue and mutual respect. It aims to protect our community members and team.\u00a0\u21a9</p> </li> </ol>"},{"location":"community/making-a-pull-request/","title":"Pull Requests","text":"<p>You can contribute to Chainsaw by making a pull request that will be reviewed by maintainers and integrated into the main repository when the changes made are approved. You can contribute bug fixes, documentation changes, or new functionalities.</p> <p>Considering a pull request</p> <p>Before deciding to spend effort on making changes and creating a pull request, please discuss what you intend to do. If you are responding to what you think might be a bug, please issue a bug report first. If you intend to work on documentation, create a documentation issue. If you want to work on a new feature, please create a change request.</p> <p>Keep in mind the guidance given and let people advise you. It might be that there are easier solutions to the problem you perceive and want to address. It might be that what you want to achieve can already be done by configuration or [customization].</p>"},{"location":"community/making-a-pull-request/#learning-about-pull-requests","title":"Learning about pull requests","text":"<p>Pull requests are a concept layered on top of Git by services that provide Git hosting. Before you consider making a pull request, you should familiarize yourself with the documentation on GitHub, the service we are using. The following articles are of particular importance:</p> <ol> <li>Forking a repository</li> <li>Creating a pull request from a fork</li> <li>Creating a pull request</li> </ol> <p>Note that they provide tailored documentation for different operating systems and different ways of interacting with GitHub. We do our best in the documentation here to describe the process as it applies to Chainsaw but cannot cover all possible combinations of tools and ways of doing things. It is also important that you understand the concept of a pull-request in general before continuing.</p>"},{"location":"community/making-a-pull-request/#pull-request-process","title":"Pull request process","text":"<p>In the following, we describe the general process for making pull requests. The aim here is to provide the 30k ft overview before describing details later on.</p>"},{"location":"community/making-a-pull-request/#preparing-changes-and-draft-pr","title":"Preparing changes and draft PR","text":"<p>The diagram below describes what typically happens to repositories in the process or preparing a pull request. We will be discussing the review-revise process below. It is important that you understand the overall process first before you worry about specific commands. This is why we cover this first before providing instructions below.</p> <pre><code>sequenceDiagram\n  autonumber\n\n  participant chainsaw\n  participant PR\n  participant fork\n  participant local\n\n  chainsaw -&gt;&gt; fork: fork on GitHub\n  fork -&gt;&gt; local: clone to local\n  local -&gt;&gt; local: branch\n  loop prepare\n    loop push\n      loop edit\n        local -&gt;&gt; local: commit\n      end\n      local -&gt;&gt; fork: push\n    end\n    chainsaw -&gt;&gt; fork: merge in any changes\n    fork -&gt;&gt;+ PR: create draft PR\n    PR -&gt;&gt; PR: review your changes\n  end</code></pre> <ol> <li>Fork the Repository: Fork the Chainsaw repository on GitHub to create your own copy.</li> <li>Clone to Local: Clone your fork to your local machine.</li> <li>Create a Branch: Create a topic branch for your changes.</li> <li>Set Up Development Environment: Follow the instructions to set up a development environment.</li> <li>Iterate and Commit: Make incremental changes and commit them with meaningful messages.</li> <li>Push Regularly: Push your commits to your fork regularly.</li> <li>Merge Changes from Upstream: Regularly merge changes from the original Chainsaw repository to avoid conflicts.</li> <li>Create a Draft Pull Request: Once satisfied with your changes, create a draft pull request for early feedback.</li> <li>Review and Revise: Review your work critically, address feedback, and refine your changes.</li> </ol>"},{"location":"community/making-a-pull-request/#finalizing","title":"Finalizing","text":"<p>Once you are happy with your changes, you can move to the next step, finalizing your pull request and asking for a more formal and detailed review. The diagram below shows the process:</p> <pre><code>sequenceDiagram\n  autonumber\n  participant chainsaw\n  participant PR\n  participant fork\n  participant local\n\n  activate PR\n  PR -&gt;&gt; PR: finalize PR\n  loop review\n    loop discuss\n      PR -&gt;&gt; PR: request review\n      PR -&gt;&gt; PR: discussion\n      local -&gt;&gt; fork: push further changes\n    end\n    PR -&gt;&gt; chainsaw: merge (and squash)\n    deactivate PR\n    fork -&gt;&gt; fork: delete branch\n    chainsaw -&gt;&gt; fork: pull\n    local -&gt;&gt; local: delete branch\n    fork -&gt;&gt; local: pull\n  end\n</code></pre> <ol> <li>Finalize PR: Signal that your changes are ready for review.</li> <li>Request Review: Ask the maintainer to review your changes.</li> <li>Discuss and Revise: Engage in discussions, make necessary revisions, and iterate.</li> <li>Merge and Squash: Once approved, the maintainer will merge and possibly squash your commits.</li> <li>Clean Up: Delete the branch used for the PR from both your fork and local clone.</li> </ol>"},{"location":"community/reporting-a-bug/","title":"Bug Reports","text":"<p>Chainsaw, developed by Kyverno, is an actively maintained project that we constantly strive to improve. With a project of this size and complexity, bugs may occur. If you think you have discovered a bug, you can help us by submitting an issue in our public issue tracker, following this guide.</p>"},{"location":"community/reporting-a-bug/#before-creating-an-issue","title":"Before Creating an Issue","text":"<p>With numerous users, issues are created regularly. The maintainers of this project strive to address bugs promptly. By following this guide, you will know exactly what information we need to help you quickly.</p> <p>Please do the following before creating an issue:</p>"},{"location":"community/reporting-a-bug/#upgrade-to-latest-version","title":"Upgrade to Latest Version","text":"<p>Chances are that the bug you discovered was already fixed in a subsequent version. Before reporting an issue, ensure that you're running the [latest version] of Chainsaw. Consult our [upgrade guide] to learn how to upgrade to the latest version.</p> <p>Bug fixes are not backported</p> <p>Please understand that only bugs that occur in the latest version of Chainsaw will be addressed. Also, to reduce duplicate efforts, fixes cannot be backported to earlier versions.</p>"},{"location":"community/reporting-a-bug/#remove-customizations","title":"Remove Customizations","text":"<p>If you're using customizations like additional configurations, remove them before reporting a bug. We can't offer official support for bugs that might hide in your overrides, so make sure to omit custom settings from your configuration files.</p> <p>Don't be shy to ask on our discussion board for help if you run into problems.</p>"},{"location":"community/reporting-a-bug/#search-for-solutions","title":"Search for Solutions","text":"<p>At this stage, we know that the problem persists in the latest version and is not caused by any of your customizations. However, the problem might result from a small typo or a syntactical error in a configuration file.</p> <p>Before creating a bug report, save time for us and yourself by doing some research:</p> <ol> <li>Search our documentation for relevant sections related to your problem. Ensure everything is configured correctly.</li> <li>[Search our issue tracker] as another user might have already reported the same problem.</li> <li>[Search our discussion board] to see if other users are facing similar issues and find possible solutions.</li> </ol> <p>Keep track of all search terms and relevant links; you'll need them in the bug report.</p> <p>If you still haven't found a solution to your problem, create an issue. It's now likely that you've encountered something new. Read the following section to learn how to create a complete and helpful bug report.</p>"},{"location":"community/reporting-a-bug/#issue-template","title":"Issue Template","text":"<p>We have created a new issue template to make the bug reporting process as simple as possible and more efficient for our community and us. It consists of the following parts:</p> <ul> <li>Title</li> <li>Context optional</li> <li>Bug Description</li> <li>Related Links</li> <li>Reproduction</li> <li>Steps to Reproduce</li> <li>Browser optional</li> <li>Checklist</li> </ul>"},{"location":"community/reporting-a-bug/#title","title":"Title","text":"<p>A good title is short and descriptive. It should be a one-sentence executive summary of the issue, so the impact and severity of the bug can be inferred from the title.</p> Example Clear Chainsaw <code>apply</code> command fails with specific CRD Wordy The <code>apply</code> command in Chainsaw fails when used with a certain Custom Resource Definition Unclear Command does not work Useless Help"},{"location":"community/reporting-a-bug/#context","title":"Context optional","text":"<p>Before describing the bug, you can provide additional context to help us understand what you were trying to achieve. Explain the circumstances under which you're using Chainsaw, and what you think might be relevant. Don't describe the bug here.</p>"},{"location":"community/reporting-a-bug/#bug-description","title":"Bug Description","text":"<p>Provide a clear, focused, specific, and concise summary of the bug you encountered. Explain why you think this is a bug that should be reported to Chainsaw, and not to one of its dependencies. Follow these principles:</p> <ul> <li>Explain the what, not the how \u2013 don't explain how to reproduce the bug here, we're getting there. Focus on articulating the problem and its impact.</li> <li>Keep it short and concise \u2013 if the bug can be precisely explained in one or two sentences, perfect. Don't inflate it.</li> <li>One bug at a time \u2013 if you encounter several unrelated bugs, create separate issues for them.</li> </ul>"},{"location":"community/reporting-a-bug/#related-links","title":"Related Links","text":"<p>Share links to relevant sections of our documentation and any related issues or discussions. This helps us improve our documentation and understand the problem better.</p>"},{"location":"community/reporting-a-bug/#reproduction","title":"Reproduction","text":"<p>A minimal reproduction is essential for a well-written bug report, as it allows us to recreate the conditions necessary to inspect the bug. Follow the guide to create a reproduction:</p> <p>[ Create reproduction][Create reproduction]{ .md-button .md-button--primary }</p> <p>After creating the reproduction, you should have a <code>.zip</code> file, ideally not larger than 1 MB. Drag and drop the <code>.zip</code> file into the issue field, which will automatically upload it to GitHub.</p> <p>Don't share links to repositories</p> <p>While linking to a repository is a common practice, we currently don't support this. The reproduction, created using the built-in info plugin, contains all necessary environment information.</p>"},{"location":"community/reporting-a-bug/#steps-to-reproduce","title":"Steps to Reproduce","text":"<p>List specific steps to follow when running your reproduction to observe the bug. Keep the steps concise and ensure nothing is left out. Use simple language and focus on continuity.</p>"},{"location":"community/reporting-a-bug/#browser","title":"Browser optional","text":"<p>If the bug only occurs in specific browsers, let us know which ones are affected. This field is optional, as it is only relevant for bugs that do not involve a crash when previewing or building your site.</p> <p>Incognito Mode</p> <p>Verify that the bug is not caused by a browser extension by switching to incognito mode. If the bug disappears, it is likely caused by an extension.</p>"},{"location":"community/reporting-a-bug/#checklist","title":"Checklist","text":"<p>Before submitting, ensure you have:</p> <ul> <li>Followed this guide thoroughly</li> <li>Provided all necessary information</li> <li>Created a minimal reproduction</li> </ul> <p>Thanks for following the guide and creating a high-quality bug report. We will take it from here.</p>"},{"location":"community/reporting-a-docs-issue/","title":"Documentation Issues","text":"<p>The Chainsaw documentation includes extensive information on features, configurations, customizations, and more. If you have found an inconsistency or see room for improvement, please follow this guide to submit an issue on our issue tracker.</p>"},{"location":"community/reporting-a-docs-issue/#issue-template","title":"Issue Template","text":"<p>Reporting a documentation issue is usually less involved than reporting a bug, as we don't need a [reproduction]. Please thoroughly read this guide before creating a new documentation issue, and provide the following information as part of the issue:</p> <ul> <li>Title</li> <li>Description</li> <li>Related Links</li> <li>Proposed Change optional</li> <li>Checklist</li> </ul>"},{"location":"community/reporting-a-docs-issue/#title","title":"Title","text":"<p>A good title should be a short, one-sentence description of the issue, containing all relevant information and keywords to simplify the search in our issue tracker.</p> Example Clear Clarify resource templating setup in Chainsaw Unclear Missing information in the docs Useless Help"},{"location":"community/reporting-a-docs-issue/#description","title":"Description","text":"<p>Provide a clear and concise summary of the inconsistency or issue you encountered in the documentation or the documentation section that needs improvement. Explain why you think the documentation should be adjusted and describe the severity of the issue:</p> <ul> <li>Keep it short and concise \u2013 if the inconsistency or issue can be precisely explained in one or two sentences, perfect. Maintainers and future users will be grateful for having to read less.</li> <li>One issue at a time \u2013 if you encounter several unrelated inconsistencies, please create separate issues for them.</li> </ul> <p>Why we need this: describing the problem clearly and concisely is a prerequisite for improving our documentation \u2013 we need to understand what's wrong so we can fix it.</p>"},{"location":"community/reporting-a-docs-issue/#related-links","title":"Related Links","text":"<p>After you describe the documentation section that needs to be adjusted, share the link to this specific documentation section and other possibly related sections. Use anchor links (permanent links) where possible, as it simplifies discovery.</p> <p>Why we need this: providing the links to the documentation helps us understand which sections of our documentation need to be adjusted, extended, or overhauled.</p>"},{"location":"community/reporting-a-docs-issue/#proposed-change","title":"Proposed Change optional","text":"<p>Now that you have provided us with the description and links to the documentation sections, you can help us, maintainers, and the community by proposing an improvement. You can sketch out rough ideas or write a concrete proposal. This field is optional but very helpful.</p> <p>Why we need this: an improvement proposal can be beneficial for other users who encounter the same issue, as they offer solutions before we maintainers can update the documentation.</p>"},{"location":"community/reporting-a-docs-issue/#checklist","title":"Checklist","text":"<p>Thanks for following the guide and providing valuable feedback for our documentation \u2013 you are almost done. The checklist ensures that you have read this guide and have worked to your best knowledge to provide us with every piece of information we need to improve it.</p> <p>We'll take it from here.</p>"},{"location":"community/requesting-a-change/","title":"Change Requests","text":"<p>Chainsaw by Kyverno is a powerful tool for end-to-end testing. Serving a wide range of use cases, we value every idea or contribution from our community. Please follow this guide before submitting your change request in our public issue tracker. This helps us better understand the proposed change and how it will benefit our community.</p>"},{"location":"community/requesting-a-change/#before-creating-an-issue","title":"Before Creating an Issue","text":"<p>Before you invest time in submitting a change request, answer these questions to determine if your idea is a good fit for Chainsaw and matches the project's philosophy and tone.</p>"},{"location":"community/requesting-a-change/#its-not-a-bug-its-a-feature","title":"It's Not a Bug, It's a Feature","text":"<p>Change requests suggest minor adjustments, new features, or influence the project's direction. They are not intended for reporting bugs. Refer to our bug reporting guide for that.</p>"},{"location":"community/requesting-a-change/#look-for-sources-of-inspiration","title":"Look for Sources of Inspiration","text":"<p>If your idea is implemented in another tool or framework, collect information on its implementation. This helps us evaluate its fit more quickly.</p>"},{"location":"community/requesting-a-change/#connect-with-our-community","title":"Connect with Our Community","text":"<p>Our discussion board is the best place to connect with our community. Seeking input from other users helps implement features that benefit a larger number of users.</p> <p> Start a discussion</p>"},{"location":"community/requesting-a-change/#issue-template","title":"Issue Template","text":"<p>After doing the preliminary work, create a change request. Follow these steps:</p> <ul> <li>Title</li> <li>Context optional</li> <li>Description</li> <li>Related Links</li> <li>Use Cases</li> <li>Visuals optional</li> <li>Checklist</li> </ul>"},{"location":"community/requesting-a-change/#title","title":"Title","text":"<p>A good title is short and descriptive, summarizing the idea so the potential impact and benefit can be inferred.</p> Example Clear Support for resource templating in Chainsaw Wordy Add support for templating resources in Chainsaw for easier testing Unclear Improve templating Useless Help"},{"location":"community/requesting-a-change/#context","title":"Context optional","text":"<p>Provide additional context to help us understand what you are trying to achieve. Explain the circumstances and relevant settings without describing the change request itself.</p>"},{"location":"community/requesting-a-change/#description","title":"Description","text":"<p>Provide a detailed and clear description of your idea. Explain why your idea is relevant to Chainsaw and should be implemented here, not in one of its dependencies.</p> <ul> <li>Explain the what, not the why \u2013 focus on describing the change request precisely.</li> <li>Keep it short and concise \u2013 be brief and to the point.</li> <li>One idea at a time \u2013 if you have multiple ideas, open separate change requests for each.</li> </ul>"},{"location":"community/requesting-a-change/#related-links","title":"Related Links","text":"<p>Provide any relevant links to issues, discussions, or documentation sections related to your change request. This helps us gain additional context.</p>"},{"location":"community/requesting-a-change/#use-cases","title":"Use Cases","text":"<p>Explain how your change request would work from an author's and user's perspective. What is the expected impact, and why does it benefit other users? Would it potentially break existing functionality?</p>"},{"location":"community/requesting-a-change/#visuals","title":"Visuals optional","text":"<p>If you have any visuals, such as sketches, screenshots, mockups, or external assets, present them in this section. If you have seen this change used in other tools, showcase and describe its implementation.</p>"},{"location":"community/requesting-a-change/#checklist","title":"Checklist","text":"<p>Thanks for following the guide and creating a high-quality change request. The checklist ensures that you have read this guide and provided all necessary information for us to review your idea.</p> <p>We'll take it from here.</p>"},{"location":"community/requesting-a-change/#rejected-requests","title":"Rejected Requests","text":"<p>Your change request got rejected? We're sorry for that. We understand it can be frustrating, but we always need to consider the needs of our entire community. If you're unsure why your change request was rejected, please ask for clarification.</p> <p>We consider the following principles when evaluating change requests:</p> <ul> <li> Alignment with the project's vision and tone</li> <li> Compatibility with existing features and plugins</li> <li> Compatibility with all screen sizes and browsers</li> <li> Effort of implementation and maintenance</li> <li> Usefulness to the majority of users</li> <li> Simplicity and ease of use</li> <li> Accessibility</li> </ul> <p>If your idea was rejected, you can always implement it via [customization]. If you're unsure how or want to know if someone has already done it, get in touch with our community on the discussion board.</p>"},{"location":"configuration/","title":"Configuring Chainsaw","text":"<p>This documentation focuses on providing a breakdown of the Chainsaw configuration structure and how to use it.</p> <p>Chainsaw can be configured in two different and complementary ways:</p> <ul> <li>Using a configuration file</li> <li>Overriding configuration with command-line flags</li> </ul>"},{"location":"configuration/#specific-configuration-options","title":"Specific configuration options","text":"<p>Please pay attention to the configuration options below, they may or may not be relevant in your case but can be useful in certain cases:</p> <ul> <li>Timeouts</li> <li>Discovery options</li> <li>Execution options</li> <li>Namespace options</li> <li>Templating options</li> <li>Cleanup options</li> <li>Deletion options</li> <li>Error options</li> <li>Reporting options</li> <li>Multi-cluster options</li> <li>Pause options</li> <li>No cluster options</li> <li>Label selectors</li> <li>External values</li> </ul>"},{"location":"configuration/file/","title":"Configuration file","text":"<p>Chainsaw prioritizes its configuration in the following order:</p> <ol> <li> <p>User-specified configuration</p> <p>If you explicitly provide a configuration file using a command-line flag</p> </li> <li> <p>Default configuration file</p> <p>If no configuration is specified, Chainsaw will look for a default file named <code>.chainsaw.yaml</code> in the current working directory</p> </li> <li> <p>Internal default configuration</p> <p>In the absence of both of the above, Chainsaw will use a default configuration file embedded in the Chainsaw binary</p> </li> </ol>"},{"location":"configuration/file/#example","title":"Example","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  timeouts:\n    apply: 45s\n    assert: 20s\n    cleanup: 45s\n    delete: 25s\n    error: 10s\n    exec: 45s\n  cleanup:\n    skipDelete: false\n  execution:\n    failFast: true\n    parallel: 4\n  # ...\n</code></pre>"},{"location":"configuration/file/#how-to-specify-a-configuration","title":"How to specify a configuration","text":"<p>To use a custom configuration file:</p> <pre><code>chainsaw test --config path/to/your/config.yaml\n</code></pre>"},{"location":"configuration/file/#default-configuration","title":"Default configuration","text":"<p>The default configuration below is used by Chainsaw when no configuration file was provided and the default file <code>.chainsaw.yaml</code> does not exist.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: default\nspec: {}\n</code></pre>"},{"location":"configuration/file/#reference-documentation","title":"Reference documentation","text":"<p>See Configuration API reference for more details.</p>"},{"location":"configuration/flags/","title":"Command line flags","text":"<p>After a configuration file is loaded, you can override specific settings using command-line flags.</p> <p>Precedence</p> <p>Command-line flags always take precedence over the configuration coming from a configuration file.</p>"},{"location":"configuration/flags/#example","title":"Example","text":"<pre><code>chainsaw test                         \\\n  path/to/test/dir                    \\\n  --config path/to/your/config.yaml   \\\n  --assert-timeout 45s                \\\n  --skip-delete false                 \\\n  --fail-fast true                    \\\n  --parallel 4                        \\\n  ...\n</code></pre> <p>In this example, Chainsaw will load a configuration file but the timeout configuration and other settings will be overridden by the values set in the flags, regardless of the value in the loaded configuration file.</p>"},{"location":"configuration/flags/#reference-documentation","title":"Reference documentation","text":"<p>See chainsaw test command reference for the list of all available flags.</p>"},{"location":"configuration/options/cleanup/","title":"Cleanup options","text":"<p>Cleanup options contain the configuration used by Chainsaw for cleaning up resources.</p>"},{"location":"configuration/options/cleanup/#supported-elements","title":"Supported elements","text":"Element Default Description <code>skipDelete</code> <code>false</code> If set, do not delete the resources after running a test. <code>delayBeforeCleanup</code> DelayBeforeCleanup adds a delay between the time a test ends and the time cleanup starts."},{"location":"configuration/options/cleanup/#delay-before-cleanup","title":"Delay before cleanup","text":"<p>At the end of each test, Chainsaw will delete the resources it created during the test.</p> <p>When testing operators, it can be useful to wait a little bit before starting the cleanup process to make sure the operator/controller has the necessary time to update its internal state.</p>"},{"location":"configuration/options/cleanup/#configuration","title":"Configuration","text":""},{"location":"configuration/options/cleanup/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  cleanup:\n    skipDelete: true\n    delayBeforeCleanup: 5s\n</code></pre>"},{"location":"configuration/options/cleanup/#with-flags","title":"With flags","text":"<pre><code>chainsaw test                   \\\n  --skip-delete                 \\\n  --cleanup-delay 5s\n</code></pre>"},{"location":"configuration/options/clusters/","title":"Multi-cluster options","text":"<p>Multi-cluster options contain the configuration of additional clusters.</p>"},{"location":"configuration/options/clusters/#supported-elements","title":"Supported elements","text":"<p>Every cluster is registered by name and supports the following elements:</p> Element Default Description <code>kubeconfig</code> <code>string</code> Kubeconfig is the path to the referenced file. <code>context</code> <code>string</code> Context is the name of the context to use."},{"location":"configuration/options/clusters/#configuration","title":"Configuration","text":""},{"location":"configuration/options/clusters/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: custom-config\nspec:\n  clusters:\n    # this cluster will use the default (current) context\n    # configured in the kubeconfig file\n    cluster-1:\n      kubeconfig: /path/to/kubeconfig-1\n    # this cluster will use the context named `context-2`\n    # in the kubeconfig file\n    cluster-2:\n      kubeconfig: /path/to/kubeconfig-2\n      context: context-2\n</code></pre>"},{"location":"configuration/options/clusters/#with-flags","title":"With flags","text":"<p>Note</p> <p>The <code>--cluster</code> flag can appear multiple times and is expected to come in the following format:</p> <p><code>--cluster cluster-name=/path/to/kubeconfig[:context-name]</code>.</p> <pre><code>chainsaw test                                               \\\n    --cluster cluster-1=/path/to/kubeconfig-1               \\\n    --cluster cluster-2=/path/to/kubeconfig-2:context-2\n</code></pre>"},{"location":"configuration/options/deletion/","title":"Deletion options","text":"<p>Deletion options determine the configuration used by Chainsaw for deleting resources.</p>"},{"location":"configuration/options/deletion/#supported-elements","title":"Supported elements","text":"Element Default Description <code>propagation</code> <code>Background</code> Propagation decides if a deletion will propagate to the dependents of the object, and how the garbage collector will handle the propagation."},{"location":"configuration/options/deletion/#propagation","title":"Propagation","text":"<p>This element will affect Kubernetes cascading deletion. Supported values are <code>Orphan</code>, <code>Background</code> and <code>Foreground</code>.</p> <p>Tip</p> <p>Setting <code>Orphan</code> is probably never a good idea because it would leak resources in the test cluster. Chainsaw uses <code>Background</code> as its default value which is a reasonable choice.</p> <p>Note that <code>Foreground</code> can be useful to fail when the dependent resources fail to delete.</p>"},{"location":"configuration/options/deletion/#configuration","title":"Configuration","text":""},{"location":"configuration/options/deletion/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  deletion:\n    propagation: Foreground\n</code></pre>"},{"location":"configuration/options/deletion/#with-flags","title":"With flags","text":"<pre><code>chainsaw test --deletion-propagation-policy Foreground\n</code></pre>"},{"location":"configuration/options/discovery/","title":"Discovery options","text":"<p>Discovery options contain the discovery configuration used by Chainsaw when discovering tests in specified folders.</p>"},{"location":"configuration/options/discovery/#supported-elements","title":"Supported elements","text":"Element Default Description <code>testFile</code> <code>chainsaw-test</code> TestFile is the name of the file containing the test to run. If no extension is provided, chainsaw will try with .yaml first and .yml if needed. <code>fullName</code> <code>false</code> FullName makes use of the full test case folder path instead of the folder name. <code>includeTestRegex</code> IncludeTestRegex is used to include tests based on a regular expression. <code>excludeTestRegex</code> ExcludeTestRegex is used to exclude tests based on a regular expression."},{"location":"configuration/options/discovery/#configuration","title":"Configuration","text":""},{"location":"configuration/options/discovery/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  discovery:\n    testFile: chainsaw-test\n    fullName: true\n    includeTestRegex: chainsaw/.*\n    excludeTestRegex: chainsaw/exclude-.*\n</code></pre>"},{"location":"configuration/options/discovery/#with-flags","title":"With flags","text":"<pre><code>chainsaw test                                   \\\n  --test-file chainsaw-test                     \\\n  --full-name                                   \\\n  --include-test-regex 'chainsaw/.*'            \\\n  --exclude-test-regex 'chainsaw/exclude-.*'\n</code></pre>"},{"location":"configuration/options/error/","title":"Error options","text":"<p>Error options contain the global error configuration used by Chainsaw.</p>"},{"location":"configuration/options/error/#supported-elements","title":"Supported elements","text":"Field Default Description <code>catch</code> Catch defines what the tests steps will execute when an error happens. This will be combined with catch handlers defined at the test and step levels."},{"location":"configuration/options/error/#configuration","title":"Configuration","text":""},{"location":"configuration/options/error/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  error:\n    catch:\n    - events: {}\n    - describe:\n        resource: crds\n</code></pre>"},{"location":"configuration/options/error/#with-flags","title":"With flags","text":"<p>Note</p> <p>Error options can't be configured with flags.</p>"},{"location":"configuration/options/execution/","title":"Execution options","text":"<p>Execution options determine how tests are run by Chainsaw.</p>"},{"location":"configuration/options/execution/#supported-elements","title":"Supported elements","text":"Element Default Description <code>failFast</code> <code>false</code> FailFast determines whether the test should stop upon encountering the first failure. <code>parallel</code> <code>auto</code> The maximum number of tests to run at once. <code>repeatCount</code> <code>1</code> RepeatCount indicates how many times the tests should be executed. <code>forceTerminationGracePeriod</code> ForceTerminationGracePeriod forces the termination grace period on pods, statefulsets, daemonsets and deployments."},{"location":"configuration/options/execution/#termination-grace-period","title":"Termination grace period","text":"<p>Some Kubernetes resources can take time before being terminated. For example, deleting a pod can take time if the underlying container doesn't quit quickly enough.</p> <p>Chainsaw can override the grace period for the following resource kinds:</p> <ul> <li>Pod</li> <li>Deployment</li> <li>StatefulSet</li> <li>DaemonSet</li> <li>Job</li> <li>CronJob</li> </ul>"},{"location":"configuration/options/execution/#configuration","title":"Configuration","text":""},{"location":"configuration/options/execution/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  execution:\n    failFast: true\n    parallel: 8\n    repeatCount: 2\n    forceTerminationGracePeriod: 5s\n</code></pre>"},{"location":"configuration/options/execution/#with-flags","title":"With flags","text":"<pre><code>chainsaw test                                   \\\n  --fail-fast                                   \\\n  --parallel 8                                  \\\n  --repeat-count 2                              \\\n  --force-termination-grace-period 5s\n</code></pre>"},{"location":"configuration/options/label-selectors/","title":"Label selectors","text":"<p>Chainsaw can filter the tests to run using label selectors.</p>"},{"location":"configuration/options/label-selectors/#configuration","title":"Configuration","text":""},{"location":"configuration/options/label-selectors/#with-file","title":"With file","text":"<p>Note</p> <p>Label selectors can't be configured with a configuration file.</p>"},{"location":"configuration/options/label-selectors/#with-flags","title":"With flags","text":"<pre><code>chainsaw test --selector foo=bar\n</code></pre>"},{"location":"configuration/options/namespace/","title":"Namespace options","text":"<p>Namespace options contain the configuration used by Chainsaw to allocate a namespace for each test.</p>"},{"location":"configuration/options/namespace/#supported-elements","title":"Supported elements","text":"Element Default Description <code>name</code> Name defines the namespace to use for tests. If not specified, every test will execute in a random ephemeral namespace unless the namespace is overridden in a the test spec. <code>template</code> Template defines a template to create the test namespace."},{"location":"configuration/options/namespace/#configuration","title":"Configuration","text":""},{"location":"configuration/options/namespace/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  namespace:\n    name: foo\n    template:\n      metadata:\n        annotations:\n          from-config-file: hello\n</code></pre>"},{"location":"configuration/options/namespace/#with-flags","title":"With flags","text":"<p>Note</p> <p>The <code>template</code> element can't be configured with flags.</p> <pre><code>chainsaw test --namespace foo\n</code></pre>"},{"location":"configuration/options/no-cluster/","title":"No cluster options","text":"<p>Chainsaw can be run without any connection to a Kubernetes cluster.</p> <p>In this case, Chainsaw will not try to create an ephemeral namespace and all operations requiring a Kubernetes cluster will fail.</p>"},{"location":"configuration/options/no-cluster/#configuration","title":"Configuration","text":""},{"location":"configuration/options/no-cluster/#with-file","title":"With file","text":"<p>Note</p> <p>No cluster options can't be configured with a configuration file.</p>"},{"location":"configuration/options/no-cluster/#with-flags","title":"With flags","text":"<pre><code>chainsaw test --no-cluster\n</code></pre>"},{"location":"configuration/options/pause/","title":"Pause options","text":"<p>Chainsaw can be configured to pause and wait for user input when a failure happens. This is useful when Chainsaw is run locally to allow debugging and troubleshooting failures.</p>"},{"location":"configuration/options/pause/#configuration","title":"Configuration","text":""},{"location":"configuration/options/pause/#with-file","title":"With file","text":"<p>Note</p> <p>Pause options can't be configured with a configuration file.</p>"},{"location":"configuration/options/pause/#with-flags","title":"With flags","text":"<pre><code>chainsaw test --pause-on-failure\n</code></pre>"},{"location":"configuration/options/report/","title":"Reporting options","text":"<p>Reporting options contain the configuration used by Chainsaw for reporting.</p>"},{"location":"configuration/options/report/#supported-elements","title":"Supported elements","text":"Element Default Description <code>format</code> <code>JSON</code> ReportFormat determines test report format (JSON, XML, JUNIT-TEST, JUNIT-STEP, JUNIT-OPERATION). <code>path</code> ReportPath defines the path. <code>name</code> <code>chainsaw-report</code> ReportName defines the name of report to create. It defaults to \"chainsaw-report\"."},{"location":"configuration/options/report/#configuration","title":"Configuration","text":""},{"location":"configuration/options/report/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  report:\n    format: JSON\n    name: chainsaw-report\n    path: /home/chainsaw\n</code></pre>"},{"location":"configuration/options/report/#with-flags","title":"With flags","text":"<p>Note</p> <p>The report path can be specified as either a relative or an absolute path.</p> <pre><code>chainsaw test                             \\\n  --report-format JSON                    \\\n  --report-name chainsaw-report           \\\n  --report-path /path/to/save/report\n</code></pre>"},{"location":"configuration/options/templating/","title":"Templating options","text":"<p>Templating options contain the templating configuration.</p>"},{"location":"configuration/options/templating/#supported-elements","title":"Supported elements","text":"Element Default Description <code>enabled</code> <code>true</code> Enabled determines whether resources should be considered for templating. <p>Tip</p> <p>Templating was disabled by default in <code>v0.1.*</code> but is now enabled by default since <code>v0.2.1</code>.</p>"},{"location":"configuration/options/templating/#configuration","title":"Configuration","text":""},{"location":"configuration/options/templating/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  templating:\n    enabled: false\n</code></pre>"},{"location":"configuration/options/templating/#with-flags","title":"With flags","text":"<pre><code>chainsaw test --template=false\n</code></pre>"},{"location":"configuration/options/timeouts/","title":"Timeouts","text":"<p>Timeouts in Chainsaw are specified per type of operation. This is required because the timeout varies greatly depending on the nature of an operation.</p> <p>For example, applying a manifest in a cluster is expected to execute reasonably fast, while validating a resource can be a much longer operation.</p>"},{"location":"configuration/options/timeouts/#supported-timeouts","title":"Supported timeouts","text":"Element Default Description apply <code>5s</code> Used when Chainsaw applies manifests in a cluster assert <code>30s</code> Used when Chainsaw validates resources in a cluster cleanup <code>30s</code> Used when Chainsaw removes resources created for a test delete <code>15s</code> Used when Chainsaw deletes resources from a cluster error <code>30s</code> Used when Chainsaw validates resources in a cluster exec <code>5s</code> Used when Chainsaw executes arbitrary commands or scripts"},{"location":"configuration/options/timeouts/#configuration","title":"Configuration","text":""},{"location":"configuration/options/timeouts/#with-file","title":"With file","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  timeouts:\n    apply: 45s\n    assert: 20s\n    cleanup: 45s\n    delete: 25s\n    error: 10s\n    exec: 45s\n</code></pre>"},{"location":"configuration/options/timeouts/#with-flags","title":"With flags","text":"<pre><code>chainsaw test               \\\n  --apply-timeout 45s       \\\n  --assert-timeout 45s      \\\n  --cleanup-timeout 45s     \\\n  --delete-timeout 45s      \\\n  --error-timeout 45s       \\\n  --exec-timeout 45s\n</code></pre>"},{"location":"configuration/options/values/","title":"External values","text":"<p>Chainsaw can pass arbitrary values when running tests using the <code>--values</code> flag. Values will be available to tests under the <code>$values</code> binding.</p>"},{"location":"configuration/options/values/#configuration","title":"Configuration","text":""},{"location":"configuration/options/values/#with-file","title":"With file","text":"<p>Note</p> <p>Values can't be configured with a configuration file.</p>"},{"location":"configuration/options/values/#with-flags","title":"With flags","text":"<pre><code>chainsaw test --values ./values.yaml\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>Info</p> <p>Select an item in the navigation menu to browse a specific page.</p>"},{"location":"examples/concurrency/","title":"Concurrency control","text":"<p>By default, Chainsaw will run tests in parallel.</p> <p>The number of concurrent tests can be configured globally using a configuration file or with the <code>--parallel</code> flag.</p> <p>Alternatively, the concurrent nature of a test can be specified at the test level:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # concurrency can be specified per test (`true` or `false`)\n  # default value is `true`\n  concurrent: false\n  # ...\n</code></pre> <p>All non-concurrent tests are executed first, followed by the concurrent tests running in parallel.</p>"},{"location":"examples/crds/","title":"Work with CRDs","text":"<p>New CRDs are not immediately available for use in the Kubernetes API until the Kubernetes API has acknowledged them.</p> <p>If a CRD is being defined inside of a test step, be sure to wait for it to appear.</p> <p>The test below applies a CRD and waits for it to become available:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: apiextensions.k8s.io/v1\n          kind: CustomResourceDefinition\n          metadata:\n            name: issues.example.com\n          spec:\n            group: example.com\n            names:\n              kind: Issue\n              listKind: IssueList\n              plural: issues\n              singular: issue\n            scope: Namespaced\n            versions: ...\n    - assert:\n        resource:\n          apiVersion: apiextensions.k8s.io/v1\n          kind: CustomResourceDefinition\n          metadata:\n            name: issues.example.com\n          status:\n            acceptedNames:\n              kind: Issue\n              listKind: IssueList\n              plural: issues\n              singular: issue\n            storedVersions:\n            - v1alpha1\n</code></pre> <p>The CRD can be used in subsequent steps.</p>"},{"location":"examples/events/","title":"Work with events","text":"<p>Kubernetes events are regular Kubernetes objects and can be asserted on just like any other object:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: Event\n          reason: Started\n          source:\n            component: kubelet\n          involvedObject:\n            apiVersion: v1\n            kind: Pod\n            name: my-pod\n</code></pre>"},{"location":"examples/inline/","title":"Inline resources","text":"<p>When an operation needs to reference a resource, it can do so using a file path or directly specify the resource inline using the <code>resource</code> field.</p> <p>The test below is equivalent to our first test:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n          data:\n            foo: bar\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n          data:\n            foo: bar\n</code></pre>"},{"location":"examples/kube-version/","title":"Check Kubernetes version","text":"<p>The test below fetches the Kubernetes cluster version using the x_k8s_server_version function. It then uses the minor version retrieved to adapt an assertion based on the value in the <code>$minorversion</code> binding.</p> <p>Tip</p> <p>You can implement a ternary operator in JMESPath using an expression like this:</p> <p><code>&lt;condition&gt; &amp;&amp; &lt;value-if-true&gt; || &lt;value-if-false&gt;</code></p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  bindings:\n  - name: version\n    value: (x_k8s_server_version($config))\n  - name: minorversion\n    value: (to_number($version.minor))\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: v1\n          kind: Pod\n          metadata:\n            name: pod01\n          spec:\n            containers:\n            - name: busybox\n              image: busybox:1.35\n    # ...\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: Pod\n          metadata:\n            annotations:\n              # If the minor version of the Kubernetes cluster against\n              # which this is tested is less than 29, the annotation is\n              # expected to have the group 'system:masters' in it.\n              # Otherwise, due to a change in kubeadm, the group should\n              # be 'kubeadm:cluster-admins'.\n              kyverno.io/created-by: (($minorversion &lt; `29` &amp;&amp; '{\"groups\":[\"system:masters\",\"system:authenticated\"],\"username\":\"kubernetes-admin\"}') || '{\"groups\":[\"kubeadm:cluster-admins\",\"system:authenticated\"],\"username\":\"kubernetes-admin\"}')\n            name: pod01\n</code></pre>"},{"location":"examples/label-selectors/","title":"Work with label selectors","text":"<p>Chainsaw can filter the tests to run using label selectors.</p> <p>You can pass label selectors using the <code>--selector</code> flag when invoking the <code>chainsaw test</code> command.</p> <p>Given the test below:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: basic\n  labels:\n    foo: bar\nspec:\n  # ...\n</code></pre> <p>Invoking Chainsaw with the command below will take the test above into account:</p> <pre><code>chainsaw test --selector foo=bar\n</code></pre>"},{"location":"examples/multi-cluster/","title":"Multi-cluster setup","text":"<p>Chainsaw supports registering and using multiple clusters in tests.</p> <p>We can also register clusters dynamically and combine this with cluster selection to achieve scenarios where clusters are dynamically allocated in a test step, used in the following steps, and cleaned up at the end.</p> <p>The following test demonstrates such a scenario by creating a local kind cluster in the first, using it in the second step, and configuring a cleanup script to delete the cluster when the test terminates:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    # create a local cluster\n    - script:\n        timeout: 1m\n        content: |\n          kind create cluster --name dynamic --kubeconfig ./dynamic\n    # register `cleanup` operations to delete the cluster\n    # at the end of the test\n    cleanup:\n    - script:\n        content: |\n          kind delete cluster --name dynamic\n    - script:\n        content: |\n          rm -f ./dynamic\n    # register the `dynamic` cluster in this step\n  - clusters:\n      dynamic:\n        kubeconfig: ./dynamic\n    # and use the `dynamic` cluster for all operations in the step\n    cluster: dynamic\n    try:\n    - apply:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n            namespace: default\n          data:\n            foo: bar\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n            namespace: default\n          data:\n            foo: bar\n</code></pre> <p>Running the test above will produce the following output:</p> <pre><code>    | 10:44:53 | example | @setup   | CREATE    | OK    | v1/Namespace @ chainsaw-useful-seahorse\n    | 10:44:53 | example | step-1   | TRY       | RUN   |\n    | 10:44:53 | example | step-1   | SCRIPT    | RUN   |\n        === COMMAND\n        /bin/sh -c kind create cluster --name dynamic --kubeconfig ./dynamic\n    | 10:45:10 | example | step-1   | SCRIPT    | LOG   |\n        === STDERR\n        Creating cluster \"dynamic\" ...\n         \u2022 Ensuring node image (kindest/node:v1.27.3) \ud83d\uddbc  ...\n         \u2713 Ensuring node image (kindest/node:v1.27.3) \ud83d\uddbc\n         \u2022 Preparing nodes \ud83d\udce6   ...\n         \u2713 Preparing nodes \ud83d\udce6 \n         \u2022 Writing configuration \ud83d\udcdc  ...\n         \u2713 Writing configuration \ud83d\udcdc\n         \u2022 Starting control-plane \ud83d\udd79\ufe0f  ...\n         \u2713 Starting control-plane \ud83d\udd79\ufe0f\n         \u2022 Installing CNI \ud83d\udd0c  ...\n         \u2713 Installing CNI \ud83d\udd0c\n         \u2022 Installing StorageClass \ud83d\udcbe  ...\n         \u2713 Installing StorageClass \ud83d\udcbe\n        Set kubectl context to \"kind-dynamic\"\n        You can now use your cluster with:\n\n        kubectl cluster-info --context kind-dynamic --kubeconfig ./dynamic\n\n        Thanks for using kind! \ud83d\ude0a\n    | 10:45:10 | example | step-1   | SCRIPT    | DONE  |\n    | 10:45:10 | example | step-1   | TRY       | DONE  |\n    | 10:45:10 | example | step-2   | TRY       | RUN   |\n    | 10:45:10 | example | step-2   | APPLY     | RUN   | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | CREATE    | OK    | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | APPLY     | DONE  | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | ASSERT    | RUN   | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | ASSERT    | DONE  | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | TRY       | DONE  |\n    | 10:45:10 | example | step-2   | CLEANUP   | RUN   |\n    | 10:45:10 | example | step-2   | DELETE    | RUN   | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | DELETE    | OK    | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | DELETE    | DONE  | v1/ConfigMap @ default/quick-start\n    | 10:45:10 | example | step-2   | CLEANUP   | DONE  |\n    | 10:45:10 | example | step-1   | CLEANUP   | RUN   |\n    | 10:45:10 | example | step-1   | SCRIPT    | RUN   |\n        === COMMAND\n        /bin/sh -c kind delete cluster --name dynamic\n    | 10:45:10 | example | step-1   | SCRIPT    | LOG   |\n        === STDERR\n        Deleting cluster \"dynamic\" ...\n        Deleted nodes: [\"dynamic-control-plane\"]\n    | 10:45:10 | example | step-1   | SCRIPT    | DONE  |\n    | 10:45:10 | example | step-1   | SCRIPT    | RUN   |\n        === COMMAND\n        /bin/sh -c rm -f ./dynamic\n    | 10:45:10 | example | step-1   | SCRIPT    | DONE  |\n    | 10:45:10 | example | step-1   | CLEANUP   | DONE  |\n    | 10:45:10 | example | @cleanup | DELETE    | RUN   | v1/Namespace @ chainsaw-useful-seahorse\n    | 10:45:11 | example | @cleanup | DELETE    | OK    | v1/Namespace @ chainsaw-useful-seahorse\n    | 10:45:16 | example | @cleanup | DELETE    | DONE  | v1/Namespace @ chainsaw-useful-seahorse\n</code></pre>"},{"location":"examples/negative-testing/","title":"Negative testing","text":"<p>Negative testing is the process of testing cases that are supposed to fail. That is, a test expects errors to happen and if the expected errors don't occur the test must fail.</p> <p>Chainsaw supports negative testing by letting you decide what should be considered an error or not.</p> <p>Tip</p> <p>By default, Chainsaw will consider an operation failed if there was an error executing it (non-zero exit code in scripts and commands, error returned by the API server when calling into Kubernetes, etc...).</p>"},{"location":"examples/negative-testing/#script-case","title":"Script case","text":"<p>The test below expects an error and validates the returned error message:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: kubectl get foo\n        check:\n          ($error != null): true\n          ($stderr): |-\n            error: the server doesn't have a resource type \"foo\"\n</code></pre> <p>If for whatever reason, the <code>kubectl get foo</code> doesn't return an error, or the message received in standard error output is not <code>error: the server doesn't have a resource type \"foo\"</code>, Chainsaw will consider the operation failed.</p> <p>If it returns an error and the expected error message, Chainsaw will consider the operation successful.</p>"},{"location":"examples/negative-testing/#working-with-resources","title":"Working with resources","text":"<p>The test below tries to apply resources in a cluster but expects the operation to fail:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        file: resources.yaml\n        expect:\n          # check that applying the resource failed\n        - check:\n            ($error != null): true\n</code></pre> <p>If applying the resource succeeded, Chainsaw will consider the operation failed.</p> <p>On the other hand, if applying the resource fails, Chainsaw will consider the operation to be successful.</p>"},{"location":"examples/negative-testing/#resource-matching","title":"Resource matching","text":"<p>In the previous example, if the <code>resources.yaml</code> contains multiple resources, but only some of them may be expected to fail.</p> <p>Chainsaw allows matching resources when evaluating checks:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        file: resources.yaml\n        expect:\n          # the check below only applies if the resource being checked\n          # matches the condition defined in the `match` field\n        - match:\n            apiVersion: v1\n            kind: ConfigMap\n            metadata:\n              name: quick-start\n          check:\n            ($error != null): true\n</code></pre> <p>Using the <code>match</code> field, we can easily target failures related to specific resources.</p>"},{"location":"examples/non-resource-assertions/","title":"Non-resource assertions","text":"<p>Under certain circumstances, it makes sense to evaluate assertions that do not depend on resources. For example, when asserting the number of nodes in a cluster is equal to a known value.</p> <p>The test below uses the x_k8s_list function to query the list of nodes in the cluster. It uses the results to compare the number of nodes found with a known number (<code>1</code> in this case).</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          (x_k8s_list($client, 'v1', 'Node')):\n            (length(items)): 1\n</code></pre>"},{"location":"examples/test-output/","title":"Test command output","text":"<p>Chainsaw can be used to easily check terminal output from CLIs and other commands. This is useful in that convoluted bash scripts involving chaining together tools like <code>grep</code> can be avoided or at least minimized to only complex use cases. Output to both stdout and stderr can be checked for a given string or precise contents.</p>"},{"location":"examples/test-output/#checking-output-contains","title":"Checking Output Contains","text":"<p>One basic use case for content checking is that the output simply contains a given string or piece of content. For example, you might want to run automated tests on a CLI binary you build to ensure that a given command produces output that contains some content you specify somewhere in the output. Let's use the following output from the <code>kubectl version</code> command to show these examples.</p> <pre><code>kubectl version\n\nClient Version: v1.28.2\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.27.4+k3s1\n</code></pre> <p>Below is an example that ensures the string '1.28' is found somewhere in that output. So long as the content is present anywhere, the test will succeed. To perform this check, the <code>contains()</code> JMESPath filter is used.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test\nspec:\n  steps:\n  - name: Check kubectl\n    try:\n    - script:\n        content: kubectl version\n        check:\n          # This check ensures that the string '1.28' is found\n          # in stdout or else fails\n          (contains($stdout, '1.28')): true\n</code></pre> <p>Checks for content containing a given value can be negated as well. For example, checking to ensure the output does NOT contain the string '1.25'.</p> <pre><code>- script:\n    content: kubectl version\n    check:\n      # This check ensures that the string '1.25' is NOT found\n      # in stdout or else fails\n      (contains($stdout, '1.25')): false\n</code></pre>"},{"location":"examples/test-output/#checking-output-is-exactly","title":"Checking Output Is Exactly","text":"<p>In addition to checking that CLI/command output contains some contents, you may need to ensure that the contents are exactly as intended. The Chainsaw test below accomplishes this by comparing the entire contents of stdout with those specified in the block scalar. If so much as one character, space, or line break is off, the test will fail. This is useful in that not only can content be checked but the formatting of that content can be ensured it matches a given declaration.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test\nspec:\n  steps:\n  - name: Check kubectl\n    try:\n    - script:\n        content: kubectl version\n        check:\n          # This check ensures the contents of stdout are exactly as shown.\n          # Any deviations will cause a failure.\n          ($stdout): |-\n            Client Version: v1.28.2\n            Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\n            Server Version: v1.27.4+k3s1\n</code></pre>"},{"location":"examples/test-output/#checking-output-in-errors","title":"Checking Output In Errors","text":"<p>In addition to testing that commands succeed and with output in a given shape, it's equally valuable and necessary to perform negative tests; that tests fail and with contents that are as expected. Similarly, those checks can be for output which has some contents as well as output which appears exactly as desired. For example, you may wish to check that running the <code>kubectl foo</code> command not only fails as expected but that the output shown to users contains a certain word or sentence.</p> <pre><code>kubectl foo\n\nerror: unknown command \"foo\" for \"kubectl\"\n\nDid you mean this?\n        top\n</code></pre> <p>Below you can see an example where the command <code>kubectl foo</code> is expected to fail but that the error message returned contains some output, in this case the string 'top'.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test\nspec:\n  steps:\n  - name: Check bad kubectl command\n    try:\n    - script:\n        content: kubectl foo\n        check:\n          # This checks that the result of the content was an error.\n          ($error != null): true\n          # This check below ensures that the string 'top' is found in stderr or else fails\n          (contains($stderr, 'top')): true\n</code></pre> <p>Likewise, this failure output can be checked that it is precise. Note that in the example below, due to the use of a tab character in the output of <code>kubectl foo</code>, the value of the <code>($stderr)</code> field is given as a string to preserve these non-printing characters.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: test\nspec:\n  steps:\n  - name: Check kubectl\n    try:\n    - script:\n        content: kubectl foo\n        check:\n          # This checks that the result of the content was an error.\n          ($error != null): true\n          # This checks that the output is exactly as intended.\n          ($stderr): \"error: unknown command \\\"foo\\\" for \\\"kubectl\\\"\\n\\nDid you mean this?\\n\\ttop\"\n</code></pre>"},{"location":"examples/values/","title":"Pass data to tests","text":"<p>Chainsaw can pass arbitrary values when running tests using the <code>--values</code> flag. Values will be available to tests under the <code>$values</code> binding.</p> <p>This is useful when a test needs to be configured externally.</p>"},{"location":"examples/values/#reference-external-data","title":"Reference external data","text":"<p>The test below expects the <code>$value.foo</code> to be provided when chainsaw is invoked.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          ($values.foo): bar\n</code></pre>"},{"location":"examples/values/#invoking-chainsaw","title":"Invoking Chainsaw","text":""},{"location":"examples/values/#read-values-from-a-file","title":"Read values from a file","text":"<pre><code>chainsaw test --values ./values.yaml\n</code></pre>"},{"location":"examples/values/#read-from-stdin","title":"Read from stdin","text":"<pre><code>echo \"foo: bar\" | chainsaw test --values -\n</code></pre>"},{"location":"examples/values/#use-heredoc","title":"Use heredoc","text":"<pre><code>chainsaw test --values - &lt;&lt;EOF\nfoo: bar\nEOF\n</code></pre>"},{"location":"general/bindings/","title":"Bindings","text":"<p>You can think of bindings as a side context where you can store and retrieve data by name.</p> <p>This is particularly useful when some data is only known at runtime. For example, to pass data from one operation to another, to implement resource templating, to fetch data from an external system, or anything that needs to be computed at runtime.</p>"},{"location":"general/bindings/#syntax","title":"Syntax","text":"<p>The test below illustrates bindings declaration at different levels:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # bindings can be declared at the test level\n  bindings:\n  - name: chainsaw\n    value: chainsaw\n  steps:\n    # bindings can also be declared at the step level\n  - bindings:\n    - name: hello\n      value: hello\n    try:\n    - script:\n        # bindings can also be declared at the operation level\n        bindings:\n        - name: awesome\n          value: awesome\n        env:\n          # combined bindings together using the `join` functions and\n          # assign the result to the GREETINGS environment variable\n        - name: GREETINGS\n          value: (join(' ', [$hello, $chainsaw, 'is', $awesome]))\n        content: echo $GREETINGS\n</code></pre>"},{"location":"general/bindings/#reference","title":"Reference","text":"<p>Browse the reference documentation to see the syntax details and where bindings can be declared.</p>"},{"location":"general/bindings/#inheritance","title":"Inheritance","text":"<p>Bindings can be configured at the test, step or operation level.</p> <p>All bindings configured at a given level are automatically inherited at lower levels.</p>"},{"location":"general/bindings/#immutability","title":"Immutability","text":"<p>Bindings are immutable. This means two bindings can have the same name without overwriting each other.</p> <p>When a binding is registered it potentially hides other bindings with the same name.</p> <p>When this binding goes out of scope, previously registered bindings with the same name become visible again.</p>"},{"location":"general/bindings/#templating","title":"Templating","text":"<p>Both <code>name</code> and <code>value</code> of a binding can use templating.</p>"},{"location":"general/bindings/#built-in-bindings","title":"Built-in bindings","text":"<p>Chainsaw offers some built-in bindings you can directly use in your tests, steps and operations.</p> <p>Browse the built-in bindings list to find available bindings.</p>"},{"location":"general/checks/","title":"Operation checks","text":"<p>Considering an operation's success or failure is not always as simple as checking an error code.</p> <ul> <li>Sometimes an operation can fail but the failure is what you expected, hence the operation should be reported as successful.</li> <li>Sometimes an operation can succeed but the result is not what you expected, in this case, the operation should be reported as a failure.</li> </ul> <p>To support those kinds of use cases, some operations support additional checks to evaluate the operation result against an assertion tree.</p>"},{"location":"general/checks/#input-model","title":"Input model","text":"<p>Different operations have a different model passed through the assertion tree.</p> <p>Please consult the Built-in bindings reference documentation to learn what is available depending on the operation.</p>"},{"location":"general/checks/#expect-vs-check","title":"Expect vs Check","text":"<p>While a simple check is enough to determine the result of a single operation, we needed a more advanced construct to cover <code>apply</code>, <code>create</code>, <code>delete</code>, <code>patch</code> and <code>update</code> operations. Those operations can operate on files containing multiple resources and every resource can lead to a different result and expectation.</p>"},{"location":"general/checks/#check","title":"Check","text":"<p>The example below uses a simple check. The operation is expected to fail (<code>($error != null): true</code>):</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: |\n          exit 1\n        check:\n          # an error is expected, this will:\n          # - succeed if the operation failed\n          # - fail if the operation succeeded\n          ($error != null): true\n</code></pre>"},{"location":"general/checks/#expect","title":"Expect","text":"<p>To support more granular checks we use the <code>expect</code> field that contains an array of Expectations.</p> <p>Every expectation is made of an optional <code>match</code> combined with a <code>check</code> statement.</p> <p>This way it is possible to control the scope of a <code>check</code>:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        file: resources.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n</code></pre> <p>In the test above, only config maps are expected to fail. If the <code>resources.yaml</code> file contains other type of resources they are supposed to be created without error (if an error happens for a non config map resource, the operation will be considered a failure).</p>"},{"location":"general/inheritance/","title":"Inheritance","text":"<p>Chainsaw has a concept of levels and most of the configuration elements and dynamic elements are inherited from one layer to the next in one way or another.</p>"},{"location":"general/inheritance/#levels","title":"Levels","text":"<pre><code>flowchart TD\n    Configuration -. Configuration elements are inherited in tests .-&gt; Test\n    Test -. Test elements are inherited in test steps .-&gt; Step\n    Step -. Step elements are inherited in step operations .-&gt; Operation</code></pre>"},{"location":"general/inheritance/#configuration","title":"Configuration","text":"<p>The first layer comes from the Chainsaw configuration. You can think about this layer as the global scope and a way to configure how Chainsaw will behave globally.</p> <p>Under certain circumstances, lower layers will be allowed to consume and/or override elements from upper layers.</p>"},{"location":"general/inheritance/#test","title":"Test","text":"<p>At the test level, you can override or create new elements. They will only be visible to the test, steps and operations that are part of it.</p> <p>In any case, tests are strongly isolated and have no way to communicate with or depend on other tests.</p>"},{"location":"general/inheritance/#step","title":"Step","text":"<p>Again, at the step level, you can override or create new elements and they will only be visible to the step and operations that are part of it.</p>"},{"location":"general/inheritance/#operation","title":"Operation","text":"<p>At the operation level, you can override or create new elements and use them in the operation itself.</p>"},{"location":"general/inheritance/#immutability","title":"Immutability","text":"<p>Even if elements are inherited, they are immutable.</p> <p>Some elements can be overridden but never overwritten.</p>"},{"location":"general/inheritance/#outputs","title":"Outputs","text":"<p>Inheritance always flows from one level to the next and never propagates back to the upper levels.</p> <p>There's no exception to this rule, but the only case where one operation can communicate with other ones is when using outputs.</p>"},{"location":"general/namespace/","title":"Test namespace","text":"<p>By default, Chainsaw will create an ephemeral namespace with a random name for each test, unless a specific namespace name is provided at the global or test level.</p>"},{"location":"general/namespace/#selection","title":"Selection","text":""},{"location":"general/namespace/#global","title":"Global","text":"<p>One way to control the namespace used to run tests is to specify the name in the Chainsaw configuration Namespace options.</p> <p>If a namespace name is specified at the configuration level Chainsaw will use it to run the tests (unless an individual test overrides the namespace name).</p>"},{"location":"general/namespace/#per-test","title":"Per test","text":"<p>If the test name is specified in a test spec, Chainsaw will use it to run the test regardless of whether a namespace name was configured at the global level.</p>"},{"location":"general/namespace/#random","title":"Random","text":"<p>If no namespace name was specified at the global or test level, Chainsaw will create a random one for the lifetime of the test.</p>"},{"location":"general/namespace/#cleanup","title":"Cleanup","text":"<p>As with any other resource, Chainsaw will clean up the namespace only if the namespace was created by Chainsaw.</p> <p>If the namespace already exists when the test starts, Chainsaw will use it to run the test but won't delete it after the test terminates.</p>"},{"location":"general/namespace/#template","title":"Template","text":"<p>A namespace template can be provided at the global or test level.</p> <p>This is useful if you want to make something specific with the namespace Chainsaw creates (add labels, add annotations, etc...).</p> <p>Tip</p> <p>A namespace template specified at the test level takes precedence over the namespace template specified at the global level.</p>"},{"location":"general/namespace/#namespace-injection","title":"Namespace injection","text":"<p>Because the name of the namespace is only known at runtime, depending on the resource being manipulated, Chainsaw will eventually inject the namespace name, except if:</p> <ul> <li>the resource already has a namespace specified</li> <li>the resource is a clustered resource</li> </ul>"},{"location":"general/namespace/#example","title":"Example","text":"<p>The resource below is a namespaced one and has no namespace specified. Chainsaw will automatically inject the namespace name in it:</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\n  # there is no namespace configured and the resource\n  # is a namespaced one.\n  # Chainsaw will automatically inject the test namespace\ndata:\n  foo: bar\n</code></pre>"},{"location":"general/outputs/","title":"Outputs","text":"<p>Operation outputs can be useful for communicating and reusing computation results across operations.</p> <p>Chainsaw evaluates outputs after an operation has finished executing. The results of output evaluations are registered in the bindings and are made available for the following operations.</p>"},{"location":"general/outputs/#syntax","title":"Syntax","text":""},{"location":"general/outputs/#basic","title":"Basic","text":"<p>The test below illustrates output usage:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  bindings:\n  - name: chainsaw\n    value: chainsaw\n  steps:\n  - bindings:\n    - name: hello\n      value: hello\n    try:\n    - script:\n        bindings:\n        - name: awesome\n          value: awesome\n        env:\n        - name: GREETINGS\n          value: (join(' ', [$hello, $chainsaw, 'is', $awesome]))\n        # output is used to register a new `$OUTPUT` binding\n        outputs:\n        - name: OUTPUT\n          value: ($stdout)\n        content: echo $GREETINGS\n    - script:\n        # output from the previous operation is used\n        # to configure an evironment variable\n        env:\n        - name: INPUT\n          value: ($OUTPUT)\n        content: echo $INPUT\n</code></pre>"},{"location":"general/outputs/#matching","title":"Matching","text":"<p>An output supports an optional <code>match</code> field. The <code>match</code> statement is used to conditionally assign the output binding.</p> <p>The test below illustrates output with matching:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  bindings:\n  - name: chainsaw\n    value: chainsaw\n  steps:\n  - bindings:\n    - name: hello\n      value: hello\n    try:\n    - script:\n        bindings:\n        - name: awesome\n          value: awesome\n        env:\n        - name: GREETINGS\n          value: (join(' ', [$hello, $chainsaw, 'is', $awesome]))\n        # output is used to register a new `$OUTPUT` binding\n        outputs:\n          # by default, the `$OUTPUT` binding is assigned\n          # the content of the standard output\n        - name: OUTPUT\n          value: ($stdout)\n          # if the match statement evaluates to true,\n          # the `$OUTPUT` binding will be set to\n          # 'YES! chainsaw is awesome'\n        - match:\n            ($OUTPUT): hello chainsaw is awesome\n          name: OUTPUT\n          value: YES! chainsaw is awesome\n        content: echo $GREETINGS\n    - script:\n        # output from the previous operation is used\n        # to configure an evironment variable\n        env:\n        - name: INPUT\n          value: ($OUTPUT)\n        content: echo $INPUT\n</code></pre>"},{"location":"general/outputs/#reference","title":"Reference","text":"<p>Browse the reference documentation to see the syntax details and where outputs can be declared.</p>"},{"location":"general/outputs/#templating","title":"Templating","text":"<p>Both <code>name</code> and <code>value</code> of an output can use templating.</p>"},{"location":"general/references/","title":"References","text":"<p>Chainsaw tests often need to reference resources. Including references in tests can be done in multiple ways.</p>"},{"location":"general/references/#inline","title":"Inline","text":"<p>One way to declare a resource is to do it directly inside the test definition:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n          data:\n            foo: bar\n</code></pre> <p>This doesn't encourage file reuse but can be handy, especially when the resource definition is short or when the execution environment doesn't support file system access.</p>"},{"location":"general/references/#file-reference","title":"File reference","text":"<p>Another option is to use the <code>file</code> field. The <code>file</code> can be a specific file, or multiple files declared using a glob pattern:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use a specific file\n        file: my-configmap.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n</code></pre>"},{"location":"general/references/#url-reference","title":"URL reference","text":"<p>A third option is to use a URL. Chainsaw uses https://github.com/hashicorp/go-getter, it will download the content from the remote service and load it in the operation resources:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/step/configmap.yaml\n</code></pre>"},{"location":"general/references/#cardinality","title":"Cardinality","text":"<p>When using file-based references, it is important to note that the referenced file(s) can declare multiple resources. Internally, Chainsaw will duplicate the operation once per resource.</p> <p>This is important to keep this in mind, especially when working with bindings and outputs. Bindings and outputs will be evaluated for every operation instance.</p>"},{"location":"general/templating/","title":"Templating","text":"<p>Chainsaw simplifies dynamic configuration with native templating support.</p> <p>In the past, users have created all sorts of hacks using tools like <code>envsubst</code> for dynamic substitution of env-variables. Those workarounds usually lack flexibility and introduce new problems like hiding the real resources from Chainsaw, preventing it from cleaning resources properly.</p> <p>Templating in Chainsaw solves exactly this kind of problem.</p>"},{"location":"general/templating/#syntax","title":"Syntax","text":"<p>Tip</p> <p>Resource templating is heavily based on bindings and uses JMESPath language.</p>"},{"location":"general/templating/#bindings","title":"Bindings","text":"<p>In the template below, we are using the <code>$namespace</code> binding at two different places, effectively injecting the ephemeral namespace name in the <code>name</code> and the <code>data.foo</code> fields:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - assert:\n      resource:\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: ($namespace)\n        data:\n          foo: ($namespace)\n</code></pre>"},{"location":"general/templating/#jmespath","title":"JMESPath","text":"<p>In the template below, we are using the JMESPath join function to create a unique resource name:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - apply:\n      resource:\n        apiVersion: v1\n        kind: ConfigMap\n        metadata:\n          name: (join('-', [$namespace, 'cm']))\n        data:\n          foo: bar\n</code></pre>"},{"location":"guides/kuttl-migration/","title":"Migration from KUTTL","text":""},{"location":"guides/kuttl-migration/#overview","title":"Overview","text":"<p>The <code>chainsaw migrate kuttl tests</code> and <code>chainsaw migrate kuttl config</code> commands are designed for the migration of KUTTL tests to Chainsaw.</p> <ul> <li> <p><code>chainsaw migrate kuttl config</code></p> <p>migrates a KUTTL <code>TestSuite</code> to the corresponding Chainsaw <code>Configuration</code></p> </li> <li> <p><code>chainsaw migrate kuttl tests</code></p> <p>migrates KUTTL tests to the corresponding Chainsaw <code>Test</code>s</p> </li> </ul> <p>Reference documentation</p> <p>You can view the full command documentation here.</p>"},{"location":"guides/kuttl-migration/#examples","title":"Examples","text":""},{"location":"guides/kuttl-migration/#migrate-tests","title":"Migrate tests","text":"<p>The command below will migrate KUTTL tests to Chainsaw and overwrite original files with converted ones.</p> <pre><code>chainsaw migrate kuttl tests path/to/kuttl/tests --save --cleanup\n</code></pre> <p>This will generate a <code>chainsaw-test.yaml</code> for every KUTTL test discovered.</p>"},{"location":"guides/kuttl-migration/#migrate-configuration","title":"Migrate configuration","text":"<p>The command below will migrate a KUTTL test suite file to the corresponding Chainsaw <code>Configuration</code>.</p> <pre><code>chainsaw migrate kuttl config path/to/kuttl/testsuite --save --cleanup\n</code></pre> <p>This will generate a <code>.chainsaw.yaml</code> configuration file.</p>"},{"location":"guides/lint/","title":"Lint tests","text":""},{"location":"guides/lint/#overview","title":"Overview","text":"<p>Chainsaw comes with a <code>lint</code> command to detect ill-formated tests.</p> <p>Reference documentation</p> <p>You can view the full command documentation here.</p>"},{"location":"guides/lint/#usage","title":"Usage","text":"<p>To build the docs of a test, Chainsaw provides the <code>chainsaw lint test -f path/to/chainsaw-test.yaml</code> command.</p> <pre><code>chainsaw lint test -f - &lt;&lt;EOF\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: assertion-tree\nspec:\n  steps:\n  - try:\n    - assert:\n        file: assert.yaml\nEOF\n</code></pre> <pre><code>Processing input...\nThe document is valid\n</code></pre>"},{"location":"guides/test-docs/","title":"Building test docs","text":""},{"location":"guides/test-docs/#overview","title":"Overview","text":"<p>Chainsaw makes it simple to build the documentation of your tests.</p> <p>As test suites grow, it becomes important to document what a test does and how it is supposed to work.</p> <p>Going through the implementation of a test to understand its purpose is not an efficient strategy.</p> <p>Reference documentation</p> <p>You can view the full command documentation here.</p>"},{"location":"guides/test-docs/#usage","title":"Usage","text":"<p>To build the docs of a test, Chainsaw provides the <code>chainsaw build docs</code> command.</p> <pre><code>chainsaw build docs --test-dir path/to/chainsaw/tests\n</code></pre> <p>This will automatically discover tests and document steps and operations in <code>try</code>, <code>catch</code> and <code>finally</code> statements.</p>"},{"location":"guides/test-docs/#the-description-field","title":"The <code>description</code> field","text":"<p>Additionally, you can set the <code>description</code> field in:</p> <ul> <li><code>TestSpec</code></li> <li><code>TestStepSpec</code></li> <li><code>Operation</code></li> <li><code>Catch</code></li> <li><code>Finally</code></li> </ul> <p>Chainsaw will output them nicely in the built docs.</p>"},{"location":"guides/test-docs/#example","title":"Example","text":"<p>See below for an example test and the corresponding built docs.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: basic\nspec:\n  description: This is a very simple test that creates a configmap and checks the content is as expected.\n  steps:\n  - description: This steps applies the configmap in the cluster and checks the configmap content.\n    try:\n    - description: Create the configmap.\n      apply:\n        file: configmap.yaml\n    - description: Check the configmap content.\n      assert:\n        file: configmap-assert.yaml\n</code></pre>"},{"location":"guides/test-docs/#test-basic","title":"Test: <code>basic</code>","text":"<p>This is a very simple test that creates a configmap and checks the content is as expected.</p>"},{"location":"guides/test-docs/#steps","title":"Steps","text":"# Name Try Catch Finally 1 step-1 2 0 0"},{"location":"guides/test-docs/#step-step-1","title":"Step: <code>step-1</code>","text":"<p>This step applies the configmap in the cluster and checks the configmap content.</p>"},{"location":"guides/test-docs/#try","title":"Try","text":"# Operation Description 1 <code>apply</code> Create the configmap. 2 <code>assert</code> Check the configmap content."},{"location":"operations/","title":"Operations","text":"<p>Chainsaw supports the following operations:</p> <ul> <li>Apply</li> <li>Assert</li> <li>Command</li> <li>Create</li> <li>Delete</li> <li>Error</li> <li>Patch</li> <li>Script</li> <li>Sleep</li> <li>Update</li> </ul>"},{"location":"operations/#helpers","title":"Helpers","text":"<p>Chainsaw also supports kubectl helpers.</p>"},{"location":"operations/#properties","title":"Properties","text":""},{"location":"operations/#action-unicity","title":"Action unicity","text":"<p>Every operation must consist of a single action.</p> <p>While it is syntactically possible to create an operation with multiple actions, Chainsaw will verify and reject tests if operations containing multiple actions are found.</p> <p>The reasoning behind this intentional choice is that it becomes harder to understand in which order actions will be executed when an operation consists of multiple actions. For this reason, operations consisting of multiple actions are not allowed.</p>"},{"location":"operations/#common-fields","title":"Common fields","text":""},{"location":"operations/#continue-on-error","title":"Continue on error","text":"<p>The <code>continueOnError</code> field determines whether a test step should continue executing or not if the operation fails (in any case the test will be marked as failed).</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n      # in case of error the test will be marked as failed\n      # but the step will not stop execution and will\n      # continue executing the following operations\n    - continueOnError: true\n      apply:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: quick-start\n          data:\n            foo: bar\n</code></pre>"},{"location":"operations/#description","title":"Description","text":"<p>All operations support a <code>description</code> field that can be used document your tests.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - description: Waits a couple of seconds\n      sleep:\n        duration: 3s\n</code></pre>"},{"location":"operations/apply/","title":"Apply","text":"<p>The <code>apply</code> operation defines resources that should be applied to a Kubernetes cluster. If the resource does not exist yet it will be created, otherwise, it will be configured to match the provided configuration.</p>"},{"location":"operations/apply/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Apply</code> is documented here.</p>"},{"location":"operations/apply/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/apply/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use a specific file\n        file: my-configmap.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/step/configmap.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: chainsaw-quick-start\n          data:\n            foo: bar\n</code></pre>"},{"location":"operations/apply/#operation-check","title":"Operation check","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        file: my-configmap.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n</code></pre>"},{"location":"operations/assert/","title":"Assert","text":"<p>The <code>assert</code> operation allows you to specify conditions that should hold true for a successful test.</p> <p>For example, after applying resources, you might want to ensure that a particular pod is running or a service is accessible.</p>"},{"location":"operations/assert/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Assert</code> is documented here.</p>"},{"location":"operations/assert/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support  |  Operation checks support"},{"location":"operations/assert/#templating","title":"Templating","text":"<p>When working with <code>assert</code> and <code>error</code> operations, the content is already an assertion tree and therefore mostly represents a logical operation. An exception to this rule is for fields participating in the resource selection process.</p> <p>For this reason, only elements used for looking up the resources from the cluster will be considered for templating. That is, <code>apiVersion</code>, <code>kind</code>, <code>name</code>, <code>namespace</code> and <code>labels</code>.</p>"},{"location":"operations/assert/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        # use a specific file\n        file: ../resources/deployment-assert.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        # use glob pattern\n        file: \"../assertions/*.yaml\"\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/resource/valid.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: Deployment\n          metadata:\n            name: foo\n          spec:\n            (replicas &gt; 3): true\n</code></pre>"},{"location":"operations/command/","title":"Command","text":"<p>The <code>command</code> operation provides a mean to execute a specific command during the test step.</p> <p>Warning</p> <p>Command arguments are not going through shell expansion.</p> <p>It's crucial to consider potential differences in behavior, as Chainsaw may interpret them differently compared to regular shell environments.</p>"},{"location":"operations/command/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Command</code> is documented here.</p>"},{"location":"operations/command/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/command/#kubeconfig","title":"KUBECONFIG","text":"<ul> <li>Unless <code>--no-cluster</code> is specified, Chainsaw always executes commands in the context of a temporary <code>KUBECONFIG</code>, built from the configured target cluster.</li> <li>This specific <code>KUBECONFIG</code> has a single cluster, auth info and context configured (all named <code>chainsaw</code>).</li> </ul>"},{"location":"operations/command/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - command:\n        entrypoint: echo\n        args:\n        - hello chainsaw\n</code></pre>"},{"location":"operations/command/#operation-check","title":"Operation check","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - command:\n        entrypoint: echo\n        args:\n        - hello chainsaw\n        check:\n          # an error is expected, this will:\n          # - succeed if the operation failed\n          # - fail if the operation succeeded\n          ($error != null): true\n</code></pre>"},{"location":"operations/create/","title":"Create","text":"<p>The <code>create</code> operation defines resources that should be created in a Kubernetes cluster.</p> <p>If the resource to be created already exists in the cluster, the step will fail.</p>"},{"location":"operations/create/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Create</code> is documented here.</p>"},{"location":"operations/create/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/create/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        # use a specific file\n        file: my-configmap.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/resource/valid.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: chainsaw-quick-start\n          data:\n            foo: bar\n</code></pre>"},{"location":"operations/create/#operation-check","title":"Operation check","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - create:\n        file: my-configmap.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n</code></pre>"},{"location":"operations/delete/","title":"Delete","text":"<p>The <code>delete</code> operation defines resources that should be deleted from a Kubernetes cluster.</p> <p>Warning</p> <p>The propagation policy is forced to <code>Background</code> because some types default to <code>Orphan</code> (this is the case for unmanaged jobs for example) and we don't want to let dangling pods run in the cluster after cleanup.</p>"},{"location":"operations/delete/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Delete</code> is documented here.</p>"},{"location":"operations/delete/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/delete/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n          namespace: default\n          name: my-test-pod\n</code></pre>"},{"location":"operations/delete/#operation-check","title":"Operation check","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - delete:\n        ref:\n          apiVersion: v1\n          kind: Pod\n          namespace: default\n          name: my-test-pod\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: Pod\n            metadata:\n              namespace: default\n              name: my-test-pod\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n</code></pre>"},{"location":"operations/error/","title":"Error","text":"<p>The <code>error</code> operation lets you define a set of expected errors for a test step. If any of these errors occur during the test, they are treated as expected outcomes. However, if an error that's not on this list occurs, it will be treated as a test failure.</p>"},{"location":"operations/error/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Error</code> is documented here.</p>"},{"location":"operations/error/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support  |  Operation checks support"},{"location":"operations/error/#templating","title":"Templating","text":"<p>When working with <code>assert</code> and <code>error</code> operations, the content is already an assertion tree and therefore mostly represents a logical operation. An exception to this rule is for fields participating in the resource selection process.</p> <p>For this reason, only elements used for looking up the resources from the cluster will be considered for templating. That is, <code>apiVersion</code>, <code>kind</code>, <code>name</code>, <code>namespace</code> and <code>labels</code>.</p>"},{"location":"operations/error/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - error:\n        # use a specific file\n        file: ../resources/deployment-error.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - error:\n        # use glob pattern\n        file: \"../errors/*.yaml\"\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - error:\n        # use an URL\n        file: https://raw.githubusercontent.com/user/repo/branch/path/to/deployment-error.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - error:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: Deployment\n          metadata:\n            name: foo\n          spec:\n            (replicas &gt; 3): true\n</code></pre>"},{"location":"operations/patch/","title":"Patch","text":"<p>The <code>patch</code> operation defines resources that should be modified in a Kubernetes cluster.</p> <p>If the resource to be modified does not exist in the cluster, the step will fail.</p>"},{"location":"operations/patch/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Patch</code> is documented here.</p>"},{"location":"operations/patch/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/patch/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        # use a specific file\n        file: my-configmap.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/resource/valid.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: chainsaw-quick-start\n          data:\n            foo: bar\n</code></pre>"},{"location":"operations/patch/#operation-check","title":"Operation check","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - patch:\n        file: my-configmap.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n</code></pre>"},{"location":"operations/script/","title":"Script","text":"<p>The <code>script</code> operation provides a means to run a script during the test step.</p>"},{"location":"operations/script/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Script</code> is documented here.</p>"},{"location":"operations/script/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/script/#kubeconfig","title":"KUBECONFIG","text":"<ul> <li>Unless <code>--no-cluster</code> is specified, Chainsaw always executes commands in the context of a temporary <code>KUBECONFIG</code>, built from the configured target cluster.</li> <li>This specific <code>KUBECONFIG</code> has a single cluster, auth info and context configured (all named <code>chainsaw</code>).</li> </ul>"},{"location":"operations/script/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: |\n          echo \"hello chainsaw\"\n</code></pre>"},{"location":"operations/script/#operation-check","title":"Operation check","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: |\n          echo \"hello chainsaw\"\n        check:\n          # an error is expected, this will:\n          # - succeed if the operation failed\n          # - fail if the operation succeeded\n          ($error != null): true\n</code></pre>"},{"location":"operations/sleep/","title":"Sleep","text":"<p>The <code>sleep</code> operation provides a means to sleep for a configured duration.</p>"},{"location":"operations/sleep/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Sleep</code> is documented here.</p>"},{"location":"operations/sleep/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/sleep/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - sleep:\n        duration: 30s\n</code></pre>"},{"location":"operations/update/","title":"Update","text":"<p>The <code>update</code> operation defines resources that should be updated in a Kubernetes cluster.</p> <p>If the resource to be updated doesn't exist in the cluster, the step will fail.</p>"},{"location":"operations/update/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Update</code> is documented here.</p>"},{"location":"operations/update/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/update/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - update:\n        # use a specific file\n        file: my-configmap.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example-multi\nspec:\n  steps:\n  - try:\n    - update:\n        # use glob pattern\n        file: \"configs/*.yaml\"\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - update:\n        # use an URL\n        file: https://raw.githubusercontent.com/kyverno/chainsaw/main/testdata/resource/valid.yaml\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - update:\n        # specify resource inline\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: chainsaw-quick-start\n          data:\n            foo: bar\n</code></pre>"},{"location":"operations/update/#operation-check","title":"Operation check","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - update:\n        file: my-configmap.yaml\n        expect:\n        - match:\n            # this check applies only if the match\n            # statement below evaluates to `true`\n            apiVersion: v1\n            kind: ConfigMap\n          check:\n            # an error is expected, this will:\n            # - succeed if the operation failed\n            # - fail if the operation succeeded\n            ($error != null): true\n</code></pre>"},{"location":"operations/helpers/","title":"Kubectl helpers","text":"<p>Kubectl helpers are declarative versions of <code>kubectl</code> imperative commands.</p>"},{"location":"operations/helpers/#implementation","title":"Implementation","text":"<p>Helpers are implemented as syntactic sugars.</p> <p>They are translated into their corresponding <code>kubectl</code> commands and executed as such.</p>"},{"location":"operations/helpers/#kubeconfig","title":"KUBECONFIG","text":"<ul> <li>Chainsaw always executes commands in the context of a temporary <code>KUBECONFIG</code>, built from the configured target cluster.</li> <li>This specific <code>KUBECONFIG</code> has a single cluster, auth info and context configured (all named <code>chainsaw</code>).</li> </ul>"},{"location":"operations/helpers/#helpers","title":"Helpers","text":"<ul> <li>Describe</li> <li>Events</li> <li>Get</li> <li>Pods logs</li> <li>Wait</li> </ul>"},{"location":"operations/helpers/describe/","title":"Describe","text":"<p>Show details of a specific resource or group of resources.</p>"},{"location":"operations/helpers/describe/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Describe</code> resource is documented here.</p>"},{"location":"operations/helpers/describe/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/helpers/describe/#clustered-resources","title":"Clustered resources","text":"<p>When used with a clustered resource, the <code>namespace</code> is ignored and is not added to the corresponding <code>kubectl</code> command.</p>"},{"location":"operations/helpers/describe/#test-namespace","title":"Test namespace","text":"<p>When used with a namespaced resource, Chainsaw will default the scope to the ephemeral test namespace.</p>"},{"location":"operations/helpers/describe/#all-namespaces","title":"All namespaces","text":"<p>When used with a namespaced resource, it is possible to consider all namespaces in the cluster by setting <code>namespace: '*'</code>.</p>"},{"location":"operations/helpers/describe/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        # describe all pods in the test namespace\n        apiVersion: v1\n        kind: Pod\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        apiVersion: v1\n        kind: Pod\n        # describe pods that have a name starting with the provided `my-pod`\n        name: my-pod\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        apiVersion: v1\n        kind: Pod\n        # describe pods in the namespace `foo`\n        namespace: foo\n</code></pre>"},{"location":"operations/helpers/describe/#label-selector","title":"Label selector","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        apiVersion: v1\n        kind: Pod\n        # describe pods using a label selector query\n        selector: app=my-app\n</code></pre>"},{"location":"operations/helpers/describe/#show-events","title":"Show events","text":"<p>Tip</p> <p>By default, <code>showEvents</code>is <code>true</code>.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - describe:\n        apiVersion: v1\n        kind: Pod\n        showEvents: false\n</code></pre>"},{"location":"operations/helpers/events/","title":"Events","text":"<p>Display one or many events.</p>"},{"location":"operations/helpers/events/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Events</code> resource is documented here.</p>"},{"location":"operations/helpers/events/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/helpers/events/#test-namespace","title":"Test namespace","text":"<p>When used with a namespaced resource, Chainsaw will default the scope to the ephemeral test namespace.</p>"},{"location":"operations/helpers/events/#all-namespaces","title":"All namespaces","text":"<p>When used with a namespaced resource, it is possible to consider all namespaces in the cluster by setting <code>namespace: '*'</code>.</p>"},{"location":"operations/helpers/events/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # get all events in the test namespace\n    - events: {}\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # get events in a specific namespace\n    - events:\n        namespace: foo\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # get event by name\n    - events:\n        name: my-event\n</code></pre>"},{"location":"operations/helpers/events/#label-selector","title":"Label selector","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - events:\n        # get events using a label selector query\n        selector: app=my-app\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - events:\n        # get events using a label selector query\n        selector: app=my-app\n        namespace: foo\n</code></pre>"},{"location":"operations/helpers/events/#format","title":"Format","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - events:\n        format: json\n</code></pre>"},{"location":"operations/helpers/get/","title":"Get","text":"<p>Display one or many resources.</p>"},{"location":"operations/helpers/get/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Get</code> resource is documented here.</p>"},{"location":"operations/helpers/get/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/helpers/get/#clustered-resources","title":"Clustered resources","text":"<p>When used with a clustered resource, the <code>namespace</code> is ignored and is not added to the corresponding <code>kubectl</code> command.</p>"},{"location":"operations/helpers/get/#test-namespace","title":"Test namespace","text":"<p>When used with a namespaced resource, Chainsaw will default the scope to the ephemeral test namespace.</p>"},{"location":"operations/helpers/get/#all-namespaces","title":"All namespaces","text":"<p>When used with a namespaced resource, it is possible to consider all namespaces in the cluster by setting <code>namespace: '*'</code>.</p>"},{"location":"operations/helpers/get/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # get all pods in the test namespace\n    - get:\n        apiVersion: v1\n        kind: Pod\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - get:\n        apiVersion: v1\n        kind: Pod\n        # get pods that have a name starting with the provided `my-pod`\n        name: my-pod\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - get:\n        apiVersion: v1\n        kind: Pod\n        # get pods in the namespace `foo`\n        namespace: foo\n</code></pre>"},{"location":"operations/helpers/get/#label-selector","title":"Label selector","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - get:\n        apiVersion: v1\n        kind: Pod\n        # get pods using a label selector query\n        selector: app=my-app\n</code></pre>"},{"location":"operations/helpers/get/#format","title":"Format","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - get:\n        apiVersion: v1\n        kind: Pod\n        format: json\n</code></pre>"},{"location":"operations/helpers/logs/","title":"Pods logs","text":"<p>Print the logs for a container in a pod or specified resource.</p>"},{"location":"operations/helpers/logs/#configuration","title":"Configuration","text":"<p>The full structure of the <code>PodLogs</code> resource is documented here.</p>"},{"location":"operations/helpers/logs/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/helpers/logs/#test-namespace","title":"Test namespace","text":"<p>Chainsaw will default the scope to the ephemeral test namespace.</p>"},{"location":"operations/helpers/logs/#all-namespaces","title":"All namespaces","text":"<p>It is possible to consider all namespaces in the cluster by setting <code>namespace: '*'</code>.</p>"},{"location":"operations/helpers/logs/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    # all pods in the test namespace\n    - podLogs: {}\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        # pods that have a name starting with the provided `my-pod`\n        name: my-pod\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        # pods in the namespace `foo`\n        namespace: foo\n</code></pre>"},{"location":"operations/helpers/logs/#label-selector","title":"Label selector","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        # match pods using a label selector query\n        selector: app=my-app\n</code></pre>"},{"location":"operations/helpers/logs/#tail","title":"Tail","text":"<p>Tip</p> <p>By default, <code>tail</code> will be <code>10</code> when a label selector is used, and <code>all</code> if a pod <code>name</code> is specified.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        tail: 30\n</code></pre>"},{"location":"operations/helpers/logs/#container","title":"Container","text":"<p>Tip</p> <p>By default logs from all containers will be fetched.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try: ...\n    catch:\n    - podLogs:\n        container: nginx\n</code></pre>"},{"location":"operations/helpers/wait/","title":"Wait","text":"<p>Wait for a specific condition on one or many resources.</p>"},{"location":"operations/helpers/wait/#configuration","title":"Configuration","text":"<p>The full structure of the <code>Wait</code> resource is documented here.</p>"},{"location":"operations/helpers/wait/#features","title":"Features","text":"Supported features Bindings support Outputs support Templating support Operation checks support"},{"location":"operations/helpers/wait/#clustered-resources","title":"Clustered resources","text":"<p>When used with a clustered resource, the <code>namespace</code> is ignored and is not added to the corresponding <code>kubectl</code> command.</p>"},{"location":"operations/helpers/wait/#all-resources","title":"All resources","text":"<p>If you don't specify a <code>name</code> or a <code>selector</code>, the <code>wait</code> operation will consider <code>all</code> resources.</p>"},{"location":"operations/helpers/wait/#test-namespace","title":"Test namespace","text":"<p>When used with a namespaced resource, Chainsaw will default the scope to the ephemeral test namespace.</p>"},{"location":"operations/helpers/wait/#all-namespaces","title":"All namespaces","text":"<p>When used with a namespaced resource, it is possible to consider all namespaces in the cluster by setting <code>namespace: '*'</code>.</p>"},{"location":"operations/helpers/wait/#examples","title":"Examples","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    # wait all pods are ready in the test namespace\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        timeout: 1m\n        for:\n          condition:\n            name: Ready\n            value: 'true'\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        # wait a specific pod is ready in the test namespace\n        name: my-pod\n        timeout: 1m\n        for:\n          condition:\n            name: Ready\n            value: 'true'\n---\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        # wait all pods are ready in the namespace `foo`\n        namespace: foo\n        timeout: 1m\n        for:\n          condition:\n            name: Ready\n            value: 'true'\n</code></pre>"},{"location":"operations/helpers/wait/#label-selector","title":"Label selector","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        # match pods using a label selector query\n        selector: app=foo\n        timeout: 1m\n        for:\n          condition:\n            name: Ready\n            value: 'true'\n</code></pre>"},{"location":"operations/helpers/wait/#deletion","title":"Deletion","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        timeout: 1m\n        for:\n          # wait for deletion\n          deletion: {}\n</code></pre>"},{"location":"operations/helpers/wait/#format","title":"Format","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - wait:\n        apiVersion: v1\n        kind: Pod\n        format: json\n</code></pre>"},{"location":"quick-start/","title":"Getting started","text":"<p>Chainsaw is a tool primarily developed to run end-to-end tests in Kubernetes clusters.</p> <p>It is meant to test Kubernetes operators work as expected by running a sequence of steps and asserting various conditions.</p>"},{"location":"quick-start/#why-we-made-it","title":"Why we made it?","text":"<p>While developing Kyverno we need to run end-to-end tests to make sure our admission controller works as expected.</p> <p>A typical Kyverno end-to-end test</p> <p>Kyverno can validate, mutate and generate resources based on policies installed in a cluster and a typical test is:</p> <ol> <li>Create a policy</li> <li>Create a resource</li> <li>Check that Kyverno acted as expected</li> <li>Cleanup and move to the next test</li> </ol>"},{"location":"quick-start/#how-to-use-it","title":"How to use it?","text":"<p>Chainsaw is built with CI tools in mind - you only really need to download and execute it in your build script.</p> <p>However, installing it on your local machine is entirely possible.</p>"},{"location":"quick-start/assertion-trees/","title":"Use assertions","text":"<p>Chainsaw allows declaring complex assertions with a simple and no-code approach, allowing assertions based on comparisons beyond simple equality, working with arrays, and other scenarios that could not be achieved before.</p> <p>Tip</p> <p>Under the hood, Chainsaw uses kyverno-json assertion trees. Refer to the assertion trees documentation for more details on the supported syntax.</p>"},{"location":"quick-start/assertion-trees/#basic-assertion","title":"Basic assertion","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: apps/v1\n          kind: Deployment\n          metadata:\n            name: coredns\n            namespace: kube-system\n          spec:\n            replicas: 2\n</code></pre> <p>When asking Chainsaw to execute the assertion above, it will look for a deployment named <code>coredns</code> in the <code>kube-system</code> namespace and will compare the existing resource with the (partial) resource definition contained in the assertion.</p> <p>In this specific case, if the field <code>spec.replicas</code> is set to 2 in the existing resource, the assertion will be considered valid. If it is not equal to 2 the assertion will be considered failed.</p> <p>This is the most basic assertion Chainsaw can evaluate.</p>"},{"location":"quick-start/assertion-trees/#slightly-less-basic-assertion","title":"Slightly less basic assertion","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: apps/v1\n          kind: Deployment\n          metadata:\n            labels:\n              k8s-app: kube-dns\n            namespace: kube-system\n          spec:\n            replicas: 2\n</code></pre> <p>This time we are not providing a resource name.</p> <p>Chainsaw will look up all deployments with the <code>k8s-app: kube-dns</code> label in the <code>kube-system</code> namespace. The assertion will be considered valid if at least one deployment matches the (partial) resource definition contained in the assertion. If none match, the assertion will be considered failed.</p> <p>Apart from the resource lookup process being a little bit more interesting, this kind of assertion is essentially the same as the previous one. Chainsaw is basically making a decision by comparing an actual and expected resource.</p>"},{"location":"quick-start/assertion-trees/#beyond-simple-equality","title":"Beyond simple equality","text":"<p>The assertion below will check that the number of replicas for a deployment is greater than 1 AND less than 4.</p> <p>Chainsaw doesn't need to know the exact expected number of replicas. The <code>(replicas &gt; 1 &amp;&amp; replicas &lt; 4)</code> expression will be evaluated until the result is <code>true</code> or the operation timeout expires (making the assertion fail).</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: apps/v1\n          kind: Deployment\n          metadata:\n            name: coredns\n            namespace: kube-system\n          spec:\n            (replicas &gt; `1` &amp;&amp; replicas &lt; `4`): true\n</code></pre> <p>Tip</p> <p>To indicate that a key or value in the YAML document is an expression, simply place the element between parenthesis:</p> <ul> <li><code>this is an expression</code> -&gt; interpreted as a <code>string</code></li> <li><code>(this is an expression)</code> -&gt; interpreted as a JMESPath expression</li> </ul>"},{"location":"quick-start/assertion-trees/#working-with-arrays","title":"Working with arrays","text":"<p>Chainsaw query language makes it easy to assert on arrays. You can filter and transform arrays to select what you want to assert.</p>"},{"location":"quick-start/assertion-trees/#filtering","title":"Filtering","text":"<p>In the example below we are creating a resource, then we assert that a condition with <code>type == 'Ready'</code> exists and has a field matching <code>status: 'True'</code>:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          spec:\n            storage:\n              secret:\n                name: minio\n                type: s3\n            ...\n    - assert:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          status:\n            # filter conditions array to keep elements where `type == 'Ready'`\n            # and assert there's a single element matching the filter\n            # and that this element status is `True`\n            (conditions[?type == 'Ready']):\n            - status: 'True'\n</code></pre>"},{"location":"quick-start/assertion-trees/#iterating","title":"Iterating","text":"<p>Being able to filter arrays allows selecting the elements to be processed.</p> <p>On top of that, Chainsaw allows iterating over array elements to validate each item separately.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: apps/v1\n          kind: Deployment\n          metadata:\n            labels:\n              k8s-app: kube-dns\n            namespace: kube-system\n          spec:\n            template:\n              spec:\n                # the `~` modifier tells Chainsaw to iterate over the array elements\n                ~.(containers):\n                  securityContext: {}\n</code></pre> <p>This assertion uses the <code>~</code> modifier and Chainsaw will evaluate descendants once per element in the array.</p>"},{"location":"quick-start/assertion-trees/#comprehensive-reporting","title":"Comprehensive reporting","text":"<p>Chainsaw offers detailed resource diffs upon assertion failures.</p> <p>In the example below, the assertion failure message (<code>metadata.annotations.foo: Invalid value: \"null\": Expected value: \"bar\"</code>) is augmented with a resource diff.</p> <p>It provides a clear view of discrepancies between expected and actual resources and gives more context around the specific failure (we can easily identify the owner of the offending pod for example).</p> <pre><code>| 09:55:50 | deployment | step-1   | ASSERT    | RUN   | v1/Pod @ chainsaw-rare-liger/*\n| 09:56:20 | deployment | step-1   | ASSERT    | ERROR | v1/Pod @ chainsaw-rare-liger/*\n    === ERROR\n    ---------------------------------------------------\n    v1/Pod/chainsaw-rare-liger/example-5477b4ff8c-tnhd9\n    ---------------------------------------------------\n    * metadata.annotations.foo: Invalid value: \"null\": Expected value: \"bar\"\n\n    --- expected\n    +++ actual\n    @@ -1,10 +1,16 @@\n      apiVersion: v1\n      kind: Pod\n      metadata:\n    -  annotations:\n    -    foo: bar\n        labels:\n          app: nginx\n    +  name: example-5477b4ff8c-tnhd9\n        namespace: chainsaw-rare-liger\n    +  ownerReferences:\n    +  - apiVersion: apps/v1\n    +    blockOwnerDeletion: true\n    +    controller: true\n    +    kind: ReplicaSet\n    +    name: example-5477b4ff8c\n    +    uid: 118abe16-ec42-4894-83db-64479c4aac6f\n      spec: {}\n| 09:56:20 | deployment | step-1   | TRY       | DONE  |\n</code></pre>"},{"location":"quick-start/assertion-trees/#next-step","title":"Next step","text":"<p>To continue our exploration of the main Chainsaw features, let's look at bindings and resource templating next.</p>"},{"location":"quick-start/bindings/","title":"Use bindings","text":"<p>You can think of bindings as a side context where you can store and retrieve data based on keys.</p> <p>This is particularly useful when some data is only known at runtime. For example, to pass data from one operation to another, to implement resource templating, to fetch data from an external system, etc.</p> <p>Chainsaw offers some built-in bindings you can directly use in your tests but you can also create your own bindings if needed.</p>"},{"location":"quick-start/bindings/#inheritance","title":"Inheritance","text":"<p>Bindings can be configured at the test, step or operation level.</p> <p>All bindings configured at a given level are automatically inherited in child levels.</p> <p>JMESPath</p> <p>Chainsaw uses the JMESPath language, and bindings are implemented using lexical scoping.</p>"},{"location":"quick-start/bindings/#immutability","title":"Immutability","text":"<p>Bindings are immutable. This means two bindings can have the same name without overwriting each other.</p> <p>When a binding is registered it potentially hides other bindings with the same name.</p> <p>When this binding goes out of scope, previously registered bindings with the same name become visible again.</p>"},{"location":"quick-start/bindings/#built-in-bindings","title":"Built-in bindings","text":"<p>The <code>$namespace</code> binding is a good example of a built-in binding provided by Chainsaw. It contains the name of the ephemeral namespace used to execute a test (by default Chainsaw will create an ephemeral namespace for each test).</p> <p>In the operation below, we are assigning the value of the <code>$namespace</code> binding to an environment variable, and <code>echo</code> it in a script:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        env:\n          # assign the value of the `$namespace` binding\n          # to the environment variable `FOO`\n        - name: FOO\n          value: ($namespace)\n        content: echo $FOO\n</code></pre>"},{"location":"quick-start/bindings/#custom-bindings","title":"Custom bindings","text":"<p>On top of built-in bindings, you can also create your own ones, combine bindings together, call JMESPath functions using bindings as arguments, etc.</p> <p>In the test below we create custom bindings at different levels in the test, combine them by calling the <code>join</code> function, assign the result to an environment variable, and <code>echo</code> it in a script:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # bindings can be declared at the test level\n  bindings:\n  - name: chainsaw\n    value: chainsaw\n  steps:\n    # bindings can also be declared at the step level\n  - bindings:\n    - name: hello\n      value: hello\n    try:\n    - script:\n        # bindings can also be declared at the operation level\n        bindings:\n        - name: awesome\n          value: awesome\n        env:\n          # combined bindings together using the `join` functions and\n          # assign the result to the GREETINGS environment variable\n        - name: GREETINGS\n          value: (join(' ', [$hello, $chainsaw, 'is', $awesome]))\n        content: echo $GREETINGS\n</code></pre>"},{"location":"quick-start/bindings/#next-step","title":"Next step","text":"<p>Let's see how bindings can be useful with resource templating.</p>"},{"location":"quick-start/cleanup/","title":"Control your cleanup","text":"<p>Unless configured differently, by default Chainsaw will automatically remove the resources it created after a test finishes.</p> <p>Cleanup happens in reverse order of creation (created last, cleaned up first). This is important, especially when the controller being tested makes use of <code>finalizers</code>.</p> <p>Overriding cleanup timeout</p> <p>Note that Chainsaw performs a blocking deletion, that is, it will wait until the resource is not present anymore in the cluster before proceeding with the next resource cleanup.</p>"},{"location":"quick-start/cleanup/#timeout","title":"Timeout","text":"<p>A global cleanup timeout can be defined at the configuration level or using command line flags.</p> <p>It can also be overridden on a per-test or per-step basis but not at the operation level.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  timeouts:\n    # cleanup timeout at the test level\n    cleanup: 30s\n  steps:\n  - timeouts:\n      # cleanup timeout at the step level\n      cleanup: 2m\n    try: ...\n</code></pre>"},{"location":"quick-start/cleanup/#automatic-cleanup","title":"Automatic cleanup","text":"<p>After a test, every resource created by Chainsaw will be automatically deleted. This applies to <code>create</code> and <code>apply</code> operations.</p> <p>In the logs below we can see Chainsaw deletes the previously created resource:</p> <pre><code>    | 15:21:29 | quick-start | @setup   | CREATE    | OK    | v1/Namespace @ chainsaw-cute-cod\n    | 15:21:29 | quick-start | step-1   | TRY       | RUN   |\n    | 15:21:29 | quick-start | step-1   | APPLY     | RUN   | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | CREATE    | OK    | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | APPLY     | DONE  | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | ASSERT    | RUN   | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | ASSERT    | DONE  | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | TRY       | DONE  |\n    === step cleanup process start ===\n    | 15:21:29 | quick-start | step-1   | CLEANUP   | RUN   |\n    | 15:21:29 | quick-start | step-1   | DELETE    | RUN   | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | DELETE    | OK    | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | DELETE    | DONE  | v1/ConfigMap @ chainsaw-cute-cod/chainsaw-quick-start\n    | 15:21:29 | quick-start | step-1   | CLEANUP   | DONE  |\n    === step cleanup process end ===\n    === test cleanup process start ===\n    | 15:21:29 | quick-start | @cleanup | DELETE    | RUN   | v1/Namespace @ chainsaw-cute-cod\n    | 15:21:29 | quick-start | @cleanup | DELETE    | OK    | v1/Namespace @ chainsaw-cute-cod\n    | 15:21:34 | quick-start | @cleanup | DELETE    | DONE  | v1/Namespace @ chainsaw-cute-cod\n    === test cleanup process end ===\n</code></pre>"},{"location":"quick-start/cleanup/#manual-cleanup","title":"Manual cleanup","text":"<p>Under certain circumstances, automatic cleanup is not enough and we want to execute custom operations.</p> <p>Chainsaw allows registering cleanup operations that will be run after automatic cleanup. Custom cleanup operations live at the test step level:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n    # this step will create a local cluster\n  - try:\n    - script:\n        timeout: 1m\n        content: |\n          kind create cluster --name dynamic --kubeconfig ./dynamic\n    # at cleanup time, we want to delete the local cluster we created\n    # and remove the associated kubeconfig\n    cleanup:\n    - script:\n        content: |\n          kind delete cluster --name dynamic\n    - script:\n        content: |\n          rm -f ./dynamic\n</code></pre>"},{"location":"quick-start/cleanup/#next-step","title":"Next step","text":"<p>At this point, we covered the main Chainsaw features.</p> <p>Look at the next steps section to find out what to do next.</p>"},{"location":"quick-start/completion/","title":"Shell Completion","text":"<p>Chainsaw provides shell completion support for Bash, Zsh, Fish, and PowerShell. Once set up, you can use the  key to auto-complete chainsaw commands, flags, and even some arguments, which significantly improves the command-line experience."},{"location":"quick-start/completion/#generating-completion-scripts","title":"Generating Completion Scripts","text":"<p>You can generate shell completion scripts using the <code>chainsaw completion</code> command:</p> <pre><code># For Bash\nchainsaw completion bash\n\n# For Zsh\nchainsaw completion zsh\n\n# For Fish\nchainsaw completion fish\n\n# For PowerShell\nchainsaw completion powershell\n</code></pre>"},{"location":"quick-start/completion/#setting-up-completion","title":"Setting Up Completion","text":""},{"location":"quick-start/completion/#bash","title":"Bash","text":"<p>To enable completion in your current Bash session:</p> <pre><code>source &lt;(chainsaw completion bash)\n</code></pre> <p>To enable completion for all sessions, add the above line to your <code>~/.bashrc</code> file:</p> <pre><code>echo 'source &lt;(chainsaw completion bash)' &gt;&gt; ~/.bashrc\n</code></pre> <p>Alternatively, you can save the completion script to the bash-completion directory:</p> <pre><code># On Linux\nchainsaw completion bash &gt; /etc/bash_completion.d/chainsaw\n\n# On macOS with Homebrew\nchainsaw completion bash &gt; $(brew --prefix)/etc/bash_completion.d/chainsaw\n</code></pre>"},{"location":"quick-start/completion/#zsh","title":"Zsh","text":"<p>To enable completion in your current Zsh session:</p> <pre><code>source &lt;(chainsaw completion zsh)\n</code></pre> <p>To enable completion for all sessions, add the above line to your <code>~/.zshrc</code> file:</p> <pre><code>echo 'source &lt;(chainsaw completion zsh)' &gt;&gt; ~/.zshrc\n</code></pre> <p>Alternatively, you can save the completion script to a directory in your <code>$fpath</code>:</p> <pre><code># Create a directory for completions if it doesn't exist\nmkdir -p ~/.zsh/completion\n# Generate and save the completion script\nchainsaw completion zsh &gt; ~/.zsh/completion/_chainsaw\n\n# Make sure the directory is in your fpath by adding to ~/.zshrc:\necho 'fpath=(~/.zsh/completion $fpath)' &gt;&gt; ~/.zshrc\necho 'autoload -U compinit; compinit' &gt;&gt; ~/.zshrc\n</code></pre>"},{"location":"quick-start/completion/#fish","title":"Fish","text":"<p>To enable completion in Fish:</p> <pre><code>chainsaw completion fish &gt; ~/.config/fish/completions/chainsaw.fish\n</code></pre>"},{"location":"quick-start/completion/#powershell","title":"PowerShell","text":"<p>To enable completion in PowerShell:</p> <pre><code>chainsaw completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To make it persistent, add the above line to your PowerShell profile:</p> <pre><code># Find the profile path\necho $PROFILE\n\n# Add the completion command to your profile\nchainsaw completion powershell | Out-String | Out-File -Append $PROFILE\n</code></pre>"},{"location":"quick-start/completion/#testing-completion","title":"Testing Completion","text":"<p>After setting up completion, you can test it by typing <code>chainsaw</code> followed by a space and pressing . This should show available subcommands. You can also try typing partial commands like <code>chainsaw te</code> and then pressing , which should complete to <code>chainsaw test</code>."},{"location":"quick-start/completion/#detailed-reference","title":"Detailed Reference","text":"<p>For more detailed information about each completion command, see the reference documentation:</p> <ul> <li>Bash Completion</li> <li>Fish Completion</li> <li>PowerShell Completion</li> <li>Zsh Completion</li> </ul>"},{"location":"quick-start/first-test/","title":"Create a test","text":"<p>To create a Chainsaw test all you need to do is to create one (or more) YAML file(s).</p> <p>The recommended approach is to create one folder per test, with a <code>chainsaw-test.yaml</code> file containing one (or more) test definition(s). The test definition can reference other files in the same folder or anywhere else on the file system as needed.</p> <p>Tip</p> <p>While chainsaw supports other syntaxes, we strongly recommend the explicit approach.</p>"},{"location":"quick-start/first-test/#what-is-a-test","title":"What is a test?","text":"<p>To put it simply, a test can be represented as an ordered sequence of test steps.</p> <p>In turn, a test step can be represented as an ordered sequence of operations.</p> <p>When one of the operations fails the test is considered failed.</p> <p>If all operations succeed the test is considered successful.</p>"},{"location":"quick-start/first-test/#lets-write-our-first-test","title":"Let's write our first test","text":"<p>For this quick start, we will create a (very simple) <code>Test</code> with one step and two operations:</p> <ol> <li>Create a <code>ConfigMap</code> from a manifest</li> <li>Verify the <code>ConfigMap</code> was created and contains the expected data</li> </ol> <p>Follow the instructions below to create the folder and files defining our first test.</p>"},{"location":"quick-start/first-test/#create-a-test-folder","title":"Create a test folder","text":"<pre><code># create test folder\nmkdir chainsaw-quick-start\n\n# enter test folder\ncd chainsaw-quick-start\n</code></pre>"},{"location":"quick-start/first-test/#create-a-configmap-manifest","title":"Create a <code>ConfigMap</code> manifest","text":"<pre><code># create a ConfigMap\ncat &gt; configmap.yaml &lt;&lt; EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\ndata:\n  foo: bar\nEOF\n</code></pre>"},{"location":"quick-start/first-test/#create-a-test-manifest","title":"Create a test manifest","text":"<p>By default, Chainsaw will look for a file named <code>chainsaw-test.yaml</code> in every folder.</p> <pre><code># create test file\ncat &gt; chainsaw-test.yaml &lt;&lt; EOF\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: quick-start\nspec:\n  steps:\n  - try:\n    # first operation: create the config map\n    - apply:\n        # file is relative to the test folder\n        file: configmap.yaml\n    # second operation: verify the config map exists and contains the expected data\n    - assert:\n        # file is relative to the test folder\n        file: configmap.yaml\nEOF\n</code></pre>"},{"location":"quick-start/first-test/#next-step","title":"Next step","text":"<p>Now we have created our first test, you can continue to the next section to execute it.</p>"},{"location":"quick-start/install/","title":"Installation","text":"<p>You can install the pre-compiled binary (in several ways), compile from sources, or run with Docker.</p> <p>We also provide a GitHub action to easily install Chainsaw in your workflows.</p>"},{"location":"quick-start/install/#install-the-pre-compiled-binary","title":"Install the pre-compiled binary","text":""},{"location":"quick-start/install/#homebrew-tap","title":"Homebrew tap","text":"<p>add tap:</p> <pre><code>brew tap kyverno/chainsaw https://github.com/kyverno/chainsaw\n</code></pre> <p>install chainsaw:</p> <pre><code>brew install kyverno/chainsaw/chainsaw\n</code></pre> <p>Don't forget to specify the tap name</p> <p>Homebrew core already has a tool named <code>chainsaw</code>.</p> <p>Be sure that you specify the tap name when installing to install the right tool.</p>"},{"location":"quick-start/install/#manually","title":"Manually","text":"<p>Download the pre-compiled binaries for your system from the releases page and copy them to the desired location.</p>"},{"location":"quick-start/install/#install-using-go-install","title":"Install using <code>go install</code>","text":"<p>You can install with <code>go install</code> with:</p> <pre><code>go install github.com/kyverno/chainsaw@latest\n</code></pre>"},{"location":"quick-start/install/#run-with-docker","title":"Run with Docker","text":"<p>Chainsaw is also available as a Docker image which you can pull and run:</p> <pre><code>docker pull ghcr.io/kyverno/chainsaw:&lt;version&gt;\n</code></pre> <p>Warning</p> <p>Since Chainsaw relies on files for its operation (like test definitions), you will need to bind mount the necessary directories when running it via Docker.</p> <pre><code>docker run --rm                             \\\n    -v ./testdata/e2e/:/chainsaw/           \\\n    -v ${HOME}/.kube/:/etc/kubeconfig/      \\\n    -e KUBECONFIG=/etc/kubeconfig/config    \\\n    --network=host                          \\\n    ghcr.io/kyverno/chainsaw:&lt;version&gt;      \\\n    test /chainsaw --config /chainsaw/config.yaml\n</code></pre>"},{"location":"quick-start/install/#compile-from-sources","title":"Compile from sources","text":"<p>clone:</p> <pre><code>git clone https://github.com/kyverno/chainsaw.git\n</code></pre> <p>build the binaries:</p> <pre><code>cd chainsaw\ngo mod tidy\nmake build\n</code></pre> <p>verify it works:</p> <pre><code>./chainsaw version\n</code></pre>"},{"location":"quick-start/install/#install-using-nix-package","title":"Install using Nix Package","text":"<p>To install <code>kyverno-chainsaw</code>, refer to the documentation.</p>"},{"location":"quick-start/install/#on-nixos","title":"On NixOS","text":"<pre><code>nix-env -iA nixos.kyverno-chainsaw\n</code></pre>"},{"location":"quick-start/install/#on-non-nixos","title":"On Non-NixOS","text":"<pre><code>nix-env -iA nixpkgs.kyverno-chainsaw\n</code></pre> <p>Warning</p> <p>Using nix-env permanently modifies a local profile of installed packages. This must be updated and maintained by the user in the same way as with a traditional package manager, foregoing many of the benefits that make Nix uniquely powerful. Using nix-shell or a NixOS configuration is recommended instead. </p>"},{"location":"quick-start/install/#using-nixos-configuration","title":"Using NixOS Configuration","text":"<p>Add the following Nix code to your NixOS Configuration, usually located in <code>/etc/nixos/configuration.nix</code> :</p> <pre><code>environment.systemPackages = [\n  pkgs.kyverno-chainsaw\n];\n</code></pre>"},{"location":"quick-start/install/#using-nix-shell","title":"Using nix-shell","text":"<p>A nix-shell will temporarily modify your <code>$PATH</code> environment variable. This can be used to try a piece of software before deciding to permanently install it. Use the following command to install <code>kyverno-chainsaw</code> :</p> <pre><code>nix-shell -p kyverno-chainsaw\n</code></pre>"},{"location":"quick-start/install/#github-action","title":"GitHub action","text":"<p>A GitHub action is available to install Chainsaw in your workflows. See the GitHub action dedicated documentation.</p>"},{"location":"quick-start/next-steps/","title":"Next steps","text":"<p>We covered the main features of Chainsaw in this Getting started sections.</p> <p>While this should help you understand Chainsaw better, there are a lot of other things Chainsaw can do for you.</p> <p>Tip</p> <p>If there's anything you would like to be improved, please reach out, we will be happy to discuss and improve as much as we can.</p> <p>To continue exploring the capabilities of Chainsaw:</p> <ul> <li>Look at the Chainsaw Configuration options</li> <li>Read the documentation dedicated to Test</li> <li>Read the documentation dedicated to Operations</li> <li>Consult the Reference documentation</li> <li>Browse our Examples and Guides</li> <li>Engage with our Community and start contributing</li> </ul>"},{"location":"quick-start/operation-outputs/","title":"Use operation outputs","text":"<p>Operation outputs can be useful for communicating and reusing computation results across operations.</p>"},{"location":"quick-start/operation-outputs/#lifetime-of-outputs","title":"Lifetime of outputs","text":"<p>Once an output has been added to the bindings context, this binding will be available to all following operations in the same step.</p> <p>Currently, outputs do not cross the step boundaries.</p>"},{"location":"quick-start/operation-outputs/#matching","title":"Matching","text":"<p>An output supports an optional <code>match</code> field. The <code>match</code> is used to conditionally create a binding.</p> <p>In the case of applying a file, for example, the file may contain multiple resources. The <code>match</code> can be used to select the resource to use for creating the binding.</p>"},{"location":"quick-start/operation-outputs/#load-an-existing-resource","title":"Load an existing resource","text":"<p>The example below invokes a <code>kubectl</code> command to get a configmap from the cluster in json format.</p> <p>The json output is then parsed and added to the <code>$cm</code> binding and the next operation performs an assertion on it by reading the binding instead of querying the cluster.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - script:\n        content: kubectl get cm quick-start -n $NAMESPACE -o json\n        outputs:\n          # parse stdout json output and bind the result to `$cm`\n        - name: cm\n          value: (json_parse($stdout))\n    - assert:\n        resource:\n          ($cm):\n            metadata:\n              (uid != null): true\n</code></pre>"},{"location":"quick-start/operation-outputs/#match-a-resource","title":"Match a resource","text":"<p>The example below applies resources from a file.</p> <p>When the resource being applied is a configmap, we bind the resource to an output to print its UID in the next operation.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        file: ./resources.yaml\n        outputs:\n          # match the configmap resource and bind it to `$cm`\n        - match:\n            apiVersion: v1\n            kind: ConfigMap\n          name: cm\n          value: (@)\n    - script:\n        env:\n        - name: UID\n          value: ($cm.metadata.uid)\n        content: echo $UID\n</code></pre>"},{"location":"quick-start/operation-outputs/#next-step","title":"Next step","text":"<p>In the next section, we will look at the three main elements of a test step, the <code>try</code>, <code>catch</code> and <code>finally</code> blocks.</p>"},{"location":"quick-start/resource-templating/","title":"Use resource templating","text":"<p>Chainsaw simplifies dynamic resource configuration with native resource templating support.</p> <p>Sometimes things we need to create resources or assertions are only known at runtime.</p> <p>In the past, users have created all sorts of hacks using tools like <code>envsubst</code> for dynamic substitution of env-variables. Those workarounds usually lack flexibility and introduce new problems like hiding the real resources from Chainsaw, preventing it from cleaning resources properly.</p> <p>Tip</p> <p>Resource templating is heavily based on bindings and uses JMESPath language.</p>"},{"location":"quick-start/resource-templating/#leverage-bindings","title":"Leverage bindings","text":"<p>In the template below, we are using the <code>$namespace</code> binding at two different places, effectively injecting the ephemeral namespace name in the <code>name</code> and the <code>data.foo</code> fields:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - assert:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: ($namespace)\n          data:\n            foo: ($namespace)\n</code></pre>"},{"location":"quick-start/resource-templating/#leverage-jmespath","title":"Leverage JMESPath","text":"<p>In the template below, we are using the JMESPath join function to create a unique resource name:</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: v1\n          kind: ConfigMap\n          metadata:\n            name: (join('-', [$namespace, 'cm']))\n          data:\n            foo: bar\n</code></pre>"},{"location":"quick-start/resource-templating/#next-step","title":"Next step","text":"<p>Combining bindings and templates with operation outputs allows even more flexibility to pass arbitrary data from one operation to another.</p>"},{"location":"quick-start/resources/","title":"Additional resources","text":"<p>Resources, blog posts and videos talking about Chainsaw:</p> <ul> <li>Kyverno Chainsaw - The ultimate end-to-end testing tool!</li> <li>Kyverno Chainsaw - Exploring the Power of Assertion Trees!</li> <li>Nirmata Office Hours for Kyverno- Episode 9- Demonstrate Kyverno Chainsaw</li> <li>Kubebuilder Community Meeting - February 1, 2024</li> <li>Kyverno Chainsaw 0.1.4 - Awesome new features!</li> <li>Mastering Kubernetes Testing with Kyverno Chainsaw!</li> </ul>"},{"location":"quick-start/resources/#chainsaw-video-review","title":"Chainsaw video review","text":"<p>If you haven't watched the video below yet, we strongly recommend watching it to discover Chainsaw!</p>"},{"location":"quick-start/run-tests/","title":"Run tests","text":"<p>After installing chainsaw and writing tests, the next natural step is to run Chainsaw to execute the tests.</p>"},{"location":"quick-start/run-tests/#create-a-local-cluster","title":"Create a local cluster","text":"<p>To use Chainsaw you will need a Kubernetes cluster, Chainsaw won't create one for you.</p> <p>Not a cluster management tool</p> <p>We consider this is not the responsibility of Chainsaw to manage clusters. There are plenty of solutions to create and manage local clusters that will do that better than Chainsaw.</p> <p>The command below will create a local cluster using kind. Use the tool of your choice or directly jump to the next section if you already have a <code>KUBECONFIG</code> configured and pointing to a valid cluster.</p> <pre><code># create cluster\nkind create cluster --image \"kindest/node:v1.29.4\"\n</code></pre>"},{"location":"quick-start/run-tests/#run-chainsaw","title":"Run Chainsaw","text":"<p>Now you can run the <code>chainsaw test</code> command.</p> <pre><code>&gt; chainsaw test\n\nVersion: (devel)\nLoading default configuration...\n- Using test file: chainsaw-test.yaml\n- TestDirs [.]\n- SkipDelete false\n- FailFast false\n- ReportFormat ''\n- ReportName ''\n- Namespace ''\n- FullName false\n- IncludeTestRegex ''\n- ExcludeTestRegex ''\n- ApplyTimeout 5s\n- AssertTimeout 30s\n- CleanupTimeout 30s\n- DeleteTimeout 15s\n- ErrorTimeout 30s\n- ExecTimeout 5s\nLoading tests...\n- quick-start (.)\nRunning tests...\n=== RUN   chainsaw\n=== PAUSE chainsaw\n=== CONT  chainsaw\n=== RUN   chainsaw/quick-start\n=== PAUSE chainsaw/quick-start\n=== CONT  chainsaw/quick-start\n    | 10:44:26 | quick-start | @setup   | CREATE    | OK    | v1/Namespace @ chainsaw-immense-jay\n    | 10:44:26 | quick-start | step-1   | TRY       | RUN   |\n    | 10:44:26 | quick-start | step-1   | APPLY     | RUN   | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | CREATE    | OK    | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | APPLY     | DONE  | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | ASSERT    | RUN   | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | ASSERT    | DONE  | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | step-1   | TRY       | DONE  |\n    | 10:44:26 | quick-start | @cleanup | DELETE    | RUN   | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | @cleanup | DELETE    | OK    | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | @cleanup | DELETE    | DONE  | v1/ConfigMap @ chainsaw-immense-jay/chainsaw-quick-start\n    | 10:44:26 | quick-start | @cleanup | DELETE    | RUN   | v1/Namespace @ chainsaw-immense-jay\n    | 10:44:26 | quick-start | @cleanup | DELETE    | OK    | v1/Namespace @ chainsaw-immense-jay\n    | 10:44:31 | quick-start | @cleanup | DELETE    | DONE  | v1/Namespace @ chainsaw-immense-jay\n--- PASS: chainsaw (0.00s)\n    --- PASS: chainsaw/quick-start (5.25s)\nPASS\nTests Summary...\n- Passed  tests 1\n- Failed  tests 0\n- Skipped tests 0\nDone.\n</code></pre> <p>Tip</p> <p>Chainsaw expects a path to the test folder and will discover tests by analyzing files recursively. When no path is provided Chainsaw will use the current path by default (<code>.</code>).</p>"},{"location":"quick-start/run-tests/#next-step","title":"Next step","text":"<p>The test above demonstrates the most basic usage of Chainsaw. In the next sections, we will look at the main features that make Chainsaw a very unique tool.</p>"},{"location":"quick-start/timeouts/","title":"Control your timeouts","text":"<p>Timeouts in Chainsaw are specified per type of operation. This is handy because the timeout varies greatly depending on the nature of an operation.</p> <p>For example, applying a manifest in a cluster is expected to be reasonably fast, while validating a resource can be a long operation.</p>"},{"location":"quick-start/timeouts/#inheritance","title":"Inheritance","text":"<p>Timeouts can be configured globally and at the test, step or individual operation level.</p> <p>All timeouts configured at a given level are automatically inherited in child levels. When looking up a timeout, the most specific one takes precedence over the others.</p> <p>Info</p> <p>To learn more about timeouts and how to configure global values, see the timeouts configuration page.</p>"},{"location":"quick-start/timeouts/#at-the-test-level","title":"At the test level","text":"<p>When a timeout is configured at the test level it will apply to all operations and steps in the test, unless overridden at a more specific level.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # timeouts configured at the test level will apply to all operations and steps\n  # unless overriden at the step level and/or individual operation level\n  timeouts:\n    apply: 5s\n    assert: 1m\n    # ...\n  steps:\n  - try:\n    - apply:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          spec:\n            storage:\n              secret:\n                name: minio\n                type: s3\n            # ...\n    - assert:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          status:\n            (conditions[?type == 'Ready']):\n            - status: 'True'\n</code></pre>"},{"location":"quick-start/timeouts/#at-the-step-level","title":"At the step level","text":"<p>When a timeout is configured at the step level it will apply to all operations in the step, unless overridden at a more specific level.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n    # timeouts configured at the step level will apply to all operations\n    # in the step unless overriden at the individual operation level\n  - timeouts:\n      apply: 5s\n      # ...\n    try:\n    - apply:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          spec:\n            storage:\n              secret:\n                name: minio\n                type: s3\n            # ...\n    # timeouts configured at the step level will apply to all operations\n    # in the step unless overriden at the individual operation level\n  - timeouts:\n      assert: 1m\n      # ...\n    try:\n    - assert:\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          status:\n            (conditions[?type == 'Ready']):\n            - status: 'True'\n</code></pre>"},{"location":"quick-start/timeouts/#at-the-operation-level","title":"At the operation level","text":"<p>When a timeout is configured at the operation level, it takes precedence over all timeouts configured at upper levels.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # timeout configured at the operation level takes precedence\n        # over timeouts configured at upper levels\n        timeout: 5s\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          spec:\n            storage:\n              secret:\n                name: minio\n                type: s3\n            # ...\n    - assert:\n        # timeout configured at the operation level takes precedence\n        # over timeouts configured at upper levels\n        timeout: 1m\n        resource:\n          apiVersion: tempo.grafana.com/v1alpha1\n          kind: TempoStack\n          metadata:\n            name: simplest\n          status:\n            (conditions[?type == 'Ready']):\n            - status: 'True'\n</code></pre>"},{"location":"quick-start/timeouts/#next-step","title":"Next step","text":"<p>In the next section, we will see how Chainsaw manages cleanup.</p>"},{"location":"quick-start/try-catch/","title":"Use try, catch and finally","text":"<p>A test step is made of 3 main blocks used to determine the actions Chainsaw will perform when executing the step, depending on operations outcome.</p> <ul> <li>The try block (required)</li> <li>The catch block (optional)</li> <li>The finally block (optional)</li> </ul> <p>Operations defined in the <code>try</code> block are executed first, then:</p> <ul> <li>If an operation fails to execute, Chainsaw won't execute the remaining operations and will execute all operations defined in the <code>catch</code> block instead (if any).</li> <li>If all operations succeed, Chainsaw will NOT execute operations defined in the <code>catch</code> block (if any).</li> <li>Regardless of the step outcome (success or failure), Chainsaw will execute all operations defined in the <code>finally</code> block (if any).</li> </ul> <p>Note</p> <p>Note that all operations coming from the <code>catch</code> or <code>finally</code> blocks are executed. If one operation fails, Chainsaw will mark the test as failed and continue executing with the next operation.</p>"},{"location":"quick-start/try-catch/#cleanup","title":"Cleanup","text":"<p>At the end of a test, Chainsaw automatically cleans up the resources created during the test (cleanup is done in the opposite order of creation).</p> <p>All operations from the <code>catch</code> and <code>finally</code> blocks are executed before the cleanup process kicks in. This order allows analyzing the resources that potentially caused the step failure before they are deleted.</p>"},{"location":"quick-start/try-catch/#catch","title":"Catch","text":"<p>Operations in a <code>catch</code> block are executed only when the step is considered failed.</p> <p>This is particularly useful to collect additional information to help understand what caused the failure.</p> <p>In the example below, the test contains a <code>catch</code> block to collect events in the cluster when an operation fails in the step.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n  - try:\n    - apply:\n        # ...\n    - assert:\n        # ...\n    # collect events in the `catch` block\n    # will be executed only if an operation failed\n    catch:\n    - events: {}\n</code></pre>"},{"location":"quick-start/try-catch/#finally","title":"Finally","text":"<p>Operations in a <code>finally</code> block will always execute regardless of the success or failure of the test step.</p> <p>This is particularly useful to perform manual cleanup.</p> <p>In the example below we create a local cluster in a script operation. The cluster deletion script is added to the <code>finally</code> block, guaranteeing the cluster will be deleted regardless of the test outcome.</p> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n    # create a local cluster\n  - try:\n    - script:\n        timeout: 1m\n        content: |\n          kind create cluster --name dynamic --kubeconfig ./dynamic\n    - apply:\n        # ...\n    - assert:\n        # ...\n    # add cluster deletion script in the `finally` block\n    # to guarantee the cluster will be deleted after the test\n    finally:\n    - script:\n        content: |\n          kind delete cluster --name dynamic\n    - script:\n        content: |\n          rm -f ./dynamic\n</code></pre>"},{"location":"quick-start/try-catch/#next-step","title":"Next step","text":"<p>Every operation in a test must be executed in a timely fashion. In the next section, we will see how you can control your timeouts.</p>"},{"location":"reference/","title":"Reference documentation","text":"<p>Info</p> <p>Select an item in the navigation menu to browse a specific page.</p>"},{"location":"reference/builtins/","title":"Built-in bindings","text":"<p>Chainsaw provides built-in bindings listed below.</p>"},{"location":"reference/builtins/#common","title":"Common","text":"Name Purpose Type <code>$values</code> Values provided when invoking chainsaw with <code>--values</code> flag <code>any</code> <code>$namespace</code> Name of the current test namespace <code>string</code> <code>$client</code> Kubernetes client chainsaw is connected to (if not running with <code>--no-cluster</code>) <code>object</code> <code>$config</code> Kubernetes client config chainsaw is connected to (if not running with <code>--no-cluster</code>) <code>object</code>"},{"location":"reference/builtins/#in-tests","title":"In tests","text":"Name Purpose Type <code>$test.id</code> Current test id <code>int</code> <code>$test.metadata</code> Current test metadata metav1.ObjectMeta <p>Note</p> <ul> <li><code>$test.id</code> starts at 1 for the first test</li> </ul>"},{"location":"reference/builtins/#in-steps","title":"In steps","text":"Name Purpose Type <code>$step.id</code> Current step id <code>int</code> <p>Note</p> <ul> <li><code>$step.id</code> starts at 1 for the first step</li> </ul>"},{"location":"reference/builtins/#in-operations","title":"In operations","text":"Name Purpose Type <code>$operation.id</code> Current operation id <code>int</code> <code>$operation.resourceId</code> Current resource id <code>int</code> <p>Note</p> <ul> <li><code>$operation.id</code> starts at 1 for the first operation</li> <li><code>$operation.resourceId</code> maps to the resource id (starting at 1) in case the operation loads a file that contains multiple resources (the same operation is repeated once per resource)</li> </ul>"},{"location":"reference/builtins/#in-checks-and-outputs","title":"In checks and outputs","text":"Name Purpose Type <code>@</code> The state of the resource (if any) at the end of the operation <code>any</code> <code>$error</code> The error message (if any) at the end of the operation <code>string</code> <code>$stdout</code> The content of the standard console output (if any) at the end of the operation <code>string</code> <code>$stderr</code> The content of the standard console error output (if any) at the end of the operation <code>string</code> <p>Note</p> <ul> <li><code>$stdout</code> and <code>$stderr</code> are only available in <code>script</code> and <code>command</code> operations</li> </ul>"},{"location":"reference/json-schemas/","title":"JSON schemas","text":"<p>JSON schemas for Chainsaw are available:</p> <ul> <li>Configuration (v1alpha1)</li> <li>Configuration (v1alpha2)</li> <li>Test (v1alpha1)</li> </ul> <p>They can be used to enable validation and autocompletion in your IDE.</p>"},{"location":"reference/json-schemas/#vs-code","title":"VS code","text":"<p>In VS code, simply add a comment on top of your YAML resources.</p>"},{"location":"reference/json-schemas/#test","title":"Test","text":"<pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: basic\nspec:\n  steps:\n  - try:\n    - apply:\n        file: configmap.yaml\n    - assert:\n        file: configmap-assert.yaml\n</code></pre>"},{"location":"reference/json-schemas/#configuration","title":"Configuration","text":"<pre><code># yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/configuration-chainsaw-v1alpha2.json\napiVersion: chainsaw.kyverno.io/v1alpha2\nkind: Configuration\nmetadata:\n  name: example\nspec:\n  timeouts:\n    apply: 45s\n    assert: 20s\n    cleanup: 45s\n    delete: 25s\n    error: 10s\n    exec: 45s\n  cleanup:\n    skipDelete: false\n  execution:\n    failFast: true\n    parallel: 4\n</code></pre>"},{"location":"reference/json-schemas/#exporting-schemas","title":"Exporting schemas","text":"<p>Chainsaw can also export JSON schemas locally if you don't want to reference them from GitHub:</p> <pre><code>chainsaw export schemas &lt;local path&gt;\n</code></pre> <p>See chainsaw export schemas command documentation for more details.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/","title":"chainsaw (v1alpha1)","text":"<p>Package v1alpha1 contains API Schema definitions for the v1alpha1 API group.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#resource-types","title":"Resource Types","text":"<ul> <li>Configuration</li> <li>StepTemplate</li> <li>Test</li> </ul>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Configuration","title":"Configuration","text":"<p>Configuration is the resource that contains the configuration used to run tests.</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>chainsaw.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>Configuration</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> <p>Standard object's metadata.</p> <code>spec</code> <code>ConfigurationSpec</code> <p>Configuration spec.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-StepTemplate","title":"StepTemplate","text":"<p>StepTemplate is the resource that contains a step definition.</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>chainsaw.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>StepTemplate</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> <p>Standard object's metadata.</p> <code>spec</code> <code>StepTemplateSpec</code> <p>Test step spec.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Test","title":"Test","text":"<p>Test is the resource that contains a test definition.</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>chainsaw.kyverno.io/v1alpha1</code> <code>kind</code> <code>string</code> <code>Test</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> <p>Standard object's metadata.</p> <code>spec</code> <code>TestSpec</code> <p>Test spec.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionBindings","title":"ActionBindings","text":"<p>Appears in:</p> <ul> <li>Apply</li> <li>Assert</li> <li>Command</li> <li>Create</li> <li>Delete</li> <li>Error</li> <li>Patch</li> <li>Script</li> <li>Update</li> </ul> <p>ActionBindings contains bindings options for an action.</p> Field Type Required Inline Description <code>bindings</code> <code>[]Binding</code> <p>Bindings defines additional binding key/values.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionCheck","title":"ActionCheck","text":"<p>Appears in:</p> <ul> <li>Command</li> <li>Script</li> </ul> <p>ActionCheck contains check for an action.</p> Field Type Required Inline Description <code>check</code> <code>policy/v1alpha1.AssertionTree</code> <p>Check is an assertion tree to validate the operation outcome.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionCheckRef","title":"ActionCheckRef","text":"<p>Appears in:</p> <ul> <li>Assert</li> <li>Error</li> </ul> <p>ActionCheckRef contains check reference options for an action.</p> Field Type Required Inline Description <code>FileRef</code> <code>FileRef</code> No description provided. <code>resource</code> <code>Projection</code> <p>Check provides a check used in assertions.</p> <code>template</code> <code>bool</code> <p>Template determines whether resources should be considered for templating.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionClusters","title":"ActionClusters","text":"<p>Appears in:</p> <ul> <li>Apply</li> <li>Assert</li> <li>Command</li> <li>Create</li> <li>Delete</li> <li>Describe</li> <li>Error</li> <li>Events</li> <li>Get</li> <li>Patch</li> <li>PodLogs</li> <li>Proxy</li> <li>Script</li> <li>Update</li> <li>Wait</li> </ul> <p>ActionClusters contains clusters options for an action.</p> Field Type Required Inline Description <code>cluster</code> <code>string</code> <p>Cluster defines the target cluster (will be inherited if not specified).</p> <code>clusters</code> <code>Clusters</code> <p>Clusters holds a registry to clusters to support multi-cluster tests.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionDryRun","title":"ActionDryRun","text":"<p>Appears in:</p> <ul> <li>Apply</li> <li>Create</li> <li>Patch</li> <li>Update</li> </ul> <p>ActionDryRun contains dry run options for an action.</p> Field Type Required Inline Description <code>dryRun</code> <code>bool</code> <p>DryRun determines whether the file should be applied in dry run mode.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionEnv","title":"ActionEnv","text":"<p>Appears in:</p> <ul> <li>Command</li> <li>Script</li> </ul> <p>ActionEnv contains environment options for an action.</p> Field Type Required Inline Description <code>env</code> <code>[]Binding</code> <p>Env defines additional environment variables.</p> <code>skipLogOutput</code> <code>bool</code> <p>SkipLogOutput removes the output from the command. Useful for sensitive logs or to reduce noise.</p> <code>skipCommandOutput</code> <code>bool</code> <p>SkipCommandOutput removes the command from the output logs.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionExpectations","title":"ActionExpectations","text":"<p>Appears in:</p> <ul> <li>Apply</li> <li>Create</li> <li>Delete</li> <li>Patch</li> <li>Update</li> </ul> <p>ActionExpectations contains expectations for an action.</p> Field Type Required Inline Description <code>expect</code> <code>[]Expectation</code> <p>Expect defines a list of matched checks to validate the operation outcome.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionFormat","title":"ActionFormat","text":"<p>Appears in:</p> <ul> <li>Events</li> <li>Get</li> <li>Wait</li> </ul> <p>ActionFormat contains format for an action.</p> Field Type Required Inline Description <code>format</code> <code>Format</code> <p>Format determines the output format (json or yaml).</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionObject","title":"ActionObject","text":"<p>Appears in:</p> <ul> <li>Describe</li> <li>Get</li> <li>Wait</li> </ul> <p>ActionObject contains object selector options for an action.</p> Field Type Required Inline Description <code>ObjectType</code> <code>ObjectType</code> No description provided. <code>ActionObjectSelector</code> <code>ActionObjectSelector</code> No description provided."},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionObjectSelector","title":"ActionObjectSelector","text":"<p>Appears in:</p> <ul> <li>ActionObject</li> <li>Events</li> <li>PodLogs</li> </ul> <p>ActionObjectSelector contains object selector options for an action.</p> Field Type Required Inline Description <code>ObjectName</code> <code>ObjectName</code> No description provided. <code>selector</code> <code>Expression</code> <p>Selector defines labels selector.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionOutputs","title":"ActionOutputs","text":"<p>Appears in:</p> <ul> <li>Apply</li> <li>Command</li> <li>Create</li> <li>Patch</li> <li>Proxy</li> <li>Script</li> <li>Update</li> </ul> <p>ActionOutputs contains outputs options for an action.</p> Field Type Required Inline Description <code>outputs</code> <code>[]Output</code> <p>Outputs defines output bindings.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionResourceRef","title":"ActionResourceRef","text":"<p>Appears in:</p> <ul> <li>Apply</li> <li>Create</li> <li>Patch</li> <li>Update</li> </ul> <p>ActionResourceRef contains resource reference options for an action.</p> Field Type Required Inline Description <code>FileRef</code> <code>FileRef</code> No description provided. <code>resource</code> <code>meta/v1/unstructured.Unstructured</code> <p>Resource provides a resource to be applied.</p> <code>template</code> <code>bool</code> <p>Template determines whether resources should be considered for templating.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ActionTimeout","title":"ActionTimeout","text":"<p>Appears in:</p> <ul> <li>Apply</li> <li>Assert</li> <li>Command</li> <li>Create</li> <li>Delete</li> <li>Describe</li> <li>Error</li> <li>Events</li> <li>Get</li> <li>Patch</li> <li>PodLogs</li> <li>Proxy</li> <li>Script</li> <li>Update</li> <li>Wait</li> </ul> <p>ActionTimeout contains timeout options for an action.</p> Field Type Required Inline Description <code>timeout</code> <code>meta/v1.Duration</code> <p>Timeout for the operation. Overrides the global timeout set in the Configuration.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Apply","title":"Apply","text":"<p>Appears in:</p> <ul> <li>Operation</li> </ul> <p>Apply represents a set of configurations or resources that should be applied during testing.</p> Field Type Required Inline Description <code>ActionBindings</code> <code>ActionBindings</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionDryRun</code> <code>ActionDryRun</code> No description provided. <code>ActionExpectations</code> <code>ActionExpectations</code> No description provided. <code>ActionOutputs</code> <code>ActionOutputs</code> No description provided. <code>ActionResourceRef</code> <code>ActionResourceRef</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided."},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Assert","title":"Assert","text":"<p>Appears in:</p> <ul> <li>Operation</li> </ul> <p>Assert represents a test condition that is expected to hold true during the testing process.</p> Field Type Required Inline Description <code>ActionBindings</code> <code>ActionBindings</code> No description provided. <code>ActionCheckRef</code> <code>ActionCheckRef</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided."},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Binding","title":"Binding","text":"<p>Appears in:</p> <ul> <li>ActionBindings</li> <li>ActionEnv</li> <li>Output</li> <li>Scenario</li> <li>StepTemplateSpec</li> <li>TestSpec</li> <li>TestStepSpec</li> <li>With</li> </ul> <p>Binding represents a key/value set as a binding in an executing test.</p> Field Type Required Inline Description <code>name</code> <code>Expression</code> <p>Name the name of the binding.</p> <code>compiler</code> <code>policy/v1alpha1.Compiler</code> <p>Compiler defines the default compiler to use when evaluating expressions.</p> <code>value</code> <code>Projection</code> <p>Value value of the binding.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-CatchFinally","title":"CatchFinally","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> <li>StepTemplateSpec</li> <li>TestSpec</li> <li>TestStepSpec</li> </ul> <p>CatchFinally defines actions to be executed in catch, finally and cleanup blocks.</p> Field Type Required Inline Description <code>description</code> <code>string</code> <p>Description contains a description of the operation.</p> <code>compiler</code> <code>policy/v1alpha1.Compiler</code> <p>Compiler defines the default compiler to use when evaluating expressions.</p> <code>podLogs</code> <code>PodLogs</code> <p>PodLogs determines the pod logs collector to execute.</p> <code>events</code> <code>Events</code> <p>Events determines the events collector to execute.</p> <code>describe</code> <code>Describe</code> <p>Describe determines the resource describe collector to execute.</p> <code>wait</code> <code>Wait</code> <p>Wait determines the resource wait collector to execute.</p> <code>get</code> <code>Get</code> <p>Get determines the resource get collector to execute.</p> <code>delete</code> <code>Delete</code> <p>Delete represents a deletion operation.</p> <code>command</code> <code>Command</code> <p>Command defines a command to run.</p> <code>script</code> <code>Script</code> <p>Script defines a script to run.</p> <code>sleep</code> <code>Sleep</code> <p>Sleep defines zzzz.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Clusters","title":"Clusters","text":"<p>(Alias of <code>map[string]github.com/kyverno/chainsaw/pkg/apis/v1alpha1.Cluster</code>)</p> <p>Appears in:</p> <ul> <li>ActionClusters</li> <li>ConfigurationSpec</li> <li>TestSpec</li> <li>TestStepSpec</li> </ul> <p>Clusters defines a cluster map.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Command","title":"Command","text":"<p>Appears in:</p> <ul> <li>CatchFinally</li> <li>Operation</li> </ul> <p>Command describes a command to run as a part of a test step.</p> Field Type Required Inline Description <code>ActionBindings</code> <code>ActionBindings</code> No description provided. <code>ActionCheck</code> <code>ActionCheck</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionEnv</code> <code>ActionEnv</code> No description provided. <code>ActionOutputs</code> <code>ActionOutputs</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided. <code>entrypoint</code> <code>string</code> <p>Entrypoint is the command entry point to run.</p> <code>args</code> <code>[]string</code> <p>Args is the command arguments.</p> <code>workDir</code> <code>string</code> <p>WorkDir is the working directory for command.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ConfigurationSpec","title":"ConfigurationSpec","text":"<p>Appears in:</p> <ul> <li>Configuration</li> </ul> <p>ConfigurationSpec contains the configuration used to run tests.</p> Field Type Required Inline Description <code>timeouts</code> <code>DefaultTimeouts</code> <p>Global timeouts configuration. Applies to all tests/test steps if not overridden.</p> <code>skipDelete</code> <code>bool</code> <p>If set, do not delete the resources after running the tests (implies SkipClusterDelete).</p> <code>template</code> <code>bool</code> <p>Template determines whether resources should be considered for templating.</p> <code>compiler</code> <code>policy/v1alpha1.Compiler</code> <p>Compiler defines the default compiler to use when evaluating expressions.</p> <code>failFast</code> <code>bool</code> <p>FailFast determines whether the test should stop upon encountering the first failure.</p> <code>parallel</code> <code>int</code> <p>The maximum number of tests to run at once.</p> <code>deletionPropagationPolicy</code> <code>meta/v1.DeletionPropagation</code> <p>DeletionPropagationPolicy decides if a deletion will propagate to the dependents of the object, and how the garbage collector will handle the propagation.</p> <code>reportFormat</code> <code>ReportFormatType</code> <p>ReportFormat determines test report format (JSON, XML, JUNIT-TEST, JUNIT-STEP, JUNIT-OPERATION, nil) nil == no report. maps to report.Type, however we don't want generated.deepcopy to have reference to it.</p> <code>reportPath</code> <code>string</code> <p>ReportPath defines the path.</p> <code>reportName</code> <code>string</code> <p>ReportName defines the name of report to create. It defaults to \"chainsaw-report\".</p> <code>namespace</code> <code>string</code> <p>Namespace defines the namespace to use for tests. If not specified, every test will execute in a random ephemeral namespace unless the namespace is overridden in a the test spec.</p> <code>namespaceTemplateCompiler</code> <code>policy/v1alpha1.Compiler</code> <p>NamespaceTemplateCompiler defines the default compiler to use when evaluating expressions.</p> <code>namespaceTemplate</code> <code>Projection</code> <p>NamespaceTemplate defines a template to create the test namespace.</p> <code>fullName</code> <code>bool</code> <p>FullName makes use of the full test case folder path instead of the folder name.</p> <code>excludeTestRegex</code> <code>string</code> <p>ExcludeTestRegex is used to exclude tests based on a regular expression.</p> <code>includeTestRegex</code> <code>string</code> <p>IncludeTestRegex is used to include tests based on a regular expression.</p> <code>repeatCount</code> <code>int</code> <p>RepeatCount indicates how many times the tests should be executed.</p> <code>testFile</code> <code>string</code> <p>TestFile is the name of the file containing the test to run. If no extension is provided, chainsaw will try with .yaml first and .yml if needed.</p> <code>forceTerminationGracePeriod</code> <code>meta/v1.Duration</code> <p>ForceTerminationGracePeriod forces the termination grace period on pods, statefulsets, daemonsets and deployments.</p> <code>delayBeforeCleanup</code> <code>meta/v1.Duration</code> <p>DelayBeforeCleanup adds a delay between the time a test ends and the time cleanup starts.</p> <code>clusters</code> <code>Clusters</code> <p>Clusters holds a registry to clusters to support multi-cluster tests.</p> <code>catch</code> <code>[]CatchFinally</code> <p>Catch defines what the tests steps will execute when an error happens. This will be combined with catch handlers defined at the test and step levels.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Create","title":"Create","text":"<p>Appears in:</p> <ul> <li>Operation</li> </ul> <p>Create represents a set of resources that should be created. If a resource already exists in the cluster it will fail.</p> Field Type Required Inline Description <code>ActionBindings</code> <code>ActionBindings</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionDryRun</code> <code>ActionDryRun</code> No description provided. <code>ActionExpectations</code> <code>ActionExpectations</code> No description provided. <code>ActionOutputs</code> <code>ActionOutputs</code> No description provided. <code>ActionResourceRef</code> <code>ActionResourceRef</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided."},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-DefaultTimeouts","title":"DefaultTimeouts","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul> <p>DefaultTimeouts contains defautl timeouts per operation.</p> Field Type Required Inline Description <code>apply</code> <code>meta/v1.Duration</code> <p>Apply defines the timeout for the apply operation</p> <code>assert</code> <code>meta/v1.Duration</code> <p>Assert defines the timeout for the assert operation</p> <code>cleanup</code> <code>meta/v1.Duration</code> <p>Cleanup defines the timeout for the cleanup operation</p> <code>delete</code> <code>meta/v1.Duration</code> <p>Delete defines the timeout for the delete operation</p> <code>error</code> <code>meta/v1.Duration</code> <p>Error defines the timeout for the error operation</p> <code>exec</code> <code>meta/v1.Duration</code> <p>Exec defines the timeout for exec operations</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Delete","title":"Delete","text":"<p>Appears in:</p> <ul> <li>CatchFinally</li> <li>Operation</li> </ul> <p>Delete is a reference to an object that should be deleted</p> Field Type Required Inline Description <code>ActionBindings</code> <code>ActionBindings</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionExpectations</code> <code>ActionExpectations</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided. <code>template</code> <code>bool</code> <p>Template determines whether resources should be considered for templating.</p> <code>file</code> <code>Expression</code> <p>File is the path to the referenced file. This can be a direct path to a file or an expression that matches multiple files, such as \"manifest/*.yaml\" for all YAML files within the \"manifest\" directory.</p> <code>ref</code> <code>ObjectReference</code> <p>Ref determines objects to be deleted.</p> <code>deletionPropagationPolicy</code> <code>meta/v1.DeletionPropagation</code> <p>DeletionPropagationPolicy decides if a deletion will propagate to the dependents of the object, and how the garbage collector will handle the propagation. Overrides the deletion propagation policy set in the Configuration, the Test and the TestStep.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Describe","title":"Describe","text":"<p>Appears in:</p> <ul> <li>CatchFinally</li> <li>Operation</li> </ul> <p>Describe defines how to describe resources.</p> Field Type Required Inline Description <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionObject</code> <code>ActionObject</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided. <code>showEvents</code> <code>bool</code> <p>Show Events indicates whether to include related events.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Error","title":"Error","text":"<p>Appears in:</p> <ul> <li>Operation</li> </ul> <p>Error represents an anticipated error condition that may arise during testing. Instead of treating such an error as a test failure, it acknowledges it as expected.</p> Field Type Required Inline Description <code>ActionBindings</code> <code>ActionBindings</code> No description provided. <code>ActionCheckRef</code> <code>ActionCheckRef</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided."},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Events","title":"Events","text":"<p>Appears in:</p> <ul> <li>CatchFinally</li> <li>Operation</li> </ul> <p>Events defines how to collect events.</p> Field Type Required Inline Description <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionFormat</code> <code>ActionFormat</code> No description provided. <code>ActionObjectSelector</code> <code>ActionObjectSelector</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided."},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Expectation","title":"Expectation","text":"<p>Appears in:</p> <ul> <li>ActionExpectations</li> </ul> <p>Expectation represents a check to be applied on the result of an operation with a match filter to determine if the verification should be considered.</p> Field Type Required Inline Description <code>match</code> <code>policy/v1alpha1.AssertionTree</code> <p>Match defines the matching statement.</p> <code>check</code> <code>policy/v1alpha1.AssertionTree</code> <p>Check defines the verification statement.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Expression","title":"Expression","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>ActionObjectSelector</li> <li>Binding</li> <li>Delete</li> <li>FileRef</li> <li>ObjectName</li> <li>ObjectType</li> <li>PodLogs</li> <li>Proxy</li> <li>WaitForCondition</li> <li>WaitForJsonPath</li> </ul> <p>Expression defines an expression to be used in string fields.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-FileRef","title":"FileRef","text":"<p>Appears in:</p> <ul> <li>ActionCheckRef</li> <li>ActionResourceRef</li> </ul> <p>FileRef represents a file reference.</p> Field Type Required Inline Description <code>file</code> <code>Expression</code> <p>File is the path to the referenced file. This can be a direct path to a file or an expression that matches multiple files, such as \"manifest/*.yaml\" for all YAML files within the \"manifest\" directory.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Format","title":"Format","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>ActionFormat</li> </ul> <p>Format determines the output format (json or yaml).</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Get","title":"Get","text":"<p>Appears in:</p> <ul> <li>CatchFinally</li> <li>Operation</li> </ul> <p>Get defines how to get resources.</p> Field Type Required Inline Description <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionFormat</code> <code>ActionFormat</code> No description provided. <code>ActionObject</code> <code>ActionObject</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided."},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ObjectName","title":"ObjectName","text":"<p>Appears in:</p> <ul> <li>ActionObjectSelector</li> <li>ObjectReference</li> <li>Proxy</li> </ul> <p>ObjectName represents an object namespace and name.</p> Field Type Required Inline Description <code>namespace</code> <code>Expression</code> <p>Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/</p> <code>name</code> <code>Expression</code> <p>Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ObjectReference","title":"ObjectReference","text":"<p>Appears in:</p> <ul> <li>Delete</li> </ul> <p>ObjectReference represents one or more objects with a specific apiVersion and kind. For a single object name and namespace are used to identify the object. For multiple objects use labels.</p> Field Type Required Inline Description <code>ObjectType</code> <code>ObjectType</code> No description provided. <code>ObjectName</code> <code>ObjectName</code> No description provided. <code>labels</code> <code>map[string]string</code> <p>Label selector to match objects to delete</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ObjectType","title":"ObjectType","text":"<p>Appears in:</p> <ul> <li>ActionObject</li> <li>ObjectReference</li> <li>Proxy</li> </ul> <p>ObjectType represents a specific apiVersion and kind.</p> Field Type Required Inline Description <code>apiVersion</code> <code>Expression</code> <p>API version of the referent.</p> <code>kind</code> <code>Expression</code> <p>Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Operation","title":"Operation","text":"<p>Appears in:</p> <ul> <li>StepTemplateSpec</li> <li>TestStepSpec</li> </ul> <p>Operation defines a single operation, only one action is permitted for a given operation.</p> Field Type Required Inline Description <code>OperationBase</code> <code>OperationBase</code> <p>OperationBase defines common elements to all operations.</p> <code>apply</code> <code>Apply</code> <p>Apply represents resources that should be applied for this test step. This can include things like configuration settings or any other resources that need to be available during the test.</p> <code>assert</code> <code>Assert</code> <p>Assert represents an assertion to be made. It checks whether the conditions specified in the assertion hold true.</p> <code>command</code> <code>Command</code> <p>Command defines a command to run.</p> <code>create</code> <code>Create</code> <p>Create represents a creation operation.</p> <code>delete</code> <code>Delete</code> <p>Delete represents a deletion operation.</p> <code>describe</code> <code>Describe</code> <p>Describe determines the resource describe collector to execute.</p> <code>error</code> <code>Error</code> <p>Error represents the expected errors for this test step. If any of these errors occur, the test will consider them as expected; otherwise, they will be treated as test failures.</p> <code>events</code> <code>Events</code> <p>Events determines the events collector to execute.</p> <code>get</code> <code>Get</code> <p>Get determines the resource get collector to execute.</p> <code>patch</code> <code>Patch</code> <p>Patch represents a patch operation.</p> <code>podLogs</code> <code>PodLogs</code> <p>PodLogs determines the pod logs collector to execute.</p> <code>proxy</code> <code>Proxy</code> <p>Proxy runs a proxy request.</p> <code>script</code> <code>Script</code> <p>Script defines a script to run.</p> <code>sleep</code> <code>Sleep</code> <p>Sleep defines zzzz.</p> <code>update</code> <code>Update</code> <p>Update represents an update operation.</p> <code>wait</code> <code>Wait</code> <p>Wait determines the resource wait collector to execute.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-OperationBase","title":"OperationBase","text":"<p>Appears in:</p> <ul> <li>Operation</li> </ul> <p>OperationBase defines common elements to all operations.</p> Field Type Required Inline Description <code>description</code> <code>string</code> <p>Description contains a description of the operation.</p> <code>continueOnError</code> <code>bool</code> <p>ContinueOnError determines whether a test should continue or not in case the operation was not successful. Even if the test continues executing, it will still be reported as failed.</p> <code>compiler</code> <code>policy/v1alpha1.Compiler</code> <p>Compiler defines the default compiler to use when evaluating expressions.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Output","title":"Output","text":"<p>Appears in:</p> <ul> <li>ActionOutputs</li> </ul> <p>Output represents an output binding with a match to determine if the binding must be considered or not.</p> Field Type Required Inline Description <code>Binding</code> <code>Binding</code> <p>Binding determines the binding to create when the match succeeds.</p> <code>match</code> <code>policy/v1alpha1.AssertionTree</code> <p>Match defines the matching statement.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Patch","title":"Patch","text":"<p>Appears in:</p> <ul> <li>Operation</li> </ul> <p>Patch represents a set of resources that should be patched. If a resource doesn't exist yet in the cluster it will fail.</p> Field Type Required Inline Description <code>ActionBindings</code> <code>ActionBindings</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionDryRun</code> <code>ActionDryRun</code> No description provided. <code>ActionExpectations</code> <code>ActionExpectations</code> No description provided. <code>ActionOutputs</code> <code>ActionOutputs</code> No description provided. <code>ActionResourceRef</code> <code>ActionResourceRef</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided."},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-PodLogs","title":"PodLogs","text":"<p>Appears in:</p> <ul> <li>CatchFinally</li> <li>Operation</li> </ul> <p>PodLogs defines how to collect pod logs.</p> Field Type Required Inline Description <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionObjectSelector</code> <code>ActionObjectSelector</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided. <code>container</code> <code>Expression</code> <p>Container in pod to get logs from else --all-containers is used.</p> <code>tail</code> <code>int</code> <p>Tail is the number of last lines to collect from pods. If omitted or zero, then the default is 10 if you use a selector, or -1 (all) if you use a pod name. This matches default behavior of <code>kubectl logs</code>.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Projection","title":"Projection","text":"<p>Appears in:</p> <ul> <li>ActionCheckRef</li> <li>Binding</li> <li>ConfigurationSpec</li> <li>TestSpec</li> </ul> <p>Projection can be any type.</p> Field Type Required Inline Description"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Proxy","title":"Proxy","text":"<p>Appears in:</p> <ul> <li>Operation</li> </ul> <p>Proxy defines how to get resources.</p> Field Type Required Inline Description <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionOutputs</code> <code>ActionOutputs</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided. <code>ObjectName</code> <code>ObjectName</code> No description provided. <code>ObjectType</code> <code>ObjectType</code> No description provided. <code>port</code> <code>Expression</code> <p>TargetPort defines the target port to proxy the request.</p> <code>path</code> <code>Expression</code> <p>TargetPath defines the target path to proxy the request.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-ReportFormatType","title":"ReportFormatType","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Scenario","title":"Scenario","text":"<p>Appears in:</p> <ul> <li>TestSpec</li> </ul> <p>Scenario defines per scenario bindings.</p> Field Type Required Inline Description <code>bindings</code> <code>[]Binding</code> <p>Bindings defines binding key/values.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Script","title":"Script","text":"<p>Appears in:</p> <ul> <li>CatchFinally</li> <li>Operation</li> </ul> <p>Script describes a script to run as a part of a test step.</p> Field Type Required Inline Description <code>ActionBindings</code> <code>ActionBindings</code> No description provided. <code>ActionCheck</code> <code>ActionCheck</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionEnv</code> <code>ActionEnv</code> No description provided. <code>ActionOutputs</code> <code>ActionOutputs</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided. <code>content</code> <code>string</code> <p>Content defines a shell script (run with \"$shell $shellArgs ...\").</p> <code>shell</code> <code>string</code> <p>Shell defines the host shell (run with \"... $shellArgs $content\").</p> <code>shellArgs</code> <code>[]string</code> <p>ShellArgs defines arguments for the host shell (run with \"$shell ... $content\").</p> <code>workDir</code> <code>string</code> <p>WorkDir is the working directory for script.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Sleep","title":"Sleep","text":"<p>Appears in:</p> <ul> <li>CatchFinally</li> <li>Operation</li> </ul> <p>Sleep represents a duration while nothing happens.</p> Field Type Required Inline Description <code>duration</code> <code>meta/v1.Duration</code> <p>Duration is the delay used for sleeping.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-StepTemplateSpec","title":"StepTemplateSpec","text":"<p>Appears in:</p> <ul> <li>StepTemplate</li> </ul> <p>StepTemplateSpec defines the spec of a step template.</p> Field Type Required Inline Description <code>bindings</code> <code>[]Binding</code> <p>Bindings defines additional binding key/values.</p> <code>try</code> <code>[]Operation</code> <p>Try defines what the step will try to execute.</p> <code>catch</code> <code>[]CatchFinally</code> <p>Catch defines what the step will execute when an error happens.</p> <code>finally</code> <code>[]CatchFinally</code> <p>Finally defines what the step will execute after the step is terminated.</p> <code>cleanup</code> <code>[]CatchFinally</code> <p>Cleanup defines what will be executed after the test is terminated.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-TestSpec","title":"TestSpec","text":"<p>Appears in:</p> <ul> <li>Test</li> </ul> <p>TestSpec contains the test spec.</p> Field Type Required Inline Description <code>description</code> <code>string</code> <p>Description contains a description of the test.</p> <code>failFast</code> <code>bool</code> <p>FailFast determines whether the test should stop upon encountering the first failure.</p> <code>timeouts</code> <code>Timeouts</code> <p>Timeouts for the test. Overrides the global timeouts set in the Configuration on a per operation basis.</p> <code>cluster</code> <code>string</code> <p>Cluster defines the target cluster (will be inherited if not specified).</p> <code>clusters</code> <code>Clusters</code> <p>Clusters holds a registry to clusters to support multi-cluster tests.</p> <code>skip</code> <code>bool</code> <p>Skip determines whether the test should skipped.</p> <code>concurrent</code> <code>bool</code> <p>Concurrent determines whether the test should run concurrently with other tests.</p> <code>skipDelete</code> <code>bool</code> <p>SkipDelete determines whether the resources created by the test should be deleted after the test is executed.</p> <code>template</code> <code>bool</code> <p>Template determines whether resources should be considered for templating.</p> <code>compiler</code> <code>policy/v1alpha1.Compiler</code> <p>Compiler defines the default compiler to use when evaluating expressions.</p> <code>namespace</code> <code>string</code> <p>Namespace determines whether the test should run in a random ephemeral namespace or not.</p> <code>namespaceTemplate</code> <code>Projection</code> <p>NamespaceTemplate defines a template to create the test namespace.</p> <code>namespaceTemplateCompiler</code> <code>policy/v1alpha1.Compiler</code> <p>NamespaceTemplateCompiler defines the default compiler to use when evaluating expressions.</p> <code>scenarios</code> <code>[]Scenario</code> <p>Scenarios defines test scenarios.</p> <code>bindings</code> <code>[]Binding</code> <p>Bindings defines additional binding key/values.</p> <code>steps</code> <code>[]TestStep</code> <p>Steps defining the test.</p> <code>catch</code> <code>[]CatchFinally</code> <p>Catch defines what the steps will execute when an error happens. This will be combined with catch handlers defined at the step level.</p> <code>forceTerminationGracePeriod</code> <code>meta/v1.Duration</code> <p>ForceTerminationGracePeriod forces the termination grace period on pods, statefulsets, daemonsets and deployments.</p> <code>delayBeforeCleanup</code> <code>meta/v1.Duration</code> <p>DelayBeforeCleanup adds a delay between the time a test ends and the time cleanup starts.</p> <code>deletionPropagationPolicy</code> <code>meta/v1.DeletionPropagation</code> <p>DeletionPropagationPolicy decides if a deletion will propagate to the dependents of the object, and how the garbage collector will handle the propagation. Overrides the deletion propagation policy set in the Configuration.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-TestStep","title":"TestStep","text":"<p>Appears in:</p> <ul> <li>TestSpec</li> </ul> <p>TestStep contains the test step definition used in a test spec.</p> Field Type Required Inline Description <code>name</code> <code>string</code> <p>Name of the step.</p> <code>use</code> <code>Use</code> <p>Use defines a reference to a step template.</p> <code>TestStepSpec</code> <code>TestStepSpec</code> <p>TestStepSpec of the step.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-TestStepSpec","title":"TestStepSpec","text":"<p>Appears in:</p> <ul> <li>TestStep</li> </ul> <p>TestStepSpec defines the desired state and behavior for each test step.</p> Field Type Required Inline Description <code>description</code> <code>string</code> <p>Description contains a description of the test step.</p> <code>timeouts</code> <code>Timeouts</code> <p>Timeouts for the test step. Overrides the global timeouts set in the Configuration and the timeouts eventually set in the Test.</p> <code>deletionPropagationPolicy</code> <code>meta/v1.DeletionPropagation</code> <p>DeletionPropagationPolicy decides if a deletion will propagate to the dependents of the object, and how the garbage collector will handle the propagation. Overrides the deletion propagation policy set in both the Configuration and the Test.</p> <code>cluster</code> <code>string</code> <p>Cluster defines the target cluster (will be inherited if not specified).</p> <code>clusters</code> <code>Clusters</code> <p>Clusters holds a registry to clusters to support multi-cluster tests.</p> <code>skipDelete</code> <code>bool</code> <p>SkipDelete determines whether the resources created by the step should be deleted after the test step is executed.</p> <code>template</code> <code>bool</code> <p>Template determines whether resources should be considered for templating.</p> <code>compiler</code> <code>policy/v1alpha1.Compiler</code> <p>Compiler defines the default compiler to use when evaluating expressions.</p> <code>bindings</code> <code>[]Binding</code> <p>Bindings defines additional binding key/values.</p> <code>try</code> <code>[]Operation</code> <p>Try defines what the step will try to execute.</p> <code>catch</code> <code>[]CatchFinally</code> <p>Catch defines what the step will execute when an error happens.</p> <code>finally</code> <code>[]CatchFinally</code> <p>Finally defines what the step will execute after the step is terminated.</p> <code>cleanup</code> <code>[]CatchFinally</code> <p>Cleanup defines what will be executed after the test is terminated.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Timeouts","title":"Timeouts","text":"<p>Appears in:</p> <ul> <li>TestSpec</li> <li>TestStepSpec</li> </ul> <p>Timeouts contains timeouts per operation.</p> Field Type Required Inline Description <code>apply</code> <code>meta/v1.Duration</code> <p>Apply defines the timeout for the apply operation</p> <code>assert</code> <code>meta/v1.Duration</code> <p>Assert defines the timeout for the assert operation</p> <code>cleanup</code> <code>meta/v1.Duration</code> <p>Cleanup defines the timeout for the cleanup operation</p> <code>delete</code> <code>meta/v1.Duration</code> <p>Delete defines the timeout for the delete operation</p> <code>error</code> <code>meta/v1.Duration</code> <p>Error defines the timeout for the error operation</p> <code>exec</code> <code>meta/v1.Duration</code> <p>Exec defines the timeout for exec operations</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Update","title":"Update","text":"<p>Appears in:</p> <ul> <li>Operation</li> </ul> <p>Update represents a set of resources that should be updated. If a resource does not exist in the cluster it will fail.</p> Field Type Required Inline Description <code>ActionBindings</code> <code>ActionBindings</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionDryRun</code> <code>ActionDryRun</code> No description provided. <code>ActionExpectations</code> <code>ActionExpectations</code> No description provided. <code>ActionOutputs</code> <code>ActionOutputs</code> No description provided. <code>ActionResourceRef</code> <code>ActionResourceRef</code> No description provided. <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided."},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Use","title":"Use","text":"<p>Appears in:</p> <ul> <li>TestStep</li> </ul> <p>Use defines a reference to a step template.</p> Field Type Required Inline Description <code>template</code> <code>string</code> <p>Template references a step template.</p> <code>with</code> <code>With</code> <p>With defines arguments passed to the step template.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-Wait","title":"Wait","text":"<p>Appears in:</p> <ul> <li>CatchFinally</li> <li>Operation</li> </ul> <p>Wait specifies how to perform wait operations on resources.</p> Field Type Required Inline Description <code>ActionTimeout</code> <code>ActionTimeout</code> No description provided. <code>ActionFormat</code> <code>ActionFormat</code> No description provided. <code>ActionClusters</code> <code>ActionClusters</code> No description provided. <code>ActionObject</code> <code>ActionObject</code> No description provided. <code>for</code> <code>WaitFor</code> <p>WaitFor specifies the condition to wait for.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-WaitFor","title":"WaitFor","text":"<p>Appears in:</p> <ul> <li>Wait</li> </ul> <p>WaitFor specifies the condition to wait for.</p> Field Type Required Inline Description <code>deletion</code> <code>WaitForDeletion</code> <p>Deletion specifies parameters for waiting on a resource's deletion.</p> <code>condition</code> <code>WaitForCondition</code> <p>Condition specifies the condition to wait for.</p> <code>jsonPath</code> <code>WaitForJsonPath</code> <p>JsonPath specifies the json path condition to wait for.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-WaitForCondition","title":"WaitForCondition","text":"<p>Appears in:</p> <ul> <li>WaitFor</li> </ul> <p>WaitForCondition represents parameters for waiting on a specific condition of a resource.</p> Field Type Required Inline Description <code>name</code> <code>Expression</code> <p>Name defines the specific condition to wait for, e.g., \"Available\", \"Ready\".</p> <code>value</code> <code>Expression</code> <p>Value defines the specific condition status to wait for, e.g., \"True\", \"False\".</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-WaitForDeletion","title":"WaitForDeletion","text":"<p>Appears in:</p> <ul> <li>WaitFor</li> </ul> <p>WaitForDeletion represents parameters for waiting on a resource's deletion.</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-WaitForJsonPath","title":"WaitForJsonPath","text":"<p>Appears in:</p> <ul> <li>WaitFor</li> </ul> <p>WaitForJsonPath represents parameters for waiting on a json path of a resource.</p> Field Type Required Inline Description <code>path</code> <code>Expression</code> <p>Path defines the json path to wait for, e.g. '{.status.phase}'.</p> <code>value</code> <code>Expression</code> <p>Value defines the expected value to wait for, e.g., \"Running\".</p>"},{"location":"reference/apis/chainsaw.v1alpha1/#chainsaw-kyverno-io-v1alpha1-With","title":"With","text":"<p>Appears in:</p> <ul> <li>Use</li> </ul> <p>With defines arguments passed to step templates.</p> Field Type Required Inline Description <code>bindings</code> <code>[]Binding</code> <p>Bindings defines additional binding key/values.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/","title":"chainsaw (v1alpha2)","text":"<p>Package v1alpha2 contains API Schema definitions for the v1alpha2 API group.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#resource-types","title":"Resource Types","text":"<ul> <li>Configuration</li> </ul>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-Configuration","title":"Configuration","text":"<p>Configuration is the resource that contains the configuration used to run tests.</p> Field Type Required Inline Description <code>apiVersion</code> <code>string</code> <code>chainsaw.kyverno.io/v1alpha2</code> <code>kind</code> <code>string</code> <code>Configuration</code> <code>metadata</code> <code>meta/v1.ObjectMeta</code> <p>Standard object's metadata.</p> <code>spec</code> <code>ConfigurationSpec</code> <p>Configuration spec.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-CleanupOptions","title":"CleanupOptions","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul> <p>CleanupOptions contains the configuration used for cleaning up resources.</p> Field Type Required Inline Description <code>skipDelete</code> <code>bool</code> <p>If set, do not delete the resources after running a test.</p> <code>delayBeforeCleanup</code> <code>meta/v1.Duration</code> <p>DelayBeforeCleanup adds a delay between the time a test ends and the time cleanup starts.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-ConfigurationSpec","title":"ConfigurationSpec","text":"<p>Appears in:</p> <ul> <li>Configuration</li> </ul> <p>ConfigurationSpec contains the configuration used to run tests.</p> Field Type Required Inline Description <code>cleanup</code> <code>CleanupOptions</code> <p>Cleanup contains cleanup configuration.</p> <code>clusters</code> <code>Clusters</code> <p>Clusters holds a registry to clusters to support multi-cluster tests.</p> <code>deletion</code> <code>DeletionOptions</code> <p>Deletion contains the global deletion configuration.</p> <code>discovery</code> <code>DiscoveryOptions</code> <p>Discovery contains tests discovery configuration.</p> <code>error</code> <code>ErrorOptions</code> <p>Error contains the global error configuration.</p> <code>execution</code> <code>ExecutionOptions</code> <p>Execution contains tests execution configuration.</p> <code>namespace</code> <code>NamespaceOptions</code> <p>Namespace contains properties for the namespace to use for tests.</p> <code>report</code> <code>ReportOptions</code> <p>Report contains properties for the report.</p> <code>templating</code> <code>TemplatingOptions</code> <p>Templating contains the templating config.</p> <code>timeouts</code> <code>DefaultTimeouts</code> <p>Global timeouts configuration. Applies to all tests/test steps if not overridden.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-DeletionOptions","title":"DeletionOptions","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul> <p>DeletionOptions contains the configuration used for deleting resources.</p> Field Type Required Inline Description <code>propagation</code> <code>meta/v1.DeletionPropagation</code> <p>Propagation decides if a deletion will propagate to the dependents of the object, and how the garbage collector will handle the propagation.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-DiscoveryOptions","title":"DiscoveryOptions","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul> <p>DiscoveryOptions contains the discovery configuration used when discovering tests in folders.</p> Field Type Required Inline Description <code>excludeTestRegex</code> <code>string</code> <p>ExcludeTestRegex is used to exclude tests based on a regular expression.</p> <code>includeTestRegex</code> <code>string</code> <p>IncludeTestRegex is used to include tests based on a regular expression.</p> <code>testFile</code> <code>string</code> <p>TestFile is the name of the file containing the test to run. If no extension is provided, chainsaw will try with .yaml first and .yml if needed.</p> <code>fullName</code> <code>bool</code> <p>FullName makes use of the full test case folder path instead of the folder name.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-ErrorOptions","title":"ErrorOptions","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul> <p>ErrorOptions contains the global error configuration.</p> Field Type Required Inline Description <code>catch</code> <code>[]CatchFinally</code> <p>Catch defines what the tests steps will execute when an error happens. This will be combined with catch handlers defined at the test and step levels.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-ExecutionOptions","title":"ExecutionOptions","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul> <p>ExecutionOptions determines how tests are run.</p> Field Type Required Inline Description <code>failFast</code> <code>bool</code> <p>FailFast determines whether the test should stop upon encountering the first failure.</p> <code>parallel</code> <code>int</code> <p>The maximum number of tests to run at once.</p> <code>repeatCount</code> <code>int</code> <p>RepeatCount indicates how many times the tests should be executed.</p> <code>forceTerminationGracePeriod</code> <code>meta/v1.Duration</code> <p>ForceTerminationGracePeriod forces the termination grace period on pods, statefulsets, daemonsets and deployments.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-NamespaceOptions","title":"NamespaceOptions","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul> <p>NamespaceOptions contains the configuration used to allocate a namespace for each test.</p> Field Type Required Inline Description <code>name</code> <code>string</code> <p>Name defines the namespace to use for tests. If not specified, every test will execute in a random ephemeral namespace unless the namespace is overridden in a the test spec.</p> <code>compiler</code> <code>policy/v1alpha1.Compiler</code> <p>Compiler defines the default compiler to use when evaluating expressions.</p> <code>template</code> <code>Projection</code> <p>Template defines a template to create the test namespace.</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-ReportFormatType","title":"ReportFormatType","text":"<p>(Alias of <code>string</code>)</p> <p>Appears in:</p> <ul> <li>ReportOptions</li> </ul>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-ReportOptions","title":"ReportOptions","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul> <p>ReportOptions contains the configuration used for reporting.</p> Field Type Required Inline Description <code>format</code> <code>ReportFormatType</code> <p>ReportFormat determines test report format (JSON, XML, JUNIT-TEST, JUNIT-STEP, JUNIT-OPERATION).</p> <code>path</code> <code>string</code> <p>ReportPath defines the path.</p> <code>name</code> <code>string</code> <p>ReportName defines the name of report to create. It defaults to \"chainsaw-report\".</p>"},{"location":"reference/apis/chainsaw.v1alpha2/#chainsaw-kyverno-io-v1alpha2-TemplatingOptions","title":"TemplatingOptions","text":"<p>Appears in:</p> <ul> <li>ConfigurationSpec</li> </ul> <p>TemplatingOptions contains the templating configuration.</p> Field Type Required Inline Description <code>enabled</code> <code>bool</code> <p>Enabled determines whether resources should be considered for templating.</p> <code>compiler</code> <code>policy/v1alpha1.Compiler</code> <p>Compiler defines the default compiler to use when evaluating expressions.</p>"},{"location":"reference/commands/chainsaw/","title":"chainsaw","text":""},{"location":"reference/commands/chainsaw/#chainsaw","title":"chainsaw","text":"<p>Stronger tool for e2e testing</p> <pre><code>chainsaw [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw/#options","title":"Options","text":"<pre><code>  -h, --help   help for chainsaw\n</code></pre>"},{"location":"reference/commands/chainsaw/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw assert  - Evaluate assertion</li> <li>chainsaw build    - Build commands</li> <li>chainsaw completion  - Generate the autocompletion script for the specified shell</li> <li>chainsaw create  - Create Chainsaw resources</li> <li>chainsaw docs  - Generate reference documentation</li> <li>chainsaw export  - Export commands</li> <li>chainsaw lint  - Lint a file or read from standard input</li> <li>chainsaw migrate    - Migrate resources to Chainsaw</li> <li>chainsaw renovate  - Upgrade Chainsaw resources</li> <li>chainsaw test  - Run tests</li> <li>chainsaw version    - Print the version informations</li> </ul>"},{"location":"reference/commands/chainsaw_assert/","title":"chainsaw assert","text":""},{"location":"reference/commands/chainsaw_assert/#chainsaw-assert","title":"chainsaw assert","text":"<p>Evaluate assertion</p> <pre><code>chainsaw assert [flags] [FILE]\n</code></pre>"},{"location":"reference/commands/chainsaw_assert/#options","title":"Options","text":"<pre><code>      --clustered                           Defines if the resource is clustered (only applies when resource is loaded from a file)\n  -f, --file string                         Path to the file to assert or '-' to read from stdin\n  -h, --help                                help for assert\n      --kube-as string                      Username to impersonate for the operation\n      --kube-as-group stringArray           Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                  UID to impersonate for the operation\n      --kube-certificate-authority string   Path to a cert file for the certificate authority\n      --kube-client-certificate string      Path to a client certificate file for TLS\n      --kube-client-key string              Path to a client key file for TLS\n      --kube-cluster string                 The name of the kubeconfig cluster to use\n      --kube-context string                 The name of the kubeconfig context to use\n      --kube-disable-compression            If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify       If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string               If present, the namespace scope for this CLI request\n      --kube-password string                Password for basic authentication to the API server\n      --kube-proxy-url string               If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string         The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                  The address and port of the Kubernetes API server\n      --kube-tls-server-name string         If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                   Bearer token for authentication to the API server\n      --kube-user string                    The name of the kubeconfig user to use\n      --kube-username string                Username for basic authentication to the API server\n      --namespace string                    Namespace to use (default \"default\")\n      --no-color                            Removes output colors\n  -r, --resource string                     Path to the file containing the resource\n      --timeout duration                    The assert timeout to use (default 30s)\n</code></pre>"},{"location":"reference/commands/chainsaw_assert/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> </ul>"},{"location":"reference/commands/chainsaw_build/","title":"chainsaw build","text":""},{"location":"reference/commands/chainsaw_build/#chainsaw-build","title":"chainsaw build","text":"<p>Build commands</p> <pre><code>chainsaw build [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_build/#options","title":"Options","text":"<pre><code>  -h, --help   help for build\n</code></pre>"},{"location":"reference/commands/chainsaw_build/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> <li>chainsaw build docs  - Build tests documentation</li> </ul>"},{"location":"reference/commands/chainsaw_build_docs/","title":"chainsaw build docs","text":""},{"location":"reference/commands/chainsaw_build_docs/#chainsaw-build-docs","title":"chainsaw build docs","text":"<p>Build tests documentation</p> <pre><code>chainsaw build docs [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_build_docs/#options","title":"Options","text":"<pre><code>      --catalog string         Path to the built test catalog file\n  -h, --help                   help for docs\n      --readme-file string     Name of the built docs file (default \"README.md\")\n      --test-dir stringArray   Directories containing test cases to run\n      --test-file string       Name of the test file (default \"chainsaw-test\")\n</code></pre>"},{"location":"reference/commands/chainsaw_build_docs/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw build    - Build commands</li> </ul>"},{"location":"reference/commands/chainsaw_completion/","title":"chainsaw completion","text":""},{"location":"reference/commands/chainsaw_completion/#chainsaw-completion","title":"chainsaw completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"reference/commands/chainsaw_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for chainsaw for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"reference/commands/chainsaw_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"reference/commands/chainsaw_completion/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> <li>chainsaw completion bash    - Generate the autocompletion script for bash</li> <li>chainsaw completion fish    - Generate the autocompletion script for fish</li> <li>chainsaw completion powershell    - Generate the autocompletion script for powershell</li> <li>chainsaw completion zsh  - Generate the autocompletion script for zsh</li> </ul>"},{"location":"reference/commands/chainsaw_completion_bash/","title":"chainsaw completion bash","text":""},{"location":"reference/commands/chainsaw_completion_bash/#chainsaw-completion-bash","title":"chainsaw completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"reference/commands/chainsaw_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(chainsaw completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"reference/commands/chainsaw_completion_bash/#linux","title":"Linux:","text":"<pre><code>chainsaw completion bash &gt; /etc/bash_completion.d/chainsaw\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_bash/#macos","title":"macOS:","text":"<pre><code>chainsaw completion bash &gt; $(brew --prefix)/etc/bash_completion.d/chainsaw\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>chainsaw completion bash\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_bash/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"reference/commands/chainsaw_completion_fish/","title":"chainsaw completion fish","text":""},{"location":"reference/commands/chainsaw_completion_fish/#chainsaw-completion-fish","title":"chainsaw completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"reference/commands/chainsaw_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>chainsaw completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>chainsaw completion fish &gt; ~/.config/fish/completions/chainsaw.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>chainsaw completion fish [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_fish/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"reference/commands/chainsaw_completion_powershell/","title":"chainsaw completion powershell","text":""},{"location":"reference/commands/chainsaw_completion_powershell/#chainsaw-completion-powershell","title":"chainsaw completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"reference/commands/chainsaw_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>chainsaw completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>chainsaw completion powershell [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_powershell/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"reference/commands/chainsaw_completion_zsh/","title":"chainsaw completion zsh","text":""},{"location":"reference/commands/chainsaw_completion_zsh/#chainsaw-completion-zsh","title":"chainsaw completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"reference/commands/chainsaw_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(chainsaw completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"reference/commands/chainsaw_completion_zsh/#linux","title":"Linux:","text":"<pre><code>chainsaw completion zsh &gt; \"${fpath[1]}/_chainsaw\"\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_zsh/#macos","title":"macOS:","text":"<pre><code>chainsaw completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_chainsaw\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>chainsaw completion zsh [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"reference/commands/chainsaw_completion_zsh/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"reference/commands/chainsaw_create/","title":"chainsaw create","text":""},{"location":"reference/commands/chainsaw_create/#chainsaw-create","title":"chainsaw create","text":"<p>Create Chainsaw resources</p> <pre><code>chainsaw create [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_create/#options","title":"Options","text":"<pre><code>  -h, --help   help for create\n</code></pre>"},{"location":"reference/commands/chainsaw_create/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> <li>chainsaw create test    - Create a Chainsaw test</li> </ul>"},{"location":"reference/commands/chainsaw_create_test/","title":"chainsaw create test","text":""},{"location":"reference/commands/chainsaw_create_test/#chainsaw-create-test","title":"chainsaw create test","text":"<p>Create a Chainsaw test</p> <pre><code>chainsaw create test [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_create_test/#options","title":"Options","text":"<pre><code>      --description   If set, adds description when applicable (default true)\n      --force         If set, existing test will be deleted if needed\n  -h, --help          help for test\n      --save          If set, created test will be saved\n</code></pre>"},{"location":"reference/commands/chainsaw_create_test/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw create  - Create Chainsaw resources</li> </ul>"},{"location":"reference/commands/chainsaw_docs/","title":"chainsaw docs","text":""},{"location":"reference/commands/chainsaw_docs/#chainsaw-docs","title":"chainsaw docs","text":"<p>Generate reference documentation</p> <pre><code>chainsaw docs [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_docs/#options","title":"Options","text":"<pre><code>      --autogenTag      Determines if the generated docs should contain a timestamp (default true)\n  -h, --help            help for docs\n  -o, --output string   Output path (default \".\")\n      --website         Website version\n</code></pre>"},{"location":"reference/commands/chainsaw_docs/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> </ul>"},{"location":"reference/commands/chainsaw_export/","title":"chainsaw export","text":""},{"location":"reference/commands/chainsaw_export/#chainsaw-export","title":"chainsaw export","text":"<p>Export commands</p> <pre><code>chainsaw export [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_export/#options","title":"Options","text":"<pre><code>  -h, --help   help for export\n</code></pre>"},{"location":"reference/commands/chainsaw_export/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> <li>chainsaw export schemas  - Export JSON schemas</li> </ul>"},{"location":"reference/commands/chainsaw_export_schemas/","title":"chainsaw export schemas","text":""},{"location":"reference/commands/chainsaw_export_schemas/#chainsaw-export-schemas","title":"chainsaw export schemas","text":"<p>Export JSON schemas</p> <pre><code>chainsaw export schemas [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_export_schemas/#options","title":"Options","text":"<pre><code>  -h, --help   help for schemas\n</code></pre>"},{"location":"reference/commands/chainsaw_export_schemas/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw export  - Export commands</li> </ul>"},{"location":"reference/commands/chainsaw_lint/","title":"chainsaw lint","text":""},{"location":"reference/commands/chainsaw_lint/#chainsaw-lint","title":"chainsaw lint","text":"<p>Lint a file or read from standard input</p>"},{"location":"reference/commands/chainsaw_lint/#synopsis","title":"Synopsis","text":"<p>Use chainsaw lint to lint a specific file or read from standard input for either test or configuration.</p> <pre><code>chainsaw lint [test|configuration] [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_lint/#options","title":"Options","text":"<pre><code>  -f, --file string   Specify the file to lint or '-' for standard input\n  -h, --help          help for lint\n</code></pre>"},{"location":"reference/commands/chainsaw_lint/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> </ul>"},{"location":"reference/commands/chainsaw_migrate/","title":"chainsaw migrate","text":""},{"location":"reference/commands/chainsaw_migrate/#chainsaw-migrate","title":"chainsaw migrate","text":"<p>Migrate resources to Chainsaw</p> <pre><code>chainsaw migrate [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_migrate/#options","title":"Options","text":"<pre><code>  -h, --help   help for migrate\n</code></pre>"},{"location":"reference/commands/chainsaw_migrate/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> <li>chainsaw migrate kuttl    - Migrate KUTTL resources to Chainsaw</li> </ul>"},{"location":"reference/commands/chainsaw_migrate_kuttl/","title":"chainsaw migrate kuttl","text":""},{"location":"reference/commands/chainsaw_migrate_kuttl/#chainsaw-migrate-kuttl","title":"chainsaw migrate kuttl","text":"<p>Migrate KUTTL resources to Chainsaw</p> <pre><code>chainsaw migrate kuttl [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_migrate_kuttl/#options","title":"Options","text":"<pre><code>  -h, --help   help for kuttl\n</code></pre>"},{"location":"reference/commands/chainsaw_migrate_kuttl/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw migrate    - Migrate resources to Chainsaw</li> <li>chainsaw migrate kuttl config  - Migrate KUTTL config to Chainsaw</li> <li>chainsaw migrate kuttl tests    - Migrate KUTTL tests to Chainsaw</li> </ul>"},{"location":"reference/commands/chainsaw_migrate_kuttl_config/","title":"chainsaw migrate kuttl config","text":""},{"location":"reference/commands/chainsaw_migrate_kuttl_config/#chainsaw-migrate-kuttl-config","title":"chainsaw migrate kuttl config","text":"<p>Migrate KUTTL config to Chainsaw</p> <pre><code>chainsaw migrate kuttl config [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_migrate_kuttl_config/#options","title":"Options","text":"<pre><code>      --cleanup   If set, delete converted files\n  -h, --help      help for config\n      --save      If set, converted files will be saved\n</code></pre>"},{"location":"reference/commands/chainsaw_migrate_kuttl_config/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw migrate kuttl    - Migrate KUTTL resources to Chainsaw</li> </ul>"},{"location":"reference/commands/chainsaw_migrate_kuttl_tests/","title":"chainsaw migrate kuttl tests","text":""},{"location":"reference/commands/chainsaw_migrate_kuttl_tests/#chainsaw-migrate-kuttl-tests","title":"chainsaw migrate kuttl tests","text":"<p>Migrate KUTTL tests to Chainsaw</p> <pre><code>chainsaw migrate kuttl tests [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_migrate_kuttl_tests/#options","title":"Options","text":"<pre><code>      --cleanup   If set, delete converted files\n  -h, --help      help for tests\n      --save      If set, converted files will be saved\n</code></pre>"},{"location":"reference/commands/chainsaw_migrate_kuttl_tests/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw migrate kuttl    - Migrate KUTTL resources to Chainsaw</li> </ul>"},{"location":"reference/commands/chainsaw_renovate/","title":"chainsaw renovate","text":""},{"location":"reference/commands/chainsaw_renovate/#chainsaw-renovate","title":"chainsaw renovate","text":"<p>Upgrade Chainsaw resources</p> <pre><code>chainsaw renovate [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_renovate/#options","title":"Options","text":"<pre><code>  -h, --help   help for renovate\n</code></pre>"},{"location":"reference/commands/chainsaw_renovate/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> <li>chainsaw renovate config    - Upgrade Chainsaw configuration to the latest version</li> </ul>"},{"location":"reference/commands/chainsaw_renovate_config/","title":"chainsaw renovate config","text":""},{"location":"reference/commands/chainsaw_renovate_config/#chainsaw-renovate-config","title":"chainsaw renovate config","text":"<p>Upgrade Chainsaw configuration to the latest version</p> <pre><code>chainsaw renovate config [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_renovate_config/#options","title":"Options","text":"<pre><code>  -h, --help   help for config\n      --save   If set, converted files will be saved\n</code></pre>"},{"location":"reference/commands/chainsaw_renovate_config/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw renovate  - Upgrade Chainsaw resources</li> </ul>"},{"location":"reference/commands/chainsaw_test/","title":"chainsaw test","text":""},{"location":"reference/commands/chainsaw_test/#chainsaw-test","title":"chainsaw test","text":"<p>Run tests</p> <pre><code>chainsaw test [flags]... [test directories]...\n</code></pre>"},{"location":"reference/commands/chainsaw_test/#options","title":"Options","text":"<pre><code>      --apply-timeout duration                    The apply timeout to use as default for configuration (default 5s)\n      --assert-timeout duration                   The assert timeout to use as default for configuration (default 30s)\n      --cleanup-delay duration                    Adds a delay between the time a test ends and the time cleanup starts\n      --cleanup-timeout duration                  The cleanup timeout to use as default for configuration (default 30s)\n      --cluster strings                           Register cluster (format &lt;cluster name&gt;=&lt;kubeconfig path&gt;:[context name])\n      --config string                             Chainsaw configuration file\n      --default-compiler string                   If set, configures the default compiler (jp or cel)\n      --delete-timeout duration                   The delete timeout to use as default for configuration (default 15s)\n      --deletion-propagation-policy string        The deletion propagation policy (Foreground|Background|Orphan) (default \"Background\")\n      --error-timeout duration                    The error timeout to use as default for configuration (default 30s)\n      --exclude-test-regex string                 Regular expression to exclude tests\n      --exec-timeout duration                     The exec timeout to use as default for configuration (default 5s)\n      --fail-fast                                 Stop the test upon encountering the first failure\n      --force-termination-grace-period duration   If specified, overrides termination grace periods in applicable resources\n      --full-name                                 Use full test case folder path instead of folder name\n  -h, --help                                      help for test\n      --include-test-regex string                 Regular expression to include tests\n      --kube-as string                            Username to impersonate for the operation\n      --kube-as-group stringArray                 Group to impersonate for the operation, this flag can be repeated to specify multiple groups.\n      --kube-as-uid string                        UID to impersonate for the operation\n      --kube-certificate-authority string         Path to a cert file for the certificate authority\n      --kube-client-certificate string            Path to a client certificate file for TLS\n      --kube-client-key string                    Path to a client key file for TLS\n      --kube-cluster string                       The name of the kubeconfig cluster to use\n      --kube-context string                       The name of the kubeconfig context to use\n      --kube-disable-compression                  If true, opt-out of response compression for all requests to the server\n      --kube-insecure-skip-tls-verify             If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n  -n, --kube-namespace string                     If present, the namespace scope for this CLI request\n      --kube-password string                      Password for basic authentication to the API server\n      --kube-proxy-url string                     If provided, this URL will be used to connect via proxy\n      --kube-request-timeout string               The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n      --kube-server string                        The address and port of the Kubernetes API server\n      --kube-tls-server-name string               If provided, this name will be used to validate server certificate. If this is not provided, hostname used to contact the server is used.\n      --kube-token string                         Bearer token for authentication to the API server\n      --kube-user string                          The name of the kubeconfig user to use\n      --kube-username string                      Username for basic authentication to the API server\n      --namespace string                          Namespace to use for tests\n      --no-cluster                                Runs without cluster\n      --no-color                                  Removes output colors\n      --parallel int                              The maximum number of tests to run at once\n      --pause-on-failure                          Pause test execution failure (implies no concurrency)\n      --remarshal                                 Remarshals tests yaml to apply anchors before parsing\n      --repeat-count int                          Number of times to repeat each test (default 1)\n      --report-format string                      Test report format (JSON, XML, JUNIT-TEST, JUNIT-STEP, JUNIT-OPERATION)\n      --report-name string                        The name of the report to create (default \"chainsaw-report\")\n      --report-path string                        The path of the report to create\n      --selector strings                          Selector (label query) to filter on\n      --shard-count int                           Number of shards\n      --shard-index --shard-count                 Current shard index (if --shard-count &gt; 0)\n      --skip-delete                               If set, do not delete the resources after running the tests\n      --template                                  If set, resources will be considered for templating (default true)\n      --test-dir strings                          Directories containing test cases to run\n      --test-file string                          Name of the test file (default \"chainsaw-test\")\n      --values strings                            Values passed to the tests\n</code></pre>"},{"location":"reference/commands/chainsaw_test/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> </ul>"},{"location":"reference/commands/chainsaw_version/","title":"chainsaw version","text":""},{"location":"reference/commands/chainsaw_version/#chainsaw-version","title":"chainsaw version","text":"<p>Print the version informations</p> <pre><code>chainsaw version [flags]\n</code></pre>"},{"location":"reference/commands/chainsaw_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"reference/commands/chainsaw_version/#see-also","title":"SEE ALSO","text":"<ul> <li>chainsaw    - Stronger tool for e2e testing</li> </ul>"},{"location":"reference/jp/functions/","title":"Functions","text":"<p>Experimental functions</p> <p>Experimental functions are denoted by the <code>x_</code> prefix.</p> <p>These are functions that are subject to signature change in a future version.</p>"},{"location":"reference/jp/functions/#built-in-functions","title":"built-in functions","text":"Name Description abs Returns the absolute value of the provided argument. avg Returns the average of the elements in the provided array. An empty array will produce a return value of null. ceil Returns the next highest integer value by rounding up if necessary. contains Returns <code>true</code> if the given subject contains the provided search value. If the subject is an array, this function returns <code>true</code> if one of the elements in the array is equal to the provided search value. If the provided subject is a string, this function returns <code>true</code> if the string contains the provided search argument. ends_with Reports whether the given string ends with the provided suffix argument. find_first Returns the zero-based index of the first occurence where the substring appears in a string or null if it does not appear. find_last Returns the zero-based index of the last occurence where the substring appears in a string or null if it does not appear. floor Returns the next lowest integer value by rounding down if necessary. from_items Returns an object from the provided array of key value pairs. This function is the inversed of the <code>items()</code> function. group_by Groups an array of objects using an expression as the group key. items Converts a given object into an array of key-value pairs. join Returns all of the elements from the provided array joined together using the glue argument as a separator between each. keys Returns an array containing the keys of the provided object. length Returns the length of the given argument. If the argument is a string this function returns the number of code points in the string. If the argument is an array this function returns the number of elements in the array. If the argument is an object this function returns the number of key-value pairs in the object. lower Returns the given string with all Unicode letters mapped to their lower case. map Transforms elements in a given array and returns the result. max Returns the highest found element in the provided array argument. An empty array will produce a return value of null. max_by Returns the highest found element using a custom expression to compute the associated value for each element in the input array. merge Meges a list of objects together and returns the result. min Returns the lowest found element in the provided array argument. min_by Returns the lowest found element using a custom expression to compute the associated value for each element in the input array. not_null Returns the first non null element in the input array. pad_left Adds characters to the beginning of a string. pad_right Adds characters to the end of a string. replace Returns a copy of the input string with instances of old string argument replaced by new string argument. reverse Reverses the input string or array and returns the result. sort This function accepts an array argument and returns the sorted elements as an array. sort_by This function accepts an array argument and returns the sorted elements as an array using a custom expression to compute the associated value for each element. split Slices input string into substrings separated by a string argument and returns an array of the substrings between those separators. starts_with Reports whether the input string begins with the provided string prefix argument. sum Returns the sum of all numbers contained in the provided array. to_array Returns a one element array containing the passed in argument, or the passed in value if it's an array. to_number Returns the parsed number. to_string The JSON encoded value of the given argument. trim Removes the leading and trailing characters found in the passed in string argument. trim_left Removes the leading characters found in the passed in string argument. trim_right Removes the trailing characters found in the passed in string argument. type Returns the JavaScript type of the given argument as a string value. upper Returns the given string with all Unicode letters mapped to their upper case. values Returns the values of the provided object. zip Accepts one or more arrays as arguments and returns an array of arrays in which the i-th array contains the i-th element from each of the argument arrays. The returned array is truncated to the length of the shortest argument array."},{"location":"reference/jp/functions/#kyverno-json-functions","title":"kyverno-json functions","text":"Name Description at Returns the element in an array at the given index. concat Concatenates two strings together and returns the result. json_parse Parses a given JSON string into an object. wildcard Compares a wildcard pattern with a given string and returns if they match or not."},{"location":"reference/jp/functions/#kyverno-functions","title":"kyverno functions","text":"Name Description compare Compares two strings lexicographically. equal_fold Allows comparing two strings for equivalency where the only differences are letter cases. replace Replaces a specified number of instances of the source string with the replacement string in a parent. replace_all Replace all instances of one string with another in an overall parent string. to_upper Takes in a string and outputs the same string with all upper-case letters. to_lower Takes in a string and outputs the same string with all lower-case letters. trim Trims both ends of the source string by characters appearing in the second string. trim_prefix Trims the second string prefix from the first string if the first string starts with the prefix. split Splits the first string when the second string is found and converts it into an array. regex_replace_all Converts all parameters to string. regex_replace_all_literal Converts all parameters to string. regex_match First string is the regular exression which is compared with second input which can be a number or string. pattern_match '*' matches zero or more alphanumeric characters, '?' matches a single alphanumeric character. label_match Object arguments must be enclosed in backticks; ex. <code>{{request.object.spec.template.metadata.labels}}</code>. to_boolean It returns true or false for any string, such as 'True', 'TruE', 'False', 'FAlse', 'faLSE', etc. add Does arithmetic addition of two specified values of numbers, quantities, and durations. sum Does arithmetic addition of specified array of values of numbers, quantities, and durations. subtract Does arithmetic subtraction of two specified values of numbers, quantities, and durations. multiply Does arithmetic multiplication of two specified values of numbers, quantities, and durations. divide Divisor must be non zero. modulo Divisor must be non-zero, arguments must be integers. round Does roundoff to upto the given decimal places. base64_decode Decodes a base 64 string. base64_encode Encodes a regular, plaintext and unencoded string to base64. time_since Calculate the difference between a start and end period of time where the end may either be a static definition or the then-current time. time_now Returns current time in RFC 3339 format. time_now_utc Returns current UTC time in RFC 3339 format. path_canonicalize Normalizes or canonicalizes a given path by removing excess slashes. truncate Length argument must be enclosed in backticks; ex. \"{{request.object.metadata.name semver_compare Compares two strings which comply with the semantic versioning schema and outputs a boolean response as to the position of the second relative to the first. parse_json Decodes a valid JSON encoded string to the appropriate type. Opposite of <code>to_string</code> function. parse_yaml Decodes a valid YAML encoded string to the appropriate type provided it can be represented as JSON. lookup Returns the value corresponding to the given key/index in the given object/array. items Converts a map or array to an array of objects where each key:value is an item in the array. object_from_lists Converts a pair of lists containing keys and values to an object. random Generates a random sequence of characters. x509_decode Decodes an x.509 certificate to an object. you may also use this in conjunction with <code>base64_decode</code> jmespath function to decode a base64-encoded certificate. time_to_cron Converts a time (RFC 3339) to a cron expression (string). time_add Adds duration (second string) to a time value (first string). time_parse Changes a time value of a given layout to RFC 3339. time_utc Calcutes time in UTC from a given time in RFC 3339 format. time_diff Calculate the difference between a start and end date in RFC3339 format. time_before Checks if a time is before another time, both in RFC3339 format. time_after Checks if a time is after another time, both in RFC3339 format. time_between Checks if a time is between a start and end time, all in RFC3339 format. time_truncate Returns the result of rounding time down to a multiple of duration."},{"location":"reference/jp/functions/#chainsaw-functions","title":"chainsaw functions","text":"Name Description env Returns the value of the environment variable passed in argument. x_k8s_get Gets a resource from a Kubernetes cluster. x_k8s_list Lists resources from a Kubernetes cluster. x_k8s_exists Checks if a given resource exists in a Kubernetes cluster. x_k8s_resource_exists Checks if a given resource type is available in a Kubernetes cluster. x_k8s_server_version Returns the version of a Kubernetes cluster. x_metrics_decode Decodes metrics in the Prometheus text format. trim_space Trims leading and trailing spaces from the string passed in argument. as_string Returns the passed in argument converted into a string."},{"location":"reference/jp/examples/abs/","title":"abs","text":""},{"location":"reference/jp/examples/abs/#signature","title":"Signature","text":"<p><code>abs(number)</code></p>"},{"location":"reference/jp/examples/abs/#description","title":"Description","text":"<p>Returns the absolute value of the provided argument.</p>"},{"location":"reference/jp/examples/abs/#examples","title":"Examples","text":"<pre><code>abs(`-1`) == `1`\n</code></pre>"},{"location":"reference/jp/examples/add/","title":"add","text":""},{"location":"reference/jp/examples/add/#signature","title":"Signature","text":"<p><code>add(any, any)</code></p>"},{"location":"reference/jp/examples/add/#description","title":"Description","text":"<p>Does arithmetic addition of two specified values of numbers, quantities, and durations.</p>"},{"location":"reference/jp/examples/add/#examples","title":"Examples","text":""},{"location":"reference/jp/examples/add/#with-numbers","title":"With numbers","text":"<pre><code>add(`1`, `2`) == `3`\n</code></pre>"},{"location":"reference/jp/examples/add/#with-durations","title":"With durations","text":"<pre><code>add('1h', '2h') == '3h'\n</code></pre>"},{"location":"reference/jp/examples/add/#with-quantities","title":"With quantities","text":"<pre><code>add('1Mi', '2Mi') == '3Mi'\n</code></pre>"},{"location":"reference/jp/examples/as_string/","title":"as_string","text":""},{"location":"reference/jp/examples/as_string/#signature","title":"Signature","text":"<p><code>as_string(any)</code></p>"},{"location":"reference/jp/examples/as_string/#description","title":"Description","text":"<p>Returns the passed in argument converted into a string.</p>"},{"location":"reference/jp/examples/as_string/#examples","title":"Examples","text":"<pre><code>as_string('foobar') == 'foobar'\n</code></pre>"},{"location":"reference/jp/examples/at/","title":"at","text":""},{"location":"reference/jp/examples/at/#signature","title":"Signature","text":"<p><code>at(array, number)</code></p>"},{"location":"reference/jp/examples/at/#description","title":"Description","text":"<p>Returns the element in an array at the given index.</p>"},{"location":"reference/jp/examples/at/#examples","title":"Examples","text":"<pre><code>at([`10`,`15`,`20`], `1`) == `15`\n</code></pre>"},{"location":"reference/jp/examples/avg/","title":"avg","text":""},{"location":"reference/jp/examples/avg/#signature","title":"Signature","text":"<p><code>avg(array[number])</code></p>"},{"location":"reference/jp/examples/avg/#description","title":"Description","text":"<p>Returns the average of the elements in the provided array. An empty array will produce a return value of null.</p>"},{"location":"reference/jp/examples/avg/#examples","title":"Examples","text":"<pre><code>avg([`10`,`15`,`20`]) == `15`\n</code></pre>"},{"location":"reference/jp/examples/base64_decode/","title":"base64_decode","text":""},{"location":"reference/jp/examples/base64_decode/#signature","title":"Signature","text":"<p><code>base64_decode(string)</code></p>"},{"location":"reference/jp/examples/base64_decode/#description","title":"Description","text":"<p>Decodes a base 64 string.</p>"},{"location":"reference/jp/examples/base64_decode/#examples","title":"Examples","text":"<pre><code>base64_decode('Zm9vCg==') == 'foo'\n</code></pre>"},{"location":"reference/jp/examples/base64_encode/","title":"base64_encode","text":""},{"location":"reference/jp/examples/base64_encode/#signature","title":"Signature","text":"<p><code>base64_encode(string)</code></p>"},{"location":"reference/jp/examples/base64_encode/#description","title":"Description","text":"<p>Encodes a regular, plaintext and unencoded string to base64.</p>"},{"location":"reference/jp/examples/base64_encode/#examples","title":"Examples","text":"<pre><code>base64_encode('foo') == 'Zm9vCg=='\n</code></pre>"},{"location":"reference/jp/examples/ceil/","title":"ceil","text":""},{"location":"reference/jp/examples/ceil/#signature","title":"Signature","text":"<p><code>ceil(number)</code></p>"},{"location":"reference/jp/examples/ceil/#description","title":"Description","text":"<p>Returns the next highest integer value by rounding up if necessary.</p>"},{"location":"reference/jp/examples/ceil/#examples","title":"Examples","text":"<pre><code>ceil(`1.9`) == `2`\n</code></pre>"},{"location":"reference/jp/examples/compare/","title":"compare","text":""},{"location":"reference/jp/examples/compare/#signature","title":"Signature","text":"<p><code>compare(string, string)</code></p>"},{"location":"reference/jp/examples/compare/#description","title":"Description","text":"<p>Compares two strings lexicographically.</p>"},{"location":"reference/jp/examples/compare/#examples","title":"Examples","text":"<pre><code>compare('a', 'a') == `0`\n</code></pre> <pre><code>compare('a', 'b') == `-1`\n</code></pre> <pre><code>compare('b', 'a') == `1`\n</code></pre>"},{"location":"reference/jp/examples/concat/","title":"concat","text":""},{"location":"reference/jp/examples/concat/#signature","title":"Signature","text":"<p><code>concat(string, string)</code></p>"},{"location":"reference/jp/examples/concat/#description","title":"Description","text":"<p>Concatenates two strings together and returns the result.</p>"},{"location":"reference/jp/examples/concat/#examples","title":"Examples","text":"<pre><code>concat('foo', 'bar') == 'foobar'\n</code></pre>"},{"location":"reference/jp/examples/contains/","title":"contains","text":""},{"location":"reference/jp/examples/contains/#signature","title":"Signature","text":"<p><code>contains(array|string, any)</code></p>"},{"location":"reference/jp/examples/contains/#description","title":"Description","text":"<p>Returns <code>true</code> if the given subject contains the provided search value. If the subject is an array, this function returns <code>true</code> if one of the elements in the array is equal to the provided search value. If the provided subject is a string, this function returns <code>true</code> if the string contains the provided search argument.</p>"},{"location":"reference/jp/examples/contains/#examples","title":"Examples","text":""},{"location":"reference/jp/examples/contains/#with-strings","title":"With strings","text":"<pre><code>contains('foobar', 'bar') == `true`\n</code></pre> <pre><code>contains('foobar', 'not') == `false`\n</code></pre>"},{"location":"reference/jp/examples/contains/#with-arrays","title":"With arrays","text":"<pre><code>contains(['foo', 'bar'], 'bar') == `true`\n</code></pre> <pre><code>contains(['foo', 'bar'], 'not') == `true`\n</code></pre>"},{"location":"reference/jp/examples/divide/","title":"divide","text":""},{"location":"reference/jp/examples/divide/#signature","title":"Signature","text":"<p><code>divide(any, any)</code></p>"},{"location":"reference/jp/examples/divide/#description","title":"Description","text":"<p>Divisor must be non zero.</p>"},{"location":"reference/jp/examples/divide/#examples","title":"Examples","text":""},{"location":"reference/jp/examples/divide/#with-numbers","title":"With numbers","text":"<pre><code>divide(`1`, `2`) == `0.5`\n</code></pre>"},{"location":"reference/jp/examples/divide/#with-durations","title":"With durations","text":"<pre><code>divide('1h', '2h') == `0.5`\n</code></pre>"},{"location":"reference/jp/examples/divide/#with-quantities","title":"With quantities","text":"<pre><code>divide('1Mi', '2Mi') == `0.5`\n</code></pre>"},{"location":"reference/jp/examples/ends_with/","title":"ends_with","text":""},{"location":"reference/jp/examples/ends_with/#signature","title":"Signature","text":"<p><code>ends_with(string, string)</code></p>"},{"location":"reference/jp/examples/ends_with/#description","title":"Description","text":"<p>Reports whether the given string ends with the provided suffix argument.</p>"},{"location":"reference/jp/examples/ends_with/#examples","title":"Examples","text":"<pre><code>ends_with('foobar', 'bar') == `true`\n</code></pre> <pre><code>ends_with('foobar', 'foo') == `false`\n</code></pre>"},{"location":"reference/jp/examples/env/","title":"env","text":""},{"location":"reference/jp/examples/env/#signature","title":"Signature","text":"<p><code>env(string)</code></p>"},{"location":"reference/jp/examples/env/#description","title":"Description","text":"<p>Returns the value of the environment variable passed in argument.</p>"},{"location":"reference/jp/examples/env/#examples","title":"Examples","text":"<pre><code>env('MY_ENV_VAR') == 'foo'\n</code></pre>"},{"location":"reference/jp/examples/equal_fold/","title":"equal_fold","text":""},{"location":"reference/jp/examples/equal_fold/#signature","title":"Signature","text":"<p><code>equal_fold(string, string)</code></p>"},{"location":"reference/jp/examples/equal_fold/#description","title":"Description","text":"<p>Allows comparing two strings for equivalency where the only differences are letter cases.</p>"},{"location":"reference/jp/examples/equal_fold/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/find_first/","title":"find_first","text":""},{"location":"reference/jp/examples/find_first/#signature","title":"Signature","text":"<p><code>find_first(string, string, number, number)</code></p>"},{"location":"reference/jp/examples/find_first/#description","title":"Description","text":"<p>Returns the zero-based index of the first occurence where the substring appears in a string or null if it does not appear.</p>"},{"location":"reference/jp/examples/find_first/#examples","title":"Examples","text":"<pre><code>find_first('subject string', 'string', `0`) == `8`\n</code></pre> <pre><code>find_first('subject string', 'string', `8`) == `8`\n</code></pre> <pre><code>find_first('subject string', 'string', `9`) == null\n</code></pre> <pre><code>find_first('subject string', 'string', `0`, `14`) == `8`\n</code></pre> <pre><code>find_first('subject string', 'string', `0`, `13`) == null\n</code></pre>"},{"location":"reference/jp/examples/find_last/","title":"find_last","text":""},{"location":"reference/jp/examples/find_last/#signature","title":"Signature","text":"<p><code>find_last(string, string, number, number)</code></p>"},{"location":"reference/jp/examples/find_last/#description","title":"Description","text":"<p>Returns the zero-based index of the last occurence where the substring appears in a string or null if it does not appear.</p>"},{"location":"reference/jp/examples/find_last/#examples","title":"Examples","text":"<pre><code>find_last('subject string', 'string', `0`) == `8`\n</code></pre> <pre><code>find_last('subject string', 'string', `8`) == `8`\n</code></pre> <pre><code>find_last('subject string', 'string', `9`) == null\n</code></pre> <pre><code>find_last('subject string', 'string', `0`, `14`) == `8`\n</code></pre> <pre><code>find_last('subject string', 'string', `0`, `13`) == null\n</code></pre>"},{"location":"reference/jp/examples/floor/","title":"floor","text":""},{"location":"reference/jp/examples/floor/#signature","title":"Signature","text":"<p><code>floor(number)</code></p>"},{"location":"reference/jp/examples/floor/#description","title":"Description","text":"<p>Returns the next lowest integer value by rounding down if necessary.</p>"},{"location":"reference/jp/examples/floor/#examples","title":"Examples","text":"<pre><code>floor(`1.9`) == `1`\n</code></pre>"},{"location":"reference/jp/examples/from_items/","title":"from_items","text":""},{"location":"reference/jp/examples/from_items/#signature","title":"Signature","text":"<p><code>from_items(array[array])</code></p>"},{"location":"reference/jp/examples/from_items/#description","title":"Description","text":"<p>Returns an object from the provided array of key value pairs. This function is the inversed of the <code>items()</code> function.</p>"},{"location":"reference/jp/examples/from_items/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/group_by/","title":"group_by","text":""},{"location":"reference/jp/examples/group_by/#signature","title":"Signature","text":"<p><code>group_by(array, expref)</code></p>"},{"location":"reference/jp/examples/group_by/#description","title":"Description","text":"<p>Groups an array of objects using an expression as the group key.</p>"},{"location":"reference/jp/examples/group_by/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/items/","title":"items","text":""},{"location":"reference/jp/examples/items/#signature","title":"Signature","text":"<p><code>items(object|array, string, string)</code></p>"},{"location":"reference/jp/examples/items/#description","title":"Description","text":"<p>Converts a map or array to an array of objects where each key:value is an item in the array.</p>"},{"location":"reference/jp/examples/items/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/join/","title":"join","text":""},{"location":"reference/jp/examples/join/#signature","title":"Signature","text":"<p><code>join(string, array[string])</code></p>"},{"location":"reference/jp/examples/join/#description","title":"Description","text":"<p>Returns all of the elements from the provided array joined together using the glue argument as a separator between each.</p>"},{"location":"reference/jp/examples/join/#examples","title":"Examples","text":"<pre><code>join('/', ['a', 'b', 'c']) == 'a/b/c'\n</code></pre>"},{"location":"reference/jp/examples/json_parse/","title":"json_parse","text":""},{"location":"reference/jp/examples/json_parse/#signature","title":"Signature","text":"<p><code>json_parse(string)</code></p>"},{"location":"reference/jp/examples/json_parse/#description","title":"Description","text":"<p>Parses a given JSON string into an object.</p>"},{"location":"reference/jp/examples/json_parse/#examples","title":"Examples","text":"<pre><code>json_parse('{\"foo\":\"bar\"}') == { foo: 'bar' }\n</code></pre>"},{"location":"reference/jp/examples/keys/","title":"keys","text":""},{"location":"reference/jp/examples/keys/#signature","title":"Signature","text":"<p><code>keys(object)</code></p>"},{"location":"reference/jp/examples/keys/#description","title":"Description","text":"<p>Returns an array containing the keys of the provided object.</p>"},{"location":"reference/jp/examples/keys/#examples","title":"Examples","text":"<pre><code>keys({bar:'bam',foo:'baz'}) == ['bar','foo']\n</code></pre>"},{"location":"reference/jp/examples/label_match/","title":"label_match","text":""},{"location":"reference/jp/examples/label_match/#signature","title":"Signature","text":"<p><code>label_match(object, object)</code></p>"},{"location":"reference/jp/examples/label_match/#description","title":"Description","text":"<p>Object arguments must be enclosed in backticks; ex. <code>{{request.object.spec.template.metadata.labels}}</code>.</p>"},{"location":"reference/jp/examples/label_match/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/length/","title":"length","text":""},{"location":"reference/jp/examples/length/#signature","title":"Signature","text":"<p><code>length(string|array|object)</code></p>"},{"location":"reference/jp/examples/length/#description","title":"Description","text":"<p>Returns the length of the given argument. If the argument is a string this function returns the number of code points in the string. If the argument is an array this function returns the number of elements in the array. If the argument is an object this function returns the number of key-value pairs in the object.</p>"},{"location":"reference/jp/examples/length/#examples","title":"Examples","text":"<pre><code>length([`10`,`15`,`20`]) == `3`\n</code></pre> <pre><code>length([]) == `0`\n</code></pre> <pre><code>length(null) -&gt; error\n</code></pre>"},{"location":"reference/jp/examples/lookup/","title":"lookup","text":""},{"location":"reference/jp/examples/lookup/#signature","title":"Signature","text":"<p><code>lookup(object|array, string|number)</code></p>"},{"location":"reference/jp/examples/lookup/#description","title":"Description","text":"<p>Returns the value corresponding to the given key/index in the given object/array.</p>"},{"location":"reference/jp/examples/lookup/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/lower/","title":"lower","text":""},{"location":"reference/jp/examples/lower/#signature","title":"Signature","text":"<p><code>lower(string)</code></p>"},{"location":"reference/jp/examples/lower/#description","title":"Description","text":"<p>Returns the given string with all Unicode letters mapped to their lower case.</p>"},{"location":"reference/jp/examples/lower/#examples","title":"Examples","text":"<pre><code>lower('FOOBAR') == 'foobar'\n</code></pre>"},{"location":"reference/jp/examples/map/","title":"map","text":""},{"location":"reference/jp/examples/map/#signature","title":"Signature","text":"<p><code>map(expref, array)</code></p>"},{"location":"reference/jp/examples/map/#description","title":"Description","text":"<p>Transforms elements in a given array and returns the result.</p>"},{"location":"reference/jp/examples/map/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/max/","title":"max","text":""},{"location":"reference/jp/examples/max/#signature","title":"Signature","text":"<p><code>max(array[number]|array[string])</code></p>"},{"location":"reference/jp/examples/max/#description","title":"Description","text":"<p>Returns the highest found element in the provided array argument. An empty array will produce a return value of null.</p>"},{"location":"reference/jp/examples/max/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/max_by/","title":"max_by","text":""},{"location":"reference/jp/examples/max_by/#signature","title":"Signature","text":"<p><code>max_by(array, expref)</code></p>"},{"location":"reference/jp/examples/max_by/#description","title":"Description","text":"<p>Returns the highest found element using a custom expression to compute the associated value for each element in the input array.</p>"},{"location":"reference/jp/examples/max_by/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/merge/","title":"merge","text":""},{"location":"reference/jp/examples/merge/#signature","title":"Signature","text":"<p><code>merge(object)</code></p>"},{"location":"reference/jp/examples/merge/#description","title":"Description","text":"<p>Meges a list of objects together and returns the result.</p>"},{"location":"reference/jp/examples/merge/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/min/","title":"min","text":""},{"location":"reference/jp/examples/min/#signature","title":"Signature","text":"<p><code>min(array[number]|array[string])</code></p>"},{"location":"reference/jp/examples/min/#description","title":"Description","text":"<p>Returns the lowest found element in the provided array argument.</p>"},{"location":"reference/jp/examples/min/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/min_by/","title":"min_by","text":""},{"location":"reference/jp/examples/min_by/#signature","title":"Signature","text":"<p><code>min_by(array, expref)</code></p>"},{"location":"reference/jp/examples/min_by/#description","title":"Description","text":"<p>Returns the lowest found element using a custom expression to compute the associated value for each element in the input array.</p>"},{"location":"reference/jp/examples/min_by/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/modulo/","title":"modulo","text":""},{"location":"reference/jp/examples/modulo/#signature","title":"Signature","text":"<p><code>modulo(any, any)</code></p>"},{"location":"reference/jp/examples/modulo/#description","title":"Description","text":"<p>Divisor must be non-zero, arguments must be integers.</p>"},{"location":"reference/jp/examples/modulo/#examples","title":"Examples","text":"<pre><code>modulo(`10`, `3`) == `1`\n</code></pre>"},{"location":"reference/jp/examples/multiply/","title":"multiply","text":""},{"location":"reference/jp/examples/multiply/#signature","title":"Signature","text":"<p><code>multiply(any, any)</code></p>"},{"location":"reference/jp/examples/multiply/#description","title":"Description","text":"<p>Does arithmetic multiplication of two specified values of numbers, quantities, and durations.</p>"},{"location":"reference/jp/examples/multiply/#examples","title":"Examples","text":""},{"location":"reference/jp/examples/multiply/#with-numbers","title":"With numbers","text":"<pre><code>multiply(`1`, `2`) == `2`\n</code></pre>"},{"location":"reference/jp/examples/multiply/#with-durations","title":"With durations","text":"<pre><code>multiply('1h', `2`) == '2h'\n</code></pre>"},{"location":"reference/jp/examples/multiply/#with-quantities","title":"With quantities","text":"<pre><code>multiply('1Mi', `2`) == '2Mi'\n</code></pre>"},{"location":"reference/jp/examples/not_null/","title":"not_null","text":""},{"location":"reference/jp/examples/not_null/#signature","title":"Signature","text":"<p><code>not_null(any)</code></p>"},{"location":"reference/jp/examples/not_null/#description","title":"Description","text":"<p>Returns the first non null element in the input array.</p>"},{"location":"reference/jp/examples/not_null/#examples","title":"Examples","text":"<pre><code>not_null(null, null, 'foo') == 'foo'\n</code></pre> <pre><code>not_null(null, null) == null\n</code></pre>"},{"location":"reference/jp/examples/object_from_lists/","title":"object_from_lists","text":""},{"location":"reference/jp/examples/object_from_lists/#signature","title":"Signature","text":"<p><code>object_from_lists(array, array)</code></p>"},{"location":"reference/jp/examples/object_from_lists/#description","title":"Description","text":"<p>Converts a pair of lists containing keys and values to an object.</p>"},{"location":"reference/jp/examples/object_from_lists/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/pad_left/","title":"pad_left","text":""},{"location":"reference/jp/examples/pad_left/#signature","title":"Signature","text":"<p><code>pad_left(string, number, string)</code></p>"},{"location":"reference/jp/examples/pad_left/#description","title":"Description","text":"<p>Adds characters to the beginning of a string.</p>"},{"location":"reference/jp/examples/pad_left/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/pad_right/","title":"pad_right","text":""},{"location":"reference/jp/examples/pad_right/#signature","title":"Signature","text":"<p><code>pad_right(string, number, string)</code></p>"},{"location":"reference/jp/examples/pad_right/#description","title":"Description","text":"<p>Adds characters to the end of a string.</p>"},{"location":"reference/jp/examples/pad_right/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/parse_json/","title":"parse_json","text":""},{"location":"reference/jp/examples/parse_json/#signature","title":"Signature","text":"<p><code>parse_json(string)</code></p>"},{"location":"reference/jp/examples/parse_json/#description","title":"Description","text":"<p>Decodes a valid JSON encoded string to the appropriate type. Opposite of <code>to_string</code> function.</p>"},{"location":"reference/jp/examples/parse_json/#examples","title":"Examples","text":"<pre><code>parse_json('{\"name\":\"chainsaw\",\"version\":\"1.0.0\"}') == `{\"name\":\"chainsaw\",\"version\":\"1.0.0\"}`\n</code></pre> <pre><code>parse_json('{\"enabled\":true}').enabled == `true`\n</code></pre> <pre><code>parse_json('[1,2,3]')[1] == `2`\n</code></pre> <pre><code>parse_json('{\"items\":[{\"id\":1},{\"id\":2}]}').items[0].id == `1`\n</code></pre>"},{"location":"reference/jp/examples/parse_yaml/","title":"parse_yaml","text":""},{"location":"reference/jp/examples/parse_yaml/#signature","title":"Signature","text":"<p><code>parse_yaml(string)</code></p>"},{"location":"reference/jp/examples/parse_yaml/#description","title":"Description","text":"<p>Decodes a valid YAML encoded string to the appropriate type provided it can be represented as JSON.</p>"},{"location":"reference/jp/examples/parse_yaml/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/path_canonicalize/","title":"path_canonicalize","text":""},{"location":"reference/jp/examples/path_canonicalize/#signature","title":"Signature","text":"<p><code>path_canonicalize(string)</code></p>"},{"location":"reference/jp/examples/path_canonicalize/#description","title":"Description","text":"<p>Normalizes or canonicalizes a given path by removing excess slashes.</p>"},{"location":"reference/jp/examples/path_canonicalize/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/pattern_match/","title":"pattern_match","text":""},{"location":"reference/jp/examples/pattern_match/#signature","title":"Signature","text":"<p><code>pattern_match(string, string|number)</code></p>"},{"location":"reference/jp/examples/pattern_match/#description","title":"Description","text":"<p>'*' matches zero or more alphanumeric characters, '?' matches a single alphanumeric character.</p>"},{"location":"reference/jp/examples/pattern_match/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/random/","title":"random","text":""},{"location":"reference/jp/examples/random/#signature","title":"Signature","text":"<p><code>random(string)</code></p>"},{"location":"reference/jp/examples/random/#description","title":"Description","text":"<p>Generates a random sequence of characters.</p>"},{"location":"reference/jp/examples/random/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/regex_match/","title":"regex_match","text":""},{"location":"reference/jp/examples/regex_match/#signature","title":"Signature","text":"<p><code>regex_match(string, string|number)</code></p>"},{"location":"reference/jp/examples/regex_match/#description","title":"Description","text":"<p>First string is the regular exression which is compared with second input which can be a number or string.</p>"},{"location":"reference/jp/examples/regex_match/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/regex_replace_all/","title":"regex_replace_all","text":""},{"location":"reference/jp/examples/regex_replace_all/#signature","title":"Signature","text":"<p><code>regex_replace_all(string, string|number, string|number)</code></p>"},{"location":"reference/jp/examples/regex_replace_all/#description","title":"Description","text":"<p>Converts all parameters to string.</p>"},{"location":"reference/jp/examples/regex_replace_all/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/regex_replace_all_literal/","title":"regex_replace_all_literal","text":""},{"location":"reference/jp/examples/regex_replace_all_literal/#signature","title":"Signature","text":"<p><code>regex_replace_all_literal(string, string|number, string|number)</code></p>"},{"location":"reference/jp/examples/regex_replace_all_literal/#description","title":"Description","text":"<p>Converts all parameters to string.</p>"},{"location":"reference/jp/examples/regex_replace_all_literal/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/replace/","title":"replace","text":""},{"location":"reference/jp/examples/replace/#signature","title":"Signature","text":"<p><code>replace(string, string, string, number)</code></p>"},{"location":"reference/jp/examples/replace/#description","title":"Description","text":"<p>Replaces a specified number of instances of the source string with the replacement string in a parent.</p>"},{"location":"reference/jp/examples/replace/#examples","title":"Examples","text":"<pre><code>replace('foobar', 'oo', 'ii') == 'fiibar'\n</code></pre> <pre><code>replace('foobar', 'o', 'i', `1`) == 'fiobar'\n</code></pre>"},{"location":"reference/jp/examples/replace_all/","title":"replace_all","text":""},{"location":"reference/jp/examples/replace_all/#signature","title":"Signature","text":"<p><code>replace_all(string, string, string)</code></p>"},{"location":"reference/jp/examples/replace_all/#description","title":"Description","text":"<p>Replace all instances of one string with another in an overall parent string.</p>"},{"location":"reference/jp/examples/replace_all/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/reverse/","title":"reverse","text":""},{"location":"reference/jp/examples/reverse/#signature","title":"Signature","text":"<p><code>reverse(array|string)</code></p>"},{"location":"reference/jp/examples/reverse/#description","title":"Description","text":"<p>Reverses the input string or array and returns the result.</p>"},{"location":"reference/jp/examples/reverse/#examples","title":"Examples","text":"<pre><code>reverse('abcd') == 'dcba'\n</code></pre> <pre><code>reverse([`1`, `2`, `3`, `4`]) == [`4`, `3`, `2`, `1`]\n</code></pre>"},{"location":"reference/jp/examples/round/","title":"round","text":""},{"location":"reference/jp/examples/round/#signature","title":"Signature","text":"<p><code>round(number, number)</code></p>"},{"location":"reference/jp/examples/round/#description","title":"Description","text":"<p>Does roundoff to upto the given decimal places.</p>"},{"location":"reference/jp/examples/round/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/semver_compare/","title":"semver_compare","text":""},{"location":"reference/jp/examples/semver_compare/#signature","title":"Signature","text":"<p><code>semver_compare(string, string)</code></p>"},{"location":"reference/jp/examples/semver_compare/#description","title":"Description","text":"<p>Compares two strings which comply with the semantic versioning schema and outputs a boolean response as to the position of the second relative to the first.</p>"},{"location":"reference/jp/examples/semver_compare/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/sort/","title":"sort","text":""},{"location":"reference/jp/examples/sort/#signature","title":"Signature","text":"<p><code>sort(array[string]|array[number])</code></p>"},{"location":"reference/jp/examples/sort/#description","title":"Description","text":"<p>This function accepts an array argument and returns the sorted elements as an array.</p>"},{"location":"reference/jp/examples/sort/#examples","title":"Examples","text":"<pre><code>sort(['b', 'a', 'c']) == ['a', 'b', 'c']\n</code></pre>"},{"location":"reference/jp/examples/sort_by/","title":"sort_by","text":""},{"location":"reference/jp/examples/sort_by/#signature","title":"Signature","text":"<p><code>sort_by(array, expref)</code></p>"},{"location":"reference/jp/examples/sort_by/#description","title":"Description","text":"<p>This function accepts an array argument and returns the sorted elements as an array using a custom expression to compute the associated value for each element.</p>"},{"location":"reference/jp/examples/sort_by/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/split/","title":"split","text":""},{"location":"reference/jp/examples/split/#signature","title":"Signature","text":"<p><code>split(string, string)</code></p>"},{"location":"reference/jp/examples/split/#description","title":"Description","text":"<p>Splits the first string when the second string is found and converts it into an array.</p>"},{"location":"reference/jp/examples/split/#examples","title":"Examples","text":"<pre><code>split('average|-|min|-|max|-|mean|-|median', '|-|', `3`) == ['average', 'min', 'max', 'mean|-|median']\n</code></pre>"},{"location":"reference/jp/examples/starts_with/","title":"starts_with","text":""},{"location":"reference/jp/examples/starts_with/#signature","title":"Signature","text":"<p><code>starts_with(string, string)</code></p>"},{"location":"reference/jp/examples/starts_with/#description","title":"Description","text":"<p>Reports whether the input string begins with the provided string prefix argument.</p>"},{"location":"reference/jp/examples/starts_with/#examples","title":"Examples","text":"<pre><code>starts_with('foobar', 'foo') == `true`\n</code></pre> <pre><code>starts_with('foobar', 'bar') == `false`\n</code></pre>"},{"location":"reference/jp/examples/subtract/","title":"subtract","text":""},{"location":"reference/jp/examples/subtract/#signature","title":"Signature","text":"<p><code>subtract(any, any)</code></p>"},{"location":"reference/jp/examples/subtract/#description","title":"Description","text":"<p>Does arithmetic subtraction of two specified values of numbers, quantities, and durations.</p>"},{"location":"reference/jp/examples/subtract/#examples","title":"Examples","text":""},{"location":"reference/jp/examples/subtract/#with-numbers","title":"With numbers","text":"<pre><code>subtract(`2`, `1`) == `1`\n</code></pre>"},{"location":"reference/jp/examples/subtract/#with-durations","title":"With durations","text":"<pre><code>subtract('2h', '1h') == '1h'\n</code></pre>"},{"location":"reference/jp/examples/subtract/#with-quantities","title":"With quantities","text":"<pre><code>subtract('2Mi', '1Mi') == '1Mi'\n</code></pre>"},{"location":"reference/jp/examples/sum/","title":"sum","text":""},{"location":"reference/jp/examples/sum/#signature","title":"Signature","text":"<p><code>sum(array)</code></p>"},{"location":"reference/jp/examples/sum/#description","title":"Description","text":"<p>Does arithmetic addition of specified array of values of numbers, quantities, and durations.</p>"},{"location":"reference/jp/examples/sum/#examples","title":"Examples","text":"<pre><code>sum(`[]`) == `0`\n</code></pre> <pre><code>sum([`10`, `15`]) == `25`\n</code></pre>"},{"location":"reference/jp/examples/time_add/","title":"time_add","text":""},{"location":"reference/jp/examples/time_add/#signature","title":"Signature","text":"<p><code>time_add(string, string)</code></p>"},{"location":"reference/jp/examples/time_add/#description","title":"Description","text":"<p>Adds duration (second string) to a time value (first string).</p>"},{"location":"reference/jp/examples/time_add/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_after/","title":"time_after","text":""},{"location":"reference/jp/examples/time_after/#signature","title":"Signature","text":"<p><code>time_after(string, string)</code></p>"},{"location":"reference/jp/examples/time_after/#description","title":"Description","text":"<p>Checks if a time is after another time, both in RFC3339 format.</p>"},{"location":"reference/jp/examples/time_after/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_before/","title":"time_before","text":""},{"location":"reference/jp/examples/time_before/#signature","title":"Signature","text":"<p><code>time_before(string, string)</code></p>"},{"location":"reference/jp/examples/time_before/#description","title":"Description","text":"<p>Checks if a time is before another time, both in RFC3339 format.</p>"},{"location":"reference/jp/examples/time_before/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_between/","title":"time_between","text":""},{"location":"reference/jp/examples/time_between/#signature","title":"Signature","text":"<p><code>time_between(string, string, string)</code></p>"},{"location":"reference/jp/examples/time_between/#description","title":"Description","text":"<p>Checks if a time is between a start and end time, all in RFC3339 format.</p>"},{"location":"reference/jp/examples/time_between/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_diff/","title":"time_diff","text":""},{"location":"reference/jp/examples/time_diff/#signature","title":"Signature","text":"<p><code>time_diff(string, string)</code></p>"},{"location":"reference/jp/examples/time_diff/#description","title":"Description","text":"<p>Calculate the difference between a start and end date in RFC3339 format.</p>"},{"location":"reference/jp/examples/time_diff/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_now/","title":"time_now","text":""},{"location":"reference/jp/examples/time_now/#signature","title":"Signature","text":"<p><code>time_now()</code></p>"},{"location":"reference/jp/examples/time_now/#description","title":"Description","text":"<p>Returns current time in RFC 3339 format.</p>"},{"location":"reference/jp/examples/time_now/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_now_utc/","title":"time_now_utc","text":""},{"location":"reference/jp/examples/time_now_utc/#signature","title":"Signature","text":"<p><code>time_now_utc()</code></p>"},{"location":"reference/jp/examples/time_now_utc/#description","title":"Description","text":"<p>Returns current UTC time in RFC 3339 format.</p>"},{"location":"reference/jp/examples/time_now_utc/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_parse/","title":"time_parse","text":""},{"location":"reference/jp/examples/time_parse/#signature","title":"Signature","text":"<p><code>time_parse(string, string)</code></p>"},{"location":"reference/jp/examples/time_parse/#description","title":"Description","text":"<p>Changes a time value of a given layout to RFC 3339.</p>"},{"location":"reference/jp/examples/time_parse/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_since/","title":"time_since","text":""},{"location":"reference/jp/examples/time_since/#signature","title":"Signature","text":"<p><code>time_since(string, string, string)</code></p>"},{"location":"reference/jp/examples/time_since/#description","title":"Description","text":"<p>Calculate the difference between a start and end period of time where the end may either be a static definition or the then-current time.</p>"},{"location":"reference/jp/examples/time_since/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_to_cron/","title":"time_to_cron","text":""},{"location":"reference/jp/examples/time_to_cron/#signature","title":"Signature","text":"<p><code>time_to_cron(string)</code></p>"},{"location":"reference/jp/examples/time_to_cron/#description","title":"Description","text":"<p>Converts a time (RFC 3339) to a cron expression (string).</p>"},{"location":"reference/jp/examples/time_to_cron/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_truncate/","title":"time_truncate","text":""},{"location":"reference/jp/examples/time_truncate/#signature","title":"Signature","text":"<p><code>time_truncate(string, string)</code></p>"},{"location":"reference/jp/examples/time_truncate/#description","title":"Description","text":"<p>Returns the result of rounding time down to a multiple of duration.</p>"},{"location":"reference/jp/examples/time_truncate/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/time_utc/","title":"time_utc","text":""},{"location":"reference/jp/examples/time_utc/#signature","title":"Signature","text":"<p><code>time_utc(string)</code></p>"},{"location":"reference/jp/examples/time_utc/#description","title":"Description","text":"<p>Calcutes time in UTC from a given time in RFC 3339 format.</p>"},{"location":"reference/jp/examples/time_utc/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/to_array/","title":"to_array","text":""},{"location":"reference/jp/examples/to_array/#signature","title":"Signature","text":"<p><code>to_array(any)</code></p>"},{"location":"reference/jp/examples/to_array/#description","title":"Description","text":"<p>Returns a one element array containing the passed in argument, or the passed in value if it's an array.</p>"},{"location":"reference/jp/examples/to_array/#examples","title":"Examples","text":"<pre><code>to_array(`true`) == [`true`]\n</code></pre> <pre><code>to_array([`10`, `15`, `20`]) == [`10`, `15`, `20`]\n</code></pre> <pre><code>to_array(`[]`) == []\n</code></pre>"},{"location":"reference/jp/examples/to_boolean/","title":"to_boolean","text":""},{"location":"reference/jp/examples/to_boolean/#signature","title":"Signature","text":"<p><code>to_boolean(string)</code></p>"},{"location":"reference/jp/examples/to_boolean/#description","title":"Description","text":"<p>It returns true or false for any string, such as 'True', 'TruE', 'False', 'FAlse', 'faLSE', etc.</p>"},{"location":"reference/jp/examples/to_boolean/#examples","title":"Examples","text":"<pre><code>to_boolean('true') == `true`\n</code></pre> <pre><code>to_boolean('True') == `true`\n</code></pre> <pre><code>to_boolean('TRUE') == `true`\n</code></pre> <pre><code>to_boolean('false') == `false`\n</code></pre> <pre><code>to_boolean('False') == `false`\n</code></pre> <pre><code>to_boolean('FALSE') == `false`\n</code></pre>"},{"location":"reference/jp/examples/to_lower/","title":"to_lower","text":""},{"location":"reference/jp/examples/to_lower/#signature","title":"Signature","text":"<p><code>to_lower(string)</code></p>"},{"location":"reference/jp/examples/to_lower/#description","title":"Description","text":"<p>Takes in a string and outputs the same string with all lower-case letters.</p>"},{"location":"reference/jp/examples/to_lower/#examples","title":"Examples","text":"<pre><code>lower('FOOBAR') == 'foobar'\n</code></pre>"},{"location":"reference/jp/examples/to_number/","title":"to_number","text":""},{"location":"reference/jp/examples/to_number/#signature","title":"Signature","text":"<p><code>to_number(any)</code></p>"},{"location":"reference/jp/examples/to_number/#description","title":"Description","text":"<p>Returns the parsed number.</p>"},{"location":"reference/jp/examples/to_number/#examples","title":"Examples","text":"<pre><code>to_number('1.0') == `1`\n</code></pre> <pre><code>to_number(`1.0`) == `1`\n</code></pre> <pre><code>to_number(`false`) == null\n</code></pre>"},{"location":"reference/jp/examples/to_string/","title":"to_string","text":""},{"location":"reference/jp/examples/to_string/#signature","title":"Signature","text":"<p><code>to_string(any)</code></p>"},{"location":"reference/jp/examples/to_string/#description","title":"Description","text":"<p>The JSON encoded value of the given argument.</p>"},{"location":"reference/jp/examples/to_string/#examples","title":"Examples","text":"<pre><code>to_string(`2`) == '2'\n</code></pre> <pre><code>to_string('foobar') == 'foobar'\n</code></pre> <pre><code>to_string(null) == 'null'\n</code></pre> <pre><code>to_string({bar:'bam',foo:'baz'}) == '{\"bar\":\"bam\",\"foo\":\"baz\"}'\n</code></pre>"},{"location":"reference/jp/examples/to_upper/","title":"to_upper","text":""},{"location":"reference/jp/examples/to_upper/#signature","title":"Signature","text":"<p><code>to_upper(string)</code></p>"},{"location":"reference/jp/examples/to_upper/#description","title":"Description","text":"<p>Takes in a string and outputs the same string with all upper-case letters.</p>"},{"location":"reference/jp/examples/to_upper/#examples","title":"Examples","text":"<pre><code>upper('foobar') == 'FOOBAR'\n</code></pre>"},{"location":"reference/jp/examples/trim/","title":"trim","text":""},{"location":"reference/jp/examples/trim/#signature","title":"Signature","text":"<p><code>trim(string, string)</code></p>"},{"location":"reference/jp/examples/trim/#description","title":"Description","text":"<p>Trims both ends of the source string by characters appearing in the second string.</p>"},{"location":"reference/jp/examples/trim/#examples","title":"Examples","text":"<pre><code>trim(' foobar ', 'fbr ') == 'ooba'\n</code></pre> <pre><code>trim(' foobar ', 'fbr') == ' foobar '\n</code></pre>"},{"location":"reference/jp/examples/trim_left/","title":"trim_left","text":""},{"location":"reference/jp/examples/trim_left/#signature","title":"Signature","text":"<p><code>trim_left(string, string)</code></p>"},{"location":"reference/jp/examples/trim_left/#description","title":"Description","text":"<p>Removes the leading characters found in the passed in string argument.</p>"},{"location":"reference/jp/examples/trim_left/#examples","title":"Examples","text":"<pre><code>trim_left(' foobar ', 'fbr ') == 'oobar '\n</code></pre> <pre><code>trim_left(' foobar ', 'fbr') == ' foobar '\n</code></pre>"},{"location":"reference/jp/examples/trim_prefix/","title":"trim_prefix","text":""},{"location":"reference/jp/examples/trim_prefix/#signature","title":"Signature","text":"<p><code>trim_prefix(string, string)</code></p>"},{"location":"reference/jp/examples/trim_prefix/#description","title":"Description","text":"<p>Trims the second string prefix from the first string if the first string starts with the prefix.</p>"},{"location":"reference/jp/examples/trim_prefix/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/trim_right/","title":"trim_right","text":""},{"location":"reference/jp/examples/trim_right/#signature","title":"Signature","text":"<p><code>trim_right(string, string)</code></p>"},{"location":"reference/jp/examples/trim_right/#description","title":"Description","text":"<p>Removes the trailing characters found in the passed in string argument.</p>"},{"location":"reference/jp/examples/trim_right/#examples","title":"Examples","text":"<pre><code>trim_right(' foobar ', 'fbr ') == ' fooba'\n</code></pre> <pre><code>trim_right(' foobar ', 'fbr') == ' foobar '\n</code></pre>"},{"location":"reference/jp/examples/trim_space/","title":"trim_space","text":""},{"location":"reference/jp/examples/trim_space/#signature","title":"Signature","text":"<p><code>trim_space(string)</code></p>"},{"location":"reference/jp/examples/trim_space/#description","title":"Description","text":"<p>Trims leading and trailing spaces from the string passed in argument.</p>"},{"location":"reference/jp/examples/trim_space/#examples","title":"Examples","text":"<pre><code>trim_space('    foobar  ') == 'foobar'\n</code></pre>"},{"location":"reference/jp/examples/truncate/","title":"truncate","text":""},{"location":"reference/jp/examples/truncate/#signature","title":"Signature","text":"<p><code>truncate(string, number)</code></p>"},{"location":"reference/jp/examples/truncate/#description","title":"Description","text":"<p>Length argument must be enclosed in backticks; ex. \"{{request.object.metadata.name | truncate(@, <code>9</code>)}}\".</p>"},{"location":"reference/jp/examples/truncate/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/type/","title":"type","text":""},{"location":"reference/jp/examples/type/#signature","title":"Signature","text":"<p><code>type(any)</code></p>"},{"location":"reference/jp/examples/type/#description","title":"Description","text":"<p>Returns the JavaScript type of the given argument as a string value.</p>"},{"location":"reference/jp/examples/type/#examples","title":"Examples","text":"<pre><code>type(`false`) == 'boolean'\n</code></pre> <pre><code>type(null) == 'null'\n</code></pre> <pre><code>type('foobar') == 'string'\n</code></pre>"},{"location":"reference/jp/examples/upper/","title":"upper","text":""},{"location":"reference/jp/examples/upper/#signature","title":"Signature","text":"<p><code>upper(string)</code></p>"},{"location":"reference/jp/examples/upper/#description","title":"Description","text":"<p>Returns the given string with all Unicode letters mapped to their upper case.</p>"},{"location":"reference/jp/examples/upper/#examples","title":"Examples","text":"<pre><code>upper('foobar') == 'FOOBAR'\n</code></pre>"},{"location":"reference/jp/examples/values/","title":"values","text":""},{"location":"reference/jp/examples/values/#signature","title":"Signature","text":"<p><code>values(object)</code></p>"},{"location":"reference/jp/examples/values/#description","title":"Description","text":"<p>Returns the values of the provided object.</p>"},{"location":"reference/jp/examples/values/#examples","title":"Examples","text":"<pre><code>values({bar:'bam',foo:'baz'}) == ['bam','baz']\n</code></pre>"},{"location":"reference/jp/examples/wildcard/","title":"wildcard","text":""},{"location":"reference/jp/examples/wildcard/#signature","title":"Signature","text":"<p><code>wildcard(string, string)</code></p>"},{"location":"reference/jp/examples/wildcard/#description","title":"Description","text":"<p>Compares a wildcard pattern with a given string and returns if they match or not.</p>"},{"location":"reference/jp/examples/wildcard/#examples","title":"Examples","text":"<pre><code>wildcard('foo*', 'foobar') == `true`\n</code></pre> <pre><code>wildcard('fooba?', 'foobar') == `true`\n</code></pre>"},{"location":"reference/jp/examples/x509_decode/","title":"x509_decode","text":""},{"location":"reference/jp/examples/x509_decode/#signature","title":"Signature","text":"<p><code>x509_decode(string)</code></p>"},{"location":"reference/jp/examples/x509_decode/#description","title":"Description","text":"<p>Decodes an x.509 certificate to an object. you may also use this in conjunction with <code>base64_decode</code> jmespath function to decode a base64-encoded certificate.</p>"},{"location":"reference/jp/examples/x509_decode/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/x_k8s_exists/","title":"x_k8s_exists","text":""},{"location":"reference/jp/examples/x_k8s_exists/#signature","title":"Signature","text":"<p><code>x_k8s_exists(any, string, string, string, string)</code></p>"},{"location":"reference/jp/examples/x_k8s_exists/#description","title":"Description","text":"<p>Checks if a given resource exists in a Kubernetes cluster.</p>"},{"location":"reference/jp/examples/x_k8s_exists/#examples","title":"Examples","text":"<p>Clustered resources</p> <p>For clustered resources, you can leave the namespace empty <code>''</code>.</p> <pre><code># `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_exists($client, 'apps/v1', 'Deployment', 'crossplane-system', 'crossplane')\n</code></pre>"},{"location":"reference/jp/examples/x_k8s_get/","title":"x_k8s_get","text":""},{"location":"reference/jp/examples/x_k8s_get/#signature","title":"Signature","text":"<p><code>x_k8s_get(any, string, string, string, string)</code></p>"},{"location":"reference/jp/examples/x_k8s_get/#description","title":"Description","text":"<p>Gets a resource from a Kubernetes cluster.</p>"},{"location":"reference/jp/examples/x_k8s_get/#examples","title":"Examples","text":"<p>Clustered resources</p> <p>For clustered resources, you can leave the namespace empty <code>''</code>.</p> <pre><code># `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_get($client, 'apps/v1', 'Deployment', 'crossplane-system', 'crossplane')\n</code></pre>"},{"location":"reference/jp/examples/x_k8s_list/","title":"x_k8s_list","text":""},{"location":"reference/jp/examples/x_k8s_list/#signature","title":"Signature","text":"<p><code>x_k8s_list(any, string, string, string)</code></p>"},{"location":"reference/jp/examples/x_k8s_list/#description","title":"Description","text":"<p>Lists resources from a Kubernetes cluster.</p>"},{"location":"reference/jp/examples/x_k8s_list/#examples","title":"Examples","text":"<p>Clustered resources</p> <p>For clustered resources, you can leave the namespace empty <code>''</code>.</p> <pre><code># `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_list($client, 'apps/v1', 'Deployment', 'crossplane-system')\n</code></pre>"},{"location":"reference/jp/examples/x_k8s_resource_exists/","title":"x_k8s_resource_exists","text":""},{"location":"reference/jp/examples/x_k8s_resource_exists/#signature","title":"Signature","text":"<p><code>x_k8s_resource_exists(any, string, string)</code></p>"},{"location":"reference/jp/examples/x_k8s_resource_exists/#description","title":"Description","text":"<p>Checks if a given resource type is available in a Kubernetes cluster.</p>"},{"location":"reference/jp/examples/x_k8s_resource_exists/#examples","title":"Examples","text":"<p>Clustered resources</p> <p>For clustered resources, you can leave the namespace empty <code>''</code>.</p> <pre><code># `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_resource_exists($client, 'apps/v1', 'Deployment')\n</code></pre>"},{"location":"reference/jp/examples/x_k8s_server_version/","title":"x_k8s_server_version","text":""},{"location":"reference/jp/examples/x_k8s_server_version/#signature","title":"Signature","text":"<p><code>x_k8s_server_version(any)</code></p>"},{"location":"reference/jp/examples/x_k8s_server_version/#description","title":"Description","text":"<p>Returns the version of a Kubernetes cluster.</p>"},{"location":"reference/jp/examples/x_k8s_server_version/#examples","title":"Examples","text":"<pre><code># `$client` is a binding pointing to a Kubernetes client\n\nx_k8s_server_version($client)\n</code></pre>"},{"location":"reference/jp/examples/x_metrics_decode/","title":"x_metrics_decode","text":""},{"location":"reference/jp/examples/x_metrics_decode/#signature","title":"Signature","text":"<p><code>x_metrics_decode(string)</code></p>"},{"location":"reference/jp/examples/x_metrics_decode/#description","title":"Description","text":"<p>Decodes metrics in the Prometheus text format.</p>"},{"location":"reference/jp/examples/x_metrics_decode/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"reference/jp/examples/zip/","title":"zip","text":""},{"location":"reference/jp/examples/zip/#signature","title":"Signature","text":"<p><code>zip(array, array)</code></p>"},{"location":"reference/jp/examples/zip/#description","title":"Description","text":"<p>Accepts one or more arrays as arguments and returns an array of arrays in which the i-th array contains the i-th element from each of the argument arrays. The returned array is truncated to the length of the shortest argument array.</p>"},{"location":"reference/jp/examples/zip/#examples","title":"Examples","text":"<pre><code>zip(['a', 'b'], [`1`, `2`]) == [['a', `1`], ['b', `2`]]\n</code></pre>"},{"location":"step/","title":"What is a test step?","text":"<p>A test step is made of four main components used to determine the actions Chainsaw will perform when executing the step.</p> <ol> <li>The try statement (required)</li> <li>The catch statement (optional)</li> <li>The finally statement (optional)</li> <li>The cleanup statement (optional)</li> </ol>"},{"location":"step/#syntax","title":"Syntax","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  steps:\n    # `try` defines operations to execute in the step\n  - try: [...]\n    # `catch` defines operations to execute when the step fails\n    catch: [...]\n    # `finally` defines operations to execute at the end of the step\n    finally: [...]\n    # `cleanup` defines operations to execute at the end of the test\n    cleanup: [...]\n</code></pre>"},{"location":"step/#reference","title":"Reference","text":"<p>The full structure of the <code>TestStepSpec</code> is documented here.</p>"},{"location":"step/#lifecycle","title":"Lifecycle","text":""},{"location":"step/#try-catch-finally-flow","title":"Try, Catch, Finally flow","text":"<p>Operations defined in the <code>try</code> block are executed first, then:</p> <ul> <li>If an operation fails to execute, Chainsaw won't execute the remaining operations and will execute all operations defined in the <code>catch</code> block instead (if any).</li> <li>If all operations succeed, Chainsaw will NOT execute operations defined in the <code>catch</code> block (if any).</li> <li>Regardless of the step outcome (success or failure), Chainsaw will execute all operations defined in the <code>finally</code> block (if any).</li> </ul> <p>Tip</p> <p>Note that all operations coming from the <code>catch</code> or <code>finally</code> blocks are executed. If one operation fails, Chainsaw will mark the test as failed and continue executing with the next operations.</p>"},{"location":"step/#without-failure","title":"Without failure","text":"<pre><code>sequenceDiagram\n    autonumber\n\n    participant S as Step N\n\n    box Try block\n    participant T1 as Op 1\n    participant T2 as Op N\n    end\n    box Catch block\n    end\n    box Finally block\n    participant F1 as Op 1\n    participant F2 as Op N\n    end\n    participant S1 as Step N+1\n\n    S  --&gt;&gt; T1 : try\n    T1 -&gt;&gt;  T2 : success\n    T2 --&gt;&gt; S  : done\n    S  --&gt;&gt; F1 : finally\n    F1 -&gt;&gt;  F2 : done\n    F2 --&gt;&gt; S  : done\n    S  --&gt;&gt; S1 : next step</code></pre> <ol> <li>Step starts by executing operations in the <code>try</code> block</li> <li>Operations in the <code>try</code> block execute sequentially</li> <li>All operations in the <code>try</code> block terminate</li> <li>Step starts executing operations in the <code>finally</code> block</li> <li>Operations in the <code>finally</code> block execute sequentially</li> <li>All operations in the <code>finally</code> block terminate</li> <li>Next step starts executing</li> </ol>"},{"location":"step/#with-failure","title":"With failure","text":"<pre><code>sequenceDiagram\n    autonumber\n\n    participant S as Step N\n\n    box Try block\n    participant T1 as Op 1\n    participant T2 as Op N\n    end\n    box Catch block\n    participant C1 as Op 1\n    participant C2 as Op N\n    end\n    box Finally block\n    participant F1 as Op 1\n    participant F2 as Op N\n    end\n\n    S  --&gt;&gt; T1 : try\n    T1 -&gt;&gt;  T2 : success\n    T2 --&gt;&gt; S  : error\n    S  --&gt;&gt; C1 : catch\n    C1 -&gt;&gt;  C2 : done\n    C2 --&gt;&gt; S  : done\n    S  --&gt;&gt; F1 : finally\n    F1 -&gt;&gt;  F2 : done\n    F2 --&gt;&gt; S  : done</code></pre> <ol> <li>Step starts by executing operations in the <code>try</code> block</li> <li>Operations in the <code>try</code> block execute sequentially until an error happens</li> <li>Operations in the <code>try</code> block stop when an error occurs</li> <li>Step starts executing operations in the <code>catch</code> block</li> <li>Operations in the <code>catch</code> block execute sequentially</li> <li>All operations in the <code>catch</code> block terminate</li> <li>Step starts executing operations in the <code>finally</code> block</li> <li>Operations in the <code>finally</code> block execute sequentially</li> <li>All operations in the <code>finally</code> block terminate</li> </ol>"},{"location":"step/#cleanup","title":"Cleanup","text":"<p>In addition to <code>try</code>, <code>catch</code> and <code>finally</code> blocks, the <code>cleanup</code> block of steps is better illustrated in the Test lifecycle diagrams.</p>"},{"location":"step/catch/","title":"catch","text":"<p>A <code>catch</code> statement is also a sequence of operations.</p> <p>Operations contained in a <code>catch</code> statement will be executed only if the step failed when executing the operations in the step's try statement.</p> <p>Tip</p> <p>All operations of a <code>catch</code> statement will be executed regardless of the success or failure of each of them.</p>"},{"location":"step/catch/#operations","title":"Operations","text":"<p>A <code>catch</code> statement supports only the following operations:</p> <ul> <li>Command</li> <li>Delete</li> <li>Describe</li> <li>Events</li> <li>Get</li> <li>Pod logs</li> <li>Script</li> <li>Sleep</li> <li>Wait</li> </ul>"},{"location":"step/catch/#inheritance","title":"Inheritance","text":"<p>Under certain circumstances, it can be useful to configure catch blocks at a higher level than the step grain. At the test or configuration level.</p> <p>This allows for declaring common catch statements we want to execute when an error occurs. Those catch blocks are combined to produce the final catch block in the following order:</p> <ol> <li>catch statements from the configuration level are executed first (if any)</li> <li>catch statements from the test level are executed next (if any)</li> <li>catch statements from the step level are executed last (if any)</li> </ol>"},{"location":"step/cleanup/","title":"cleanup","text":"<p>A <code>cleanup</code> statement is similar to a finally statement but will execute after the test finishes executing, while <code>finally</code> executes after the step finishes executing.</p> <p>Tip</p> <p>All operations of a <code>cleanup</code> statement will be executed regardless of the success or failure of each of them.</p>"},{"location":"step/cleanup/#operations","title":"Operations","text":"<p>A <code>cleanup</code> statement supports only the following operations:</p> <ul> <li>Command</li> <li>Delete</li> <li>Describe</li> <li>Events</li> <li>Get</li> <li>Pod logs</li> <li>Script</li> <li>Sleep</li> <li>Wait</li> </ul>"},{"location":"step/finally/","title":"finally","text":"<p>A <code>finally</code> statement is similar to a catch statement but will always execute after the try and eventual catch statements finished executing regardless of the success or failure of the test step.</p> <p>Tip</p> <p>All operations of a <code>finally</code> statement will be executed regardless of the success or failure of each of them.</p>"},{"location":"step/finally/#operations","title":"Operations","text":"<p>A <code>finally</code> statement supports only the following operations:</p> <ul> <li>Command</li> <li>Delete</li> <li>Describe</li> <li>Events</li> <li>Get</li> <li>Pod logs</li> <li>Script</li> <li>Sleep</li> <li>Wait</li> </ul>"},{"location":"step/try/","title":"try","text":"<p>A <code>try</code> statement is a sequence of operations executed in the same order they are declared. If an operation fails the entire step is considered failed.</p>"},{"location":"step/try/#operations","title":"Operations","text":"<p>A <code>try</code> statement supports all operations:</p> <ul> <li>Apply</li> <li>Assert</li> <li>Command</li> <li>Create</li> <li>Delete</li> <li>Error</li> <li>Patch</li> <li>Script</li> <li>Sleep</li> <li>Update</li> <li>Wait</li> </ul>"},{"location":"test/","title":"Writing Chainsaw tests","text":"<p>This documentation focuses on providing a breakdown of the Chainsaw test structure and how to use it.</p>"},{"location":"test/#what-is-a-test","title":"What is a test?","text":"<p>To put it simply, a test can be represented as an ordered sequence of test steps.</p> <p>In turn, a test step can be represented as an ordered sequence of operations.</p> <ul> <li>When an operation fails the test is considered failed</li> <li>If all operations succeed the test is considered successful</li> </ul>"},{"location":"test/#definition-approach","title":"Definition approach","text":"<p>Chainsaw supports two different test definition approaches:</p> <p>Tip</p> <p>While Chainsaw supports two test definition approaches, we strongly recommend the explicit one.</p> <ul> <li>The explicit approach (strongly recommended)</li> <li>The conventional approach</li> </ul>"},{"location":"test/#general-concepts","title":"General concepts","text":"<p>The concepts below are at the heart of Chainsaw:</p> <ul> <li>Inheritance</li> <li>Test namespace</li> <li>Bindings</li> <li>Templating</li> <li>Outputs</li> <li>References</li> <li>Operation checks</li> </ul>"},{"location":"test/#test-and-step-specs","title":"Test and Step specs","text":"<p>Browse the test and step specs to learn all the details and options:</p> <ul> <li>Test spec</li> <li>Test step spec</li> </ul>"},{"location":"test/conventional/","title":"Conventional approach","text":"<p>Warning</p> <p>While Chainsaw supports the conventional approach, we strongly recommend the explicit one.</p> <p>If you are new to Chainsaw we suggest you skip this section and jump directly to the Explicit approach.</p>"},{"location":"test/conventional/#introduction","title":"Introduction","text":"<p>The conventional approach is the simplest and less verbose one.</p> <p>You provide bare Kubernetes resource manifests and Chainsaw will use those manifests to create, update, or assert expectations against a cluster.</p>"},{"location":"test/conventional/#limitations","title":"Limitations","text":"<p>While this syntax is simple, it suffers lots of limitations. It doesn't support deletion operations, commands, scripts, and all Chainsaw helpers.</p> <p>It is also impossible to specify additional configuration per test, step or individual operation (timeouts, additional verifications, etc...), making this approach highly limited.</p> <p>It also relies a lot on file naming conventions which can be error prone.</p> <p>Finally, this approach doesn't encourage reusing files across tests and leads to duplication, making maintenance harder.</p>"},{"location":"test/conventional/#file-naming-convention","title":"File naming convention","text":"<p>Manifest files must follow a specific naming convention: <pre><code>&lt;step index&gt;-&lt;name|assert|errors&gt;.yaml\n</code></pre></p> <p>As an example, <code>00-configmap.yaml</code>, <code>01-assert.yaml</code> and <code>02-errors.yaml</code> are valid file names.</p>"},{"location":"test/conventional/#assembling-steps","title":"Assembling steps","text":"<p>It's perfectly valid to have multiple files for the same step.</p> <p>Let's say we have the following files <code>00-resources.yaml</code>, <code>00-more-resources.yaml</code>, <code>00-assert.yaml</code> and <code>00-errors.yaml</code>:</p> <ul> <li><code>00-resources.yaml</code> and <code>00-more-resources.yaml</code> contain resources that will be applied in step <code>00</code></li> <li><code>00-assert.yaml</code> contains assert statements in step <code>00</code></li> <li><code>00-errors.yaml</code> contains error statements in step <code>00</code></li> </ul> <p>With the four files above, Chainsaw will assemble a test step made of the combination of all those files.</p>"},{"location":"test/conventional/#loading-process","title":"Loading process","text":"<p>The logic to determine the content of a step is always:</p> <ul> <li>The step index is obtained from the beginning of the file name, it must be composed of two numbers between <code>0</code> and <code>9</code> (from <code>00</code> to <code>99</code>)</li> <li>The next character acts as a separator and is expected to be <code>-</code></li> <li>The rest of the file name (without extension) is then evaluated<ul> <li>If it is equal to <code>assert</code>, the content is considered assertion statements</li> <li>If it is equal to <code>error</code>, the content is considered error statements</li> <li>Else the content is considered resources to be applied</li> </ul> </li> <li>The extension must be <code>.yaml</code> or <code>.yml</code></li> </ul>"},{"location":"test/conventional/#example","title":"Example","text":""},{"location":"test/conventional/#01-configmapyaml","title":"01-configmap.yaml","text":"<p>The manifest below contains a config map in a file called <code>01-configmap.yaml</code>. Chainsaw will associate this manifest with an apply operation in step <code>01</code>.</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\ndata:\n  foo: bar\n</code></pre>"},{"location":"test/conventional/#02-assertyaml","title":"02-assert.yaml","text":"<p>The manifest below contains an assertion statement in a file called <code>02-assert.yaml</code>. Chainsaw will associate this manifest with an assert operation in step <code>02</code>.</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\ndata:\n  foo: bar\n</code></pre>"},{"location":"test/conventional/#03-errorsyaml","title":"03-errors.yaml","text":"<p>The manifest below contains an error statement in a file called <code>03-errors.yaml</code>. Chainsaw will associate this manifest with an error operation in step <code>03</code>.</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: chainsaw-quick-start\ndata:\n  lorem: ipsum\n</code></pre>"},{"location":"test/conventional/#conclusion","title":"Conclusion","text":"<p>This test will first create a config map, then assert the content of the config map contains the <code>foo: bar</code> data, and then verify that the config map does not contain the <code>lorem: ipsum</code> data.</p> <p>For such a simple test, the conventional approach works reasonably well but will quickly become limited when the test scenarios get more complex.</p> <p>Look at the explicit approach for a lot more flexible solution.</p>"},{"location":"test/explicit/","title":"Explicit approach","text":"<p>The explicit is a bit more verbose than the conventional one but offers far more flexibility and features:</p> <ul> <li>It does not rely on file naming conventions for operations ordering</li> <li>It encourages file reuse across tests, reducing duplication and maintenance</li> <li>It offers the flexibility to provide additional configurations like timeouts, complex logic, etc...</li> <li>It supports all operations without restrictions</li> </ul>"},{"location":"test/explicit/#the-test-resource","title":"The Test resource","text":"<p>A <code>Test</code> resource, like any other Kubernetes resource, has an <code>apiVersion</code>, <code>kind</code> and <code>metadata</code> section.</p> <p>It also comes with a <code>spec</code> section used to declaratively represent the test logic, steps and operations, as well as other configuration elements belonging to the test being defined.</p> <p>Reference documentation</p> <p>The full structure of the <code>Test</code> resource is documented here.</p>"},{"location":"test/explicit/#example","title":"Example","text":""},{"location":"test/explicit/#chainsaw-testyaml","title":"chainsaw-test.yaml","text":"<p>The <code>Test</code> below illustrates a simple test. Chainsaw will load the <code>Test</code> and steps defined in its <code>spec</code> section.</p> <p>It's worth noting that:</p> <ul> <li>The test defines its own <code>timeouts</code></li> <li>It also states that this test should not be executed in parallel with other tests</li> <li>It has multiple steps, most of them reference files that can be used in other tests if needed</li> <li>It uses an arbitrary shell script</li> </ul> <pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # state that this test should not be executed in parallel with other tests\n  concurrent: false\n  # timeouts for this specific test\n  timeouts:\n    apply: 10s\n    assert: 10s\n    error: 10s\n  steps:\n  # step 1\n  # apply a configmap to the cluster\n  # the path to the configmap is relative to the folder\n  # containing the test, hence allow reusing manifests\n  # across multiple tests\n  - try:\n    - apply:\n        file: ../resources/configmap.yaml\n  # step 2\n  # execute assert statements against existing resources\n  # in the cluster\n  - try:\n    - assert:\n        file: ../resources/configmap-assert.yaml\n  # step 3\n  # execute error statements against existing resources\n  # in the cluster\n  - try:\n    - error:\n        file: ../resources/configmap-error.yaml\n  # step 4\n  # execute an arbitrary shell script\n  - try:\n    - script:\n        content: echo \"goodbye\"\n</code></pre>"},{"location":"test/explicit/#conclusion","title":"Conclusion","text":"<p>While this test is simple, it illustrates the differences with the conventional approach.</p> <p>The purpose here is only to present the explicit approach and there are a lot more features to discuss, we will cover them in the next sections.</p>"},{"location":"test/spec/","title":"Test spec","text":"<p>A Chainsaw test is mostly made of steps.</p> <p>That being said, there are a couple of other interesting fields too.</p>"},{"location":"test/spec/#syntax","title":"Syntax","text":"<pre><code>apiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: example\nspec:\n  # test configuration\n  concurrent: false\n  bindings:\n  - name: foo\n    value: bar\n  timeouts:\n    apply: 1s\n    assert: 2m\n    delete: 30s\n  ...\n  steps:\n  # step 1\n  - try: ...\n  # step 2\n  - try: ...\n    catch: ...\n  # step 3\n  - try: ...\n    catch: ...\n    finally: ...\n</code></pre>"},{"location":"test/spec/#reference","title":"Reference","text":"<p>The full structure of the <code>TestSpec</code> is documented here.</p>"},{"location":"test/spec/#lifecycle","title":"Lifecycle","text":""},{"location":"test/spec/#cleanup","title":"Cleanup","text":"<p>At the end of the test, Chainsaw cleans up resources it created during the test, in the opposite order of creation.</p> <p>By default, when a step fails, Chainsaw stops the execution and the remaining steps are not executed. The cleanup process starts at the moment the test stops executing.</p> <p>Tip</p> <p>Note that when a failure happens during cleanup, the test is marked as failed and Chainsaw continues executing cleanup for the remaining steps.</p>"},{"location":"test/spec/#without-failure","title":"Without failure","text":"<pre><code>sequenceDiagram\n    autonumber\n    participant T as Test\n    participant S1 as Step 1\n    participant S2 as Step 2\n    participant S3 as Step 3\n\n    T  -&gt;&gt; S1: execute\n    S1 -&gt;&gt; S2: execute\n    S2 -&gt;&gt; S3: execute\n\n    S3 --&gt;&gt; S2: cleanup\n    S2 --&gt;&gt; S1: cleanup\n    S1 --&gt;&gt; T: cleanup</code></pre> <ol> <li>Test starts by executing Step 1</li> <li>Step 1 terminates -&gt; Step 2 starts executing</li> <li>Step 2 terminates -&gt; Step 3 starts executing</li> <li>Step 3 terminates -&gt; Cleanup for Step 3 starts</li> <li>Cleanup for Step 3 terminates -&gt; Cleanup for Step 2 starts</li> <li>Cleanup for Step 2 terminates -&gt; Cleanup for Step 1 is executed</li> </ol>"},{"location":"test/spec/#with-failure","title":"With failure","text":"<pre><code>sequenceDiagram\n    autonumber\n    participant T as Test\n    participant S1 as Step 1\n    participant S2 as Step 2\n    participant S3 as Step 3\n\n    T  -&gt;&gt; S1: execute\n    S1 -&gt;&gt; S2: execute (fail)\n\n    Note left of S3: Step 3 is NOT executed\n\n    S2 --&gt;&gt; S1: cleanup\n    S1 --&gt;&gt; T: cleanup</code></pre> <ol> <li>Test starts by executing Step 1</li> <li>Step 1 terminates -&gt; Step 2 starts executing</li> <li>Step 2 fails -&gt; Cleanup for Step 2 starts</li> <li>Cleanup for Step 2 terminates -&gt; Cleanup for Step 1 is executed</li> </ol>"},{"location":"test/spec/#supported-elements","title":"Supported elements","text":""},{"location":"test/spec/#namespace","title":"Namespace","text":"<p>The namespace the test should run into, see Namespace selection.</p>"},{"location":"test/spec/#namespace-template","title":"Namespace template","text":"<p>Eventually provide a template if you something specific, see Namespace template.</p>"},{"location":"test/spec/#timeouts","title":"Timeouts","text":"<p>All timeouts can be specified per test, see Control your timeouts.</p>"},{"location":"test/spec/#clusters","title":"Clusters","text":"<p>Additional clusters can be registered at the test level, see Multi-cluster options.</p>"},{"location":"test/spec/#cluster","title":"Cluster","text":"<p>The cluster (by name) used to run the test, see Multi-cluster setup.</p>"},{"location":"test/spec/#bindings","title":"Bindings","text":"<p>Bindings can be registered at the test level and inherited in all steps, see Bindings.</p>"},{"location":"test/spec/#catch","title":"Catch","text":"<p>Catch blocks can be specified at the test level to declare common catch statements.</p>"},{"location":"test/spec/#template","title":"Template","text":"<p>Chainsaw allows templating configuration on a per test basis.</p>"},{"location":"test/spec/#concurrency","title":"Concurrency","text":"<p>Controlling concurrency per test is also possible, see Concurrency control.</p>"},{"location":"test/spec/#skip","title":"Skip","text":"<p>In case you need to skip a test for whatever reason, use <code>skip: true</code>.</p>"},{"location":"test/spec/#steps","title":"Steps","text":"<p>Steps are what tests will execute when they are run, see Test step spec dedicated section.</p>"}]}