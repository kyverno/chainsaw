//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha2

import (
	unsafe "unsafe"

	v1alpha1 "github.com/kyverno/chainsaw/pkg/apis/v1alpha1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*Configuration)(nil), (*v1alpha1.Configuration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_Configuration_To_v1alpha1_Configuration(a.(*Configuration), b.(*v1alpha1.Configuration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.Configuration)(nil), (*Configuration)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_Configuration_To_v1alpha2_Configuration(a.(*v1alpha1.Configuration), b.(*Configuration), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*v1alpha1.ConfigurationSpec)(nil), (*ConfigurationSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_ConfigurationSpec_To_v1alpha2_ConfigurationSpec(a.(*v1alpha1.ConfigurationSpec), b.(*ConfigurationSpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddConversionFunc((*ConfigurationSpec)(nil), (*v1alpha1.ConfigurationSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha2_ConfigurationSpec_To_v1alpha1_ConfigurationSpec(a.(*ConfigurationSpec), b.(*v1alpha1.ConfigurationSpec), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha2_Configuration_To_v1alpha1_Configuration(in *Configuration, out *v1alpha1.Configuration, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_ConfigurationSpec_To_v1alpha1_ConfigurationSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_Configuration_To_v1alpha1_Configuration is an autogenerated conversion function.
func Convert_v1alpha2_Configuration_To_v1alpha1_Configuration(in *Configuration, out *v1alpha1.Configuration, s conversion.Scope) error {
	return autoConvert_v1alpha2_Configuration_To_v1alpha1_Configuration(in, out, s)
}

func autoConvert_v1alpha1_Configuration_To_v1alpha2_Configuration(in *v1alpha1.Configuration, out *Configuration, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ConfigurationSpec_To_v1alpha2_ConfigurationSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Configuration_To_v1alpha2_Configuration is an autogenerated conversion function.
func Convert_v1alpha1_Configuration_To_v1alpha2_Configuration(in *v1alpha1.Configuration, out *Configuration, s conversion.Scope) error {
	return autoConvert_v1alpha1_Configuration_To_v1alpha2_Configuration(in, out, s)
}

func autoConvert_v1alpha2_ConfigurationSpec_To_v1alpha1_ConfigurationSpec(in *ConfigurationSpec, out *v1alpha1.ConfigurationSpec, s conversion.Scope) error {
	out.Catch = *(*[]v1alpha1.Catch)(unsafe.Pointer(&in.Catch))
	// WARNING: in.Cleanup requires manual conversion: does not exist in peer-type
	out.Clusters = *(*map[string]v1alpha1.Cluster)(unsafe.Pointer(&in.Clusters))
	// WARNING: in.Discovery requires manual conversion: does not exist in peer-type
	// WARNING: in.Execution requires manual conversion: does not exist in peer-type
	// WARNING: in.Namespace requires manual conversion: inconvertible types (*github.com/kyverno/chainsaw/pkg/apis/v1alpha2.Namespace vs string)
	// WARNING: in.Report requires manual conversion: does not exist in peer-type
	// WARNING: in.Templating requires manual conversion: does not exist in peer-type
	out.Timeouts = in.Timeouts
	return nil
}

func autoConvert_v1alpha1_ConfigurationSpec_To_v1alpha2_ConfigurationSpec(in *v1alpha1.ConfigurationSpec, out *ConfigurationSpec, s conversion.Scope) error {
	out.Timeouts = in.Timeouts
	// WARNING: in.SkipDelete requires manual conversion: does not exist in peer-type
	// WARNING: in.Template requires manual conversion: does not exist in peer-type
	// WARNING: in.FailFast requires manual conversion: does not exist in peer-type
	// WARNING: in.Parallel requires manual conversion: does not exist in peer-type
	// WARNING: in.ReportFormat requires manual conversion: does not exist in peer-type
	// WARNING: in.ReportPath requires manual conversion: does not exist in peer-type
	// WARNING: in.ReportName requires manual conversion: does not exist in peer-type
	// WARNING: in.Namespace requires manual conversion: inconvertible types (string vs *github.com/kyverno/chainsaw/pkg/apis/v1alpha2.Namespace)
	// WARNING: in.NamespaceTemplate requires manual conversion: does not exist in peer-type
	// WARNING: in.FullName requires manual conversion: does not exist in peer-type
	// WARNING: in.ExcludeTestRegex requires manual conversion: does not exist in peer-type
	// WARNING: in.IncludeTestRegex requires manual conversion: does not exist in peer-type
	// WARNING: in.RepeatCount requires manual conversion: does not exist in peer-type
	// WARNING: in.TestFile requires manual conversion: does not exist in peer-type
	// WARNING: in.ForceTerminationGracePeriod requires manual conversion: does not exist in peer-type
	// WARNING: in.DelayBeforeCleanup requires manual conversion: does not exist in peer-type
	out.Clusters = *(*map[string]v1alpha1.Cluster)(unsafe.Pointer(&in.Clusters))
	out.Catch = *(*[]v1alpha1.Catch)(unsafe.Pointer(&in.Catch))
	return nil
}
