package conversion

import (
	"github.com/kyverno/chainsaw/pkg/apis/v1alpha1"
	"github.com/kyverno/chainsaw/pkg/apis/v1alpha2"
	"k8s.io/apimachinery/pkg/conversion"
)

func Convert_v1alpha2_ConfigurationSpec_To_v1alpha1_ConfigurationSpec(in *v1alpha2.ConfigurationSpec, out *v1alpha1.ConfigurationSpec, _ conversion.Scope) error {
	out.SkipDelete = in.Cleanup.SkipDelete
	out.DelayBeforeCleanup = in.Cleanup.DelayBeforeCleanup
	out.Clusters = in.Clusters
	out.DeletionPropagationPolicy = in.Deletion.Propagation
	out.ExcludeTestRegex = in.Discovery.ExcludeTestRegex
	out.IncludeTestRegex = in.Discovery.IncludeTestRegex
	out.TestFile = in.Discovery.TestFile
	out.FullName = in.Discovery.FullName
	out.Catch = in.Error.Catch
	out.FailFast = in.Execution.FailFast
	out.Parallel = in.Execution.Parallel
	out.RepeatCount = in.Execution.RepeatCount
	out.ForceTerminationGracePeriod = in.Execution.ForceTerminationGracePeriod
	out.Namespace = in.Namespace.Name
	out.NamespaceTemplate = in.Namespace.Template
	out.NamespaceTemplateCompiler = in.Namespace.Compiler
	if in := in.Report; in != nil {
		out.ReportFormat = v1alpha1.ReportFormatType(in.Format)
		out.ReportPath = in.Path
		out.ReportName = in.Name
	}
	out.Template = in.Templating.Enabled
	out.Timeouts = in.Timeouts
	return nil
}

func Convert_v1alpha1_ConfigurationSpec_To_v1alpha2_ConfigurationSpec(in *v1alpha1.ConfigurationSpec, out *v1alpha2.ConfigurationSpec, _ conversion.Scope) error {
	out.Cleanup = v1alpha2.CleanupOptions{
		SkipDelete:         in.SkipDelete,
		DelayBeforeCleanup: in.DelayBeforeCleanup,
	}
	out.Clusters = in.Clusters
	out.Deletion = v1alpha2.DeletionOptions{
		Propagation: in.DeletionPropagationPolicy,
	}
	out.Discovery = v1alpha2.DiscoveryOptions{
		ExcludeTestRegex: in.ExcludeTestRegex,
		IncludeTestRegex: in.IncludeTestRegex,
		TestFile:         in.TestFile,
		FullName:         in.FullName,
	}
	out.Error = v1alpha2.ErrorOptions{
		Catch: in.Catch,
	}
	out.Execution = v1alpha2.ExecutionOptions{
		FailFast:                    in.FailFast,
		Parallel:                    in.Parallel,
		RepeatCount:                 in.RepeatCount,
		ForceTerminationGracePeriod: in.ForceTerminationGracePeriod,
	}
	out.Namespace = v1alpha2.NamespaceOptions{
		Name:     in.Namespace,
		Compiler: in.NamespaceTemplateCompiler,
		Template: in.NamespaceTemplate,
	}
	out.Report = &v1alpha2.ReportOptions{
		Format: v1alpha2.ReportFormatType(in.ReportFormat),
		Path:   in.ReportPath,
		Name:   in.ReportName,
	}
	out.Templating = v1alpha2.TemplatingOptions{
		Enabled: in.Template,
	}
	out.Timeouts = in.Timeouts
	return nil
}

func autoConvert_v1alpha2_Configuration_To_v1alpha1_Configuration(in *v1alpha2.Configuration, out *v1alpha1.Configuration, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha2_ConfigurationSpec_To_v1alpha1_ConfigurationSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha2_Configuration_To_v1alpha1_Configuration is an autogenerated conversion function.
func Convert_v1alpha2_Configuration_To_v1alpha1_Configuration(in *v1alpha2.Configuration, out *v1alpha1.Configuration, s conversion.Scope) error {
	return autoConvert_v1alpha2_Configuration_To_v1alpha1_Configuration(in, out, s)
}

func autoConvert_v1alpha1_Configuration_To_v1alpha2_Configuration(in *v1alpha1.Configuration, out *v1alpha2.Configuration, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_ConfigurationSpec_To_v1alpha2_ConfigurationSpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_Configuration_To_v1alpha2_Configuration is an autogenerated conversion function.
func Convert_v1alpha1_Configuration_To_v1alpha2_Configuration(in *v1alpha1.Configuration, out *v1alpha2.Configuration, s conversion.Scope) error {
	return autoConvert_v1alpha1_Configuration_To_v1alpha2_Configuration(in, out, s)
}
